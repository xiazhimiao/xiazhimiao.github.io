<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 开发实习面试准备 - Grained.AI</title>
    <link href="/2025/06/25/Python-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-Grained-AI/"/>
    <url>/2025/06/25/Python-%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-Grained-AI/</url>
    
    <content type="html"><![CDATA[<h1 id="python-软件开发实习生面试准备公司要求梳理篇">Python软件开发实习生面试准备（公司要求梳理篇）</h1><h2 id="一基础资质类">一、基础资质类</h2><h3 id="问题-1该岗位要求的学历及专业背景是">问题1：该岗位要求的学历及专业背景是？</h3><p><strong>回答</strong>：计算机相关专业在读本科生或者研究生，我是北华大学大三本科生。</p><h3id="问题-2你是否符合计算机相关专业在读这一基本条件呀简单说下你的专业和在读阶段">问题2：你是否符合计算机相关专业在读这一基本条件呀，简单说下你的专业和在读阶段？</h3><p><strong>回答</strong>：符合，我是北华大学计算机相关专业大三本科生。</p><h2 id="二核心技能类">二、核心技能类</h2><h3 id="编程语言">（1）编程语言</h3><h4id="问题-3岗位要求-熟练使用-python你觉得自己在-python-技能上哪些场景应用得比较好比如数据处理爬虫开发能举个具体项目-作业里用-python-实现功能的例子吗">问题3：岗位要求 “熟练使用 Python”，你觉得自己在 Python技能上，哪些场景应用得比较好？比如数据处理、爬虫开发，能举个具体项目 /作业里用 Python 实现功能的例子吗？</h4><p><strong>回答</strong>：我最初用 python是用来爬取北京新发地的菜价，当年很好爬取，后来我去爬取小说网，把斗罗大陆小说爬取下来，代码目前还存放在1024code平台上，不过是两年前的了。后来教学计划里有爬虫，我又爬取了一个小说网，针对这段代码做了软件测试，视频发布在了b站。第二次爬取小说网印象比较深，因为小说网做了文字的加密，我需要进行爬取后解密然后存储，再之后做了研招网的自动化爬虫，类似的项目还挺多，我仓库上传了一部分。</p><h3 id="爬虫框架">（2）爬虫框架</h3><h4id="问题-4提到-了解-scrapyselenium-等爬虫框架这两个框架你实际用过吗">问题4：提到 “了解 scrapy、selenium等爬虫框架”，这两个框架你实际用过吗？</h4><p><strong>回答</strong>：研招网用到的就是 selenium，而 scrapy我拿来做了两个项目。</p><h4id="问题-5scrapy-细分说说它的核心组件如-enginespiderpipeline-等以及用它做爬虫时数据提取请求调度的大致流程">问题5（scrapy 细分）：说说它的核心组件（如 Engine、Spider、Pipeline等），以及用它做爬虫时，数据提取、请求调度的大致流程？</h4><p><strong>回答</strong>：<strong>快速记忆口诀</strong></p><ol type="1"><li><strong>组件关系</strong>： <strong>Engine 调度，Spider干活，Scheduler 排队，Downloader 跑腿，Pipeline 加工！</strong></li><li><strong>流程</strong>： <strong>请求从 Spider 到 Scheduler，响应从Downloader 到 Spider，数据从 Spider 到 Pipeline！</strong></li></ol><h4id="问题-6selenium-细分它适合处理什么样的爬虫场景比如动态渲染页面使用时如何模拟浏览器操作如点击输入怎么处理元素等待问题">问题6（selenium细分）：它适合处理什么样的爬虫场景（比如动态渲染页面）？使用时，如何模拟浏览器操作（如点击、输入），怎么处理元素等待问题？</h4><p><strong>回答</strong>：</p><ol type="1"><li><strong>场景选择</strong>： <strong>JS 渲染、登录验证、复杂交互 ——选 Selenium！</strong></li><li><strong>操作步骤</strong>：<strong>定位元素→执行操作→等待结果→处理异常！</strong></li><li><strong>等待策略</strong>：<strong>优先显式等待，其次隐式等待，避免强制等待！</strong></li></ol><p><strong>等待策略详解</strong>：</p><ul><li><strong>隐式等待</strong>：“我最多等 10秒，期间我会时不时看一下，好了就立刻告诉我”；</li><li><strong>强制等待</strong>：“不管怎样，先让我发呆 10 秒，10秒后再干活”。</li></ul><p><strong>为什么隐式等待不会被反爬识别？</strong></p><ul><li><strong>请求间隔不固定</strong>：隐式等待的实际耗时由元素加载速度决定，可能是 1 秒、3 秒、7秒，模拟了真实用户 “看到页面后再操作” 的自然间隔；</li><li><strong>非阻塞下可做其他事</strong>：等待元素时，程序可同时处理其他任务（如记录日志、生成下一个请求），更接近人类多任务处理行为。</li></ul><h3 id="数据库技术">（3）数据库技术</h3><h4id="问题-7了解-mysqlrediselastic-searchpostgresql-等关系型-非关系型数据库技术优先针对这些数据库先说说-mysql你用过它存储数据吗简单说下建表语句查询语句比如单表查询多表联查以及优化查询性能的小技巧如索引">问题7：“了解 mysql、redis、elastic search、postgresql 等关系型 /非关系型数据库技术优先”，针对这些数据库，先说说MySQL，你用过它存储数据吗？简单说下建表语句、查询语句（比如单表查询、多表联查），以及优化查询性能的小技巧（如索引）？</h4><p><strong>回答</strong>：在关于爬虫项目里，我最多用到的就是 csv 或者 md来存储数据，而数据库。则是我在学习 java后端的时候一并学习的，但在爬虫项目体现较少，不过如简历所说，我以前做过linkai 的一个插件，其中就是用到了 mysql。</p><h4id="问题-8redis-细分它的基本数据结构如-stringhashlist你了解不什么场景下适合用-redis-做缓存怎么避免缓存穿透雪崩问题">问题8（Redis 细分）：它的基本数据结构（如String、Hash、List）你了解不？什么场景下适合用 Redis做缓存，怎么避免缓存穿透、雪崩问题？</h4><p><strong>回答</strong>：</p><ol type="1"><li><strong>数据结构</strong>： <strong>String 存配置，Hash 存对象，List做队列，Set 去重，ZSet 排顺序！</strong></li><li><strong>缓存场景</strong>：<strong>高频读、临时数据、分布式、复杂计算 —— 用 Redis！</strong></li><li><strong>避坑指南</strong>： <strong>穿透加空值 / 布隆，雪崩随机过期+ 多级，击穿互斥锁 / 永不过期！</strong></li></ol><h4id="问题-9elasticsearch-细分知道它的核心概念如索引文档分片吗如果要实现全文搜索大概怎么操作比如创建索引写入数据执行查询">问题9（Elasticsearch细分）：知道它的核心概念（如索引、文档、分片）吗？如果要实现全文搜索，大概怎么操作（比如创建索引、写入数据、执行查询）？</h4><p><strong>回答</strong>： Elasticsearch 是基于 Lucene的分布式全文搜索引擎，核心概念包括：</p><ul><li><strong>索引（Index）</strong>：类似数据库，是存储相关文档的集合，每个索引有自己的映射（Mapping）定义字段类型。</li><li><strong>文档（Document）</strong>：索引中的基本数据单元，以 JSON格式存储，每个文档有唯一 ID。</li><li><strong>分片（Shard）</strong>：索引的物理拆分单元，每个分片是一个独立的搜索引擎，支持分布式存储和并行查询，提高性能和可用性。</li></ul><p>实现全文搜索的基本流程：</p><ol type="1"><li><strong>创建索引</strong>：定义索引名称和字段映射（如设置文本字段为可分词），确定分片和副本数量。</li><li><strong>写入数据</strong>：将文档以 JSON 格式存入索引，Elasticsearch自动对文本字段建立倒排索引。</li><li><strong>执行查询</strong>：通过 DSL（Domain SpecificLanguage）语法编写查询条件，例如用<code>match</code>进行全文匹配，或用<code>filter</code>进行精确过滤，结果以JSON 格式返回。</li></ol><h4id="问题-10postgresql-细分和-mysql-相比它有哪些独特特性如支持复杂数据类型自定义函数你有没有简单接触或实践过">问题10（PostgreSQL 细分）：和 MySQL相比，它有哪些独特特性（如支持复杂数据类型、自定义函数）？你有没有简单接触或实践过？</h4><p><strong>回答</strong>： PostgreSQL（简称PG）是功能强大的关系型数据库，与 MySQL 相比，独特特性包括：</p><ul><li><strong>复杂数据类型</strong>：支持数组（如<code>integer[]</code>）、JSON/JSONB、XML、几何类型（点、线、面）、范围类型（如时间范围）等，无需额外插件即可处理非结构化数据。</li><li><strong>自定义函数与扩展</strong>：支持用 PL/pgSQL、Python、Java等语言编写自定义函数，甚至可创建新的数据类型和索引方法（如 GIN索引）。</li><li><strong>高级事务特性</strong>：支持事务隔离级别（如可序列化）、保存点（Savepoint），事务完整性更强。</li><li><strong>空间数据与 GIS 支持</strong>：内置 PostGIS扩展，原生支持地理空间数据的存储和查询，适合地图、位置服务等场景。</li><li><strong>全文搜索与复杂查询</strong>：支持针对文本的全文检索（如<code>tsvector</code>类型），以及窗口函数、递归查询等高级SQL 特性。</li></ul><p>PG 更偏向于 “企业级”数据库，适合需要复杂数据类型、高扩展性或地理信息处理的场景，而 MySQL在互联网场景中因轻量和易维护更普及。</p><h3 id="文档编写">（4）文档编写</h3><h4id="问题-11熟练使用-markdown-或-latex-编写文档这两种工具你常用哪个">问题11：“熟练使用 Markdown 或 LaTeX 编写文档”，这两种工具你常用哪个？</h4><p><strong>回答</strong>：md文档我接触很多年了，经常出现在我博客网站上面，而 latex是我最近针对数学公式有要求而 md满足不了我的需求才学习的，了解较浅，不过能够使用。</p><h4id="问题-12markdown-细分用-markdown-写过技术文档-报告吗比如项目说明怎么通过标题分级列表代码块让文档清晰易读">问题12（Markdown 细分）：用 Markdown 写过技术文档 /报告吗？比如项目说明，怎么通过标题分级、列表、代码块让文档清晰易读？</h4><p><strong>回答</strong>：</p><ul><li><strong>标题分级</strong>：# 大章 ## 小节 ###子点，逻辑清晰不混乱；</li><li><strong>列表分类</strong>：无序列要点，有序排步骤，嵌套分层次；</li><li><strong>代码突出</strong>：行内单引号，块用三引号，注释说明关键点；</li><li><strong>表格引用</strong>：对比用表格，重点加引用，链接跳转更方便。</li></ul><h4id="问题-13latex-细分若用-latex它在公式排版专业文档格式控制上的优势你了解不有没有用它写过带公式图表的文档片段">问题13（LaTeX 细分）：若用LaTeX，它在公式排版、专业文档格式控制上的优势你了解不？有没有用它写过带公式、图表的文档片段？</h4><p><strong>回答</strong>：</p><ul><li><strong>公式优势</strong>：复杂公式轻松写，编号引用自动跟，期刊格式一键得；</li><li><strong>格式控制</strong>：模板定结构，目录自动生，图表位置好管理；</li><li><strong>场景选择</strong>：专业论文用 LaTeX，快速笔记选Markdown，公式复杂就切 LaTeX！</li></ul><h2 id="三职责关联类">三、职责关联类</h2><h3 id="数据生产研发与流程优化">（1）数据生产研发与流程优化</h3><h4id="问题-14岗位要-参与数据生产产品研发流程优化与创新你理解的数据生产流程大概包含哪些环节比如数据采集处理存储标注如果让你优化流程会从哪些角度切入比如提效降本保证数据质量能结合想法举个小例子吗">问题14：岗位要“参与数据生产产品研发、流程优化与创新”，你理解的数据生产流程大概包含哪些环节（比如数据采集、处理、存储、标注）？如果让你优化流程，会从哪些角度切入（比如提效、降本、保证数据质量），能结合想法举个小例子吗？</h4><p><strong>回答</strong>：我会针对性的从被封 ip的方面测试，测试多高的频率既不会被封 ip也不会对服务器造成太大压力，又能满足项目需要。采用代理的方式，更改发送者满足要求，或降低频率。</p><h3 id="多模态数据采集与处理">（2）多模态数据采集与处理</h3><h4id="问题-15使用自动化技术从公开网站或-api-采集多模态数据文本图像视频等并进行清洗和整理先说说文本数据采集时怎么处理反爬如-user-agent-伪装ip-代理清洗时常用哪些方法如去重去除特殊字符分词你用过哪些-python-库如-beautifulsoup正则jieba">问题15：“使用自动化技术从公开网站或 API采集多模态数据（文本、图像、视频等），并进行清洗和整理”，先说说文本数据，采集时，怎么处理反爬（如User-Agent 伪装、IP代理）？清洗时，常用哪些方法（如去重、去除特殊字符、分词），你用过哪些Python 库（如 BeautifulSoup、正则、jieba）？</h4><p><strong>回答</strong>：</p><ul><li><p><strong>反爬三件套</strong>：UA 伪装、IP代理、频率控制；</p></li><li><p><strong>清洗四步法</strong>：去重、滤符、分词、标准化；</p></li><li><p>库函数速记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">requests爬取，BeautifulSoup解析，<br>re正则清洗，jieba分词处理，<br>simhash去重，Tesseract打码。<br></code></pre></td></tr></table></figure></li></ul><h4id="问题-16图像-视频数据细分采集这类数据会遇到什么挑战如数据量大格式兼容清洗整理时怎么处理分辨率格式转换有没有接触过-opencv-等工具">问题16（图像 /视频数据细分）：采集这类数据会遇到什么挑战（如数据量大、格式兼容）？清洗整理时，怎么处理分辨率、格式转换，有没有接触过OpenCV 等工具？</h4><p><strong>回答</strong>：</p><ol type="1"><li><strong>采集挑战</strong>： <strong>量大分块存，格式用 FFmpeg转，反爬加 Referer 和代理！</strong></li><li><strong>OpenCV 操作</strong>： <strong>resize 调尺寸，cvtColor转格式，copyMakeBorder 填背景！</strong></li><li><strong>视频处理</strong>： <strong>分段下载防中断，ffmpeg分离音视频，合并用 concat 列表！</strong></li></ol><h3 id="团队协作与数据工作">（3）团队协作与数据工作</h3><h4id="问题-17协助团队完成数据标注清洗及降噪工作数据标注常见类型如分类边界框标注你了解吗数据清洗除了常规去重格式统一怎么处理缺失值异常值比如用均值填充删除异常记录数据降噪针对文本图像数据降噪有哪些方法文本去停用词图像滤波你能简单说下思路不">问题17：“协助团队完成数据标注、清洗及降噪工作”，数据标注常见类型（如分类、边界框标注）你了解吗？数据清洗除了常规去重、格式统一，怎么处理缺失值、异常值（比如用均值填充、删除异常记录）？数据降噪针对文本、图像数据，降噪有哪些方法（文本去停用词、图像滤波），你能简单说下思路不？</h4><p><strong>回答</strong>：</p><ol type="1"><li><strong>标注类型</strong>：<strong>分类框选分割点，序列标注文本间</strong>。</li><li><strong>缺失值处理</strong>：<strong>删填插补模型算，统计量选均值众数</strong>。</li><li><strong>图像降噪</strong>： <strong>滤波二值开运算，PSNR SSIM来评判</strong>。</li></ol><h2 id="四软性条件类">四、软性条件类</h2><h3id="问题-18岗位要求-具备良好的学习能力和团队合作精神请用两个具体例子分别说明">问题18：岗位要求“具备良好的学习能力和团队合作精神”，请用两个具体例子分别说明：</h3><ol type="1"><li><strong>学习能力</strong>：你在爬虫项目中遇到过从未接触过的技术（如小说网文字加密、研招网动态渲染），是如何快速学习并解决的？比如查资料的路径、实践步骤等。</li><li><strong>团队合作</strong>：有没有在课程项目或小组作业中，和队友协作完成过数据相关任务（如一起爬取数据、清洗标注）？你担任什么角色，如何配合解决问题？<strong>回答</strong>：我很喜欢新技术，当年 chatgpt起矛头的时候，我便当起了账号的二道贩子，也因此对 llm用起来很上手，对于以上的问题，早些年我会去百度找灵感，不够最近我重心向llm偏移。团队合作中我一般担任组长，很少担任组员的情况，我会分配每个人应该做的事情，以及最晚截至时间。</li></ol><h4 id="问题-3.3pandas-和-numpy-的区别及应用场景">问题 3.3：Pandas 和Numpy 的区别及应用场景？</h4><p><strong>回答</strong>：</p><ul><li>核心数据结构<ul><li><strong>Numpy</strong>：多维数组（<code>ndarray</code>），元素类型一致，适合数值计算。</li><li><strong>Pandas</strong>：<code>Series</code>（一维带标签数组）和<code>DataFrame</code>（二维表格），支持混合数据类型。</li></ul></li><li>应用场景<ul><li><strong>Numpy</strong>：科学计算（线性代数、傅里叶变换）、机器学习模型底层计算。</li><li><strong>Pandas</strong>：数据处理（清洗、聚合）、时间序列分析（如股票数据）。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Python</tag>
      
      <tag>实习面试</tag>
      
      <tag>Grained.AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件编码与 Eclipse 的关系：解决乱码问题</title>
    <link href="/2025/05/26/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%8E-Eclipse-%E7%9A%84%E5%85%B3%E7%B3%BB%EF%BC%9A%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2025/05/26/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%8E-Eclipse-%E7%9A%84%E5%85%B3%E7%B3%BB%EF%BC%9A%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="文件编码与-eclipse-的关系解决乱码问题全攻略">文件编码与 Eclipse的关系：解决乱码问题全攻略</h1><p>在日常的编程工作中，乱码问题就像一只令人头疼的“拦路虎”，时不时跳出来干扰我们的工作节奏。尤其是在使用 Eclipse 进行 Java开发时，文件乱码和控制台乱码问题尤为常见。这背后的“罪魁祸首”，其实就是文件编码与 Eclipse 配置之间的“不兼容”。今天，我们就来深入探讨一下文件编码与 Eclipse的关系，以及如何通过一些简单的操作解决乱码问题。</p><h2 id="一文件编码基础utf-8-与-ansigbk">一、文件编码基础：UTF-8 与ANSI（GBK）</h2><p>在计算机的世界里，文字需要通过特定的编码规则转化为二进制数据进行存储和传输，文件编码就是这些规则的集合。UTF-8是一种广泛使用的变长字符编码，它能够对世界上几乎所有的字符进行编码，具有很好的兼容性和扩展性，是国际化应用的首选编码方式。而ANSI 在中文环境下，通常指的是 GBK编码，它是汉字内码扩展规范，专门针对中文设计，能够支持 2万多个汉字和符号。</p><p>在实际应用中，如果文件保存的编码与程序读取时的编码不一致，就会出现乱码。比如，我们创建了一个UTF-8 编码的 Java 源文件，但 Eclipse默认的编码设置与之不匹配，就会导致打开文件时出现乱码现象。</p><h2id="二记事本转码解决源文件乱码的-小妙招">二、记事本转码：解决源文件乱码的“小妙招”</h2><p>当我们遇到 UTF-8 编码的文件在 Eclipse中显示乱码时，利用记事本进行转码是一个简单有效的解决方法。具体操作步骤如下：</p><ol type="1"><li>右键点击乱码的源文件，选择 “打开方式”，然后选择 “记事本”打开文件。</li><li>在记事本中，点击左上角的 “文件” 菜单，选择 “另存为”。</li><li>在弹出的 “另存为” 对话框中，将 “编码” 选项从 “UTF-8” 改为“ANSI（GBK）” ，然后点击 “保存”。此时会提示是否替换原文件，点击 “是”即可。</li><li>替换完成后，重新在 Eclipse中打开该文件，你会发现乱码问题已经解决。</li></ol><figure><img src="3b7017a38f10a37d9d30fd4af220031.png"alt="3b7017a38f10a37d9d30fd4af220031" /><figcaptionaria-hidden="true">3b7017a38f10a37d9d30fd4af220031</figcaption></figure><figure><img src="f0c1d80725d8e7fe7cbf32fe9efaabb.png"alt="f0c1d80725d8e7fe7cbf32fe9efaabb" /><figcaptionaria-hidden="true">f0c1d80725d8e7fe7cbf32fe9efaabb</figcaption></figure><p>这种方法的原理是将文件编码从 UTF-8 转换为 GBK，使文件编码与 Eclipse的默认编码设置（很多情况下 Eclipse 默认编码为 GBK 或与 GBK兼容的编码）相匹配，从而正确显示文件内容。不过需要注意的是，这种转换可能会对一些包含特殊字符或国际化内容的文件造成影响，在操作前最好先备份文件。</p><h2 id="三eclipse-控制台乱码字符编码设置全解析">三、Eclipse控制台乱码：字符编码设置全解析</h2><p>除了源文件乱码，Eclipse控制台输出乱码也是让人十分困扰的问题。不过别担心，通过调整 Eclipse的字符编码设置，就能轻松解决这个问题。以下是具体的操作步骤：</p><p>​ 1. 在Main程序下右键，打开运行配置项<imgsrc="image-20250526073516802.png" alt="image-20250526073516802" /></p><p>2.点击Common，改变编码直至控制台正常；</p><p>注：可通过<code>chcp</code>,查看自己电脑编码。</p><figure><img src="image-20250526073705829.png" alt="image-20250526073705829" /><figcaption aria-hidden="true">image-20250526073705829</figcaption></figure><h2 id="四总结">四、总结</h2><p>文件编码与 Eclipse的关系紧密相连，乱码问题本质上就是编码不匹配导致的。通过利用记事本将UTF-8 文件转换为ANSI（GBK）编码，能够有效解决大部分源文件乱码问题；而合理设置 Eclipse的字符编码，则可以轻松搞定控制台乱码。希望通过本文的介绍，大家在今后使用Eclipse进行开发时，能够更加从容地应对乱码问题，让编程工作更加顺畅高效！</p>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>乱码</tag>
      
      <tag>gbk</tag>
      
      <tag>utf-8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Hutool 和 OpenCSV 的日历记事本系统开发</title>
    <link href="/2025/05/25/%E5%9F%BA%E4%BA%8E-Hutool-%E5%92%8C-OpenCSV-%E7%9A%84%E6%97%A5%E5%8E%86%E8%AE%B0%E4%BA%8B%E6%9C%AC%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    <url>/2025/05/25/%E5%9F%BA%E4%BA%8E-Hutool-%E5%92%8C-OpenCSV-%E7%9A%84%E6%97%A5%E5%8E%86%E8%AE%B0%E4%BA%8B%E6%9C%AC%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="基于-hutool-和-opencsv-的日历记事本系统开发实践">基于 Hutool 和OpenCSV 的日历记事本系统开发实践</h1><h2 id="一项目概述">一、项目概述</h2><p>本文记录一个基于 Java的日历记事本系统开发过程，主要解决<strong>阳历与阴历日期管理、事件存储与查询、异常处理</strong>等问题，涉及Hutool 工具库、OpenCSV 文件解析及设计模式的应用。</p><ul><li>核心库版本<ul><li>Hutool：5.8.38（日期处理与工具类）</li><li>OpenCSV：5.7.0（CSV 文件读写）</li><li>Apache Commons Lang3：3.17.0（通用工具类，OpenCSV 依赖）</li></ul></li></ul><h2 id="二采用的设计模式">二、采用的设计模式</h2><h3 id="单例模式singleton">1.<strong>单例模式（Singleton）</strong></h3><ul><li><p><strong>场景</strong>：<code>NotepadManager</code>类使用单例模式确保全局唯一实例。</p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NotepadManager instance;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">NotepadManager</span><span class="hljs-params">()</span> &#123;&#125; <span class="hljs-comment">// 私有化构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> NotepadManager <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotepadManager</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="策略模式strategy">2. <strong>策略模式（Strategy）</strong></h3><ul><li><p><strong>场景</strong>：定义<code>StorageStrategy</code>接口，实现类<code>CsvStorageStrategy</code>负责CSV 文件存储逻辑。</p></li><li><p>接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageStrategy</span> &#123;<br>    List&lt;Event&gt; <span class="hljs-title function_">loadEvents</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveEvents</span><span class="hljs-params">(List&lt;Event&gt; events)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>优势</strong>：方便扩展其他存储方式（如JSON、数据库）。</p></li></ul><h3 id="观察者模式observer">3.<strong>观察者模式（Observer）</strong></h3><ul><li><p><strong>场景</strong>：<code>EventNotifier</code>类管理观察者，事件变更时（添加/ 修改 / 删除）触发通知。</p></li><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>    observers.add(observer);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">(String message)</span> &#123;<br>    observers.forEach(o -&gt; o.update(message));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="三项目目录结构">三、项目目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">EventNotepad<br>├─ JRE System Library [JavaSE-22]  # Java 22运行时环境<br>├─ src<br>│  └─ com.calendar.notepad<br>│     ├─ Main.java                  # 主程序入口（控制台交互）<br>│     ├─ lunar<br>│     │  └─ LunarUtil.java          # 阴历工具类（阳历转阴历、农历键生成）<br>│     ├─ model<br>│     │  └─ Event.java              # 事件实体（标题、日期、内容）<br>│     ├─ observer<br>│     │  ├─ EventNotifier.java      # 事件通知器（观察者模式，管理事件变更通知）<br>│     │  └─ Observer.java           # 观察者接口（定义更新方法）<br>│     ├─ service<br>│     │  └─ NotepadManager.java     # 核心管理类（单例，事件增删改查、存储策略、阴历映射）<br>│     └─ strategy<br>│        ├─ CsvStorageStrategy.java # CSV存储实现（读写events.csv）<br>│        └─ StorageStrategy.java    # 存储策略接口（可扩展JSON、数据库等存储）<br>├─ Referenced Libraries             # IDE自动管理的依赖（如JRE库）<br>├─ lib                              # 第三方库（手动导入）<br>│  ├─ commons-lang3-3.17.0.jar     # Apache Commons Lang3（OpenCSV依赖）<br>│  ├─ hutool-all-5.8.38.jar        # Hutool（农历计算、日期工具）<br>│  └─ opencsv-5.7.0.jar            # OpenCSV（CSV文件读写）<br>└─ events.csv                       # 事件数据存储文件（CSV格式）<br></code></pre></td></tr></table></figure><h2 id="四阳历转阴历功能实现">四、阳历转阴历功能实现</h2><h3 id="依赖配置hutool-库">1. 依赖配置（Hutool 库）</h3><p>注：本次代码编程时，考虑到客户可能不会maven，使用的是本地导入的Hutool。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="工具类lunarutil实现">2. 工具类<code>LunarUtil</code>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.lunar;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.date.ChineseDate;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LunarUtil</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阳历转阴历字符串（如：2025年四月初八）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">solarToLunarString</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-keyword">if</span> (solarDate == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;无效日期&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ChineseDate</span> <span class="hljs-variable">lunar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate);<br>            <span class="hljs-keyword">return</span> lunar.getChineseYear() + <span class="hljs-string">&quot;年&quot;</span> <br>                 + lunar.getChineseMonthName() <br>                 + lunar.getChineseDay();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;阴历转换失败: &quot;</span> + e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;转换失败&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成阴历查询键（年-月-日）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLunarKey</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-type">ChineseDate</span> <span class="hljs-variable">lunar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate);<br>        <span class="hljs-keyword">return</span> lunar.getChineseYear() + <span class="hljs-string">&quot;-&quot;</span> <br>             + lunar.getMonth() + <span class="hljs-string">&quot;-&quot;</span> <br>             + lunar.getChineseDay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业务逻辑集成">3. 业务逻辑集成</h3><ul><li><p>在</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">NotepadManager</span><br></code></pre></td></tr></table></figure><p>中维护阴历事件映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String, List&lt;Event&gt;&gt; lunarEventMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateLunarEventMap</span><span class="hljs-params">(Event event)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> LunarUtil.getLunarKey(event.getDate());<br>    lunarEventMap.computeIfAbsent(key, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()).add(event);<br>&#125;<br><br><span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">queryByLunarDate</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> LunarUtil.getLunarKey(solarDate);<br>    <span class="hljs-keyword">return</span> lunarEventMap.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="五eclipse-导入本地-jar-包教程">五、Eclipse 导入本地 JAR包教程</h2><h3 id="下载-jar-包">1. 下载 JAR 包</h3><ul><li><strong>OpenCSV</strong>：从<ahref="https://mvnrepository.com/artifact/com.opencsv/opencsv/5.7.0">Maven中央仓库</a>下载<code>opencsv-5.7.0.jar</code>。</li><li><strong>Apache CommonsLang3</strong>：下载<code>commons-lang3-3.12.0.jar</code>。</li></ul><h3 id="添加到项目">2. 添加到项目</h3><h4 id="步骤-1创建lib目录">步骤 1：创建<code>lib</code>目录</h4><p>在 Eclipse 项目根目录右键 → <code>New Folder</code> →命名为<code>lib</code>。</p><h4 id="步骤-2复制-jar-包">步骤 2：复制 JAR 包</h4><p>将下载的 JAR 文件复制到<code>lib</code>目录中。</p><h4 id="步骤-3配置构建路径">步骤 3：配置构建路径</h4><ol type="1"><li>右键项目 → <code>Build Path</code> →<code>Configure Build Path</code>。</li><li>在<code>Libraries</code>选项卡中，点击<code>Add JARs</code>。</li><li>选择<code>lib</code>目录下的所有 JAR 包，点击<code>OK</code>。</li></ol><h4 id="验证">验证</h4><ul><li>导入语句生效（如<code>import com.opencsv.CSVReader;</code>）。</li><li>项目无红叉错误。</li></ul><h2 id="六常见问题及解决方案">六、常见问题及解决方案</h2><h3 id="依赖缺失问题">1. 依赖缺失问题</h3><h4id="错误csvreader-cannot-be-resolved-to-a-type">错误：<code>CSVReader cannot be resolved to a type</code></h4><ul><li><strong>原因</strong>：未添加 OpenCSV 依赖。</li><li><strong>解决</strong>：手动导入 JAR 包或添加 Maven 依赖。</li></ul><h4id="错误noclassdeffounderror-orgapachecommonslang3objectutils">错误：<code>NoClassDefFoundError: org/apache/commons/lang3/ObjectUtils</code></h4><ul><li><strong>原因</strong>：OpenCSV 依赖 Apache Commons Lang3。</li><li><strong>解决</strong>：添加<code>commons-lang3</code>依赖。</li></ul><h3 id="日期解析异常">2. 日期解析异常</h3><h4id="错误arrayindexoutofboundsexception">错误：<code>ArrayIndexOutOfBoundsException</code></h4><ul><li><strong>原因</strong>：Hutool处理非法日期（如<code>null</code>或超出范围的日期）。</li><li>解决<ul><li>在<code>CsvStorageStrategy</code>中验证日期格式（<code>yyyy-MM-dd</code>）。</li><li>在<code>LunarUtil</code>中添加日期范围检查（如 1900-2100 年）。</li></ul></li></ul><h3 id="ide-缓存问题">3. IDE 缓存问题</h3><ul><li><strong>错误</strong>：类已导入但仍提示未找到（如<code>Date cannot be resolved</code>）。</li><li>解决<ul><li>Eclipse：<code>Project → Clean</code>。</li><li>IntelliJIDEA：<code>File → Invalidate Caches / Restart</code>。</li></ul></li></ul><h2 id="七源码展示">七、源码展示</h2><h3 id="main.java-主程序入口控制台交互">Main.java #主程序入口（控制台交互）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad;<br><br><span class="hljs-keyword">import</span> com.calendar.notepad.lunar.LunarUtil;<br><span class="hljs-keyword">import</span> com.calendar.notepad.model.Event;<br><span class="hljs-keyword">import</span> com.calendar.notepad.observer.Observer;<br><span class="hljs-keyword">import</span> com.calendar.notepad.service.NotepadManager;<br><span class="hljs-keyword">import</span> com.calendar.notepad.strategy.CsvStorageStrategy;<br><span class="hljs-keyword">import</span> com.calendar.notepad.strategy.StorageStrategy;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主程序入口（使用Hutool优化）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NotepadManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> NotepadManager.getInstance();<br>        <span class="hljs-type">StorageStrategy</span> <span class="hljs-variable">csvStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CsvStorageStrategy</span>();<br>        manager.setStorageStrategy(csvStrategy);<br>        manager.loadEvents();<br>        manager.registerObserver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleObserver</span>());<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;\n===== 日历记事本系统 =====&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1. 添加事件&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2. 修改事件&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3. 删除事件&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4. 查看事件列表&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5. 按阳历查询事件&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;6. 按阴历查询事件&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;7. 查看当月日期范围&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;0. 退出&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请选择操作: &quot;</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                scanner.nextLine(); <span class="hljs-comment">// 消耗换行符</span><br><br>                <span class="hljs-keyword">switch</span> (choice) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        System.out.print(<span class="hljs-string">&quot;请输入事件标题: &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                        System.out.print(<span class="hljs-string">&quot;请输入事件日期 (yyyy-MM-dd): &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                        System.out.print(<span class="hljs-string">&quot;请输入事件内容: &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> DateUtil.parse(dateStr);<br>                            manager.addEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(title, date, content));<br>                            System.out.println(<span class="hljs-string">&quot;事件添加成功!&quot;</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;日期格式错误! 请使用 yyyy-MM-dd 格式&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        System.out.print(<span class="hljs-string">&quot;请输入要修改的事件标题: &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">oldTitle</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                        <span class="hljs-type">Event</span> <span class="hljs-variable">oldEvent</span> <span class="hljs-operator">=</span> findEventByTitle(oldTitle, manager.getEventList());<br><br>                        <span class="hljs-keyword">if</span> (oldEvent != <span class="hljs-literal">null</span>) &#123;<br>                            System.out.print(<span class="hljs-string">&quot;请输入新的事件标题 (留空则不修改): &quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">newTitle</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                            <span class="hljs-keyword">if</span> (!newTitle.isEmpty()) oldEvent.setTitle(newTitle);<br><br>                            System.out.print(<span class="hljs-string">&quot;请输入新的事件日期 (yyyy-MM-dd, 留空则不修改): &quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">newDateStr</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                            <span class="hljs-keyword">if</span> (!newDateStr.isEmpty()) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    <span class="hljs-type">Date</span> <span class="hljs-variable">newDate</span> <span class="hljs-operator">=</span> DateUtil.parse(newDateStr);<br>                                    oldEvent.setDate(newDate);<br>                                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;日期格式错误!&quot;</span>);<br>                                &#125;<br>                            &#125;<br><br>                            System.out.print(<span class="hljs-string">&quot;请输入新的事件内容 (留空则不修改): &quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">newContent</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                            <span class="hljs-keyword">if</span> (!newContent.isEmpty()) oldEvent.setContent(newContent);<br><br>                            manager.updateEvent(oldEvent, oldEvent);<br>                            System.out.println(<span class="hljs-string">&quot;事件修改成功!&quot;</span>);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;未找到该事件!&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                        System.out.print(<span class="hljs-string">&quot;请输入要删除的事件标题: &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">deleteTitle</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                        <span class="hljs-type">Event</span> <span class="hljs-variable">eventToDelete</span> <span class="hljs-operator">=</span> findEventByTitle(deleteTitle, manager.getEventList());<br><br>                        <span class="hljs-keyword">if</span> (eventToDelete != <span class="hljs-literal">null</span>) &#123;<br>                            manager.deleteEvent(eventToDelete);<br>                            System.out.println(<span class="hljs-string">&quot;事件删除成功!&quot;</span>);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;未找到该事件!&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                        System.out.println(<span class="hljs-string">&quot;\n===== 事件列表 =====&quot;</span>);<br>                        List&lt;Event&gt; allEvents = manager.getEventList();<br>                        <span class="hljs-keyword">if</span> (allEvents.isEmpty()) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;暂无事件记录!&quot;</span>);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">for</span> (Event event : allEvents) &#123;<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">lunarDate</span> <span class="hljs-operator">=</span> LunarUtil.solarToLunarString(event.getDate());<br>                                System.out.println(event + <span class="hljs-string">&quot; (阴历: &quot;</span> + lunarDate + <span class="hljs-string">&quot;)&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                        System.out.print(<span class="hljs-string">&quot;请输入要查询的阳历日期 (yyyy-MM-dd): &quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">queryDateStr</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-type">Date</span> <span class="hljs-variable">queryDate</span> <span class="hljs-operator">=</span> DateUtil.parse(queryDateStr);<br>                            List&lt;Event&gt; eventsOnDate = manager.queryBySolarDate(queryDate);<br>                            printEvents(<span class="hljs-string">&quot;阳历 &quot;</span> + queryDateStr, eventsOnDate);<br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;日期格式错误!&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                        System.out.println(<span class="hljs-string">&quot;\n===== 按阴历查询事件 =====&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;方式1: 输入阳历日期自动转换为阴历&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;方式2: 直接输入阴历信息&quot;</span>);<br>                        System.out.print(<span class="hljs-string">&quot;请选择查询方式 (1/2): &quot;</span>);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">queryType</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                        scanner.nextLine(); <span class="hljs-comment">// 消耗换行符</span><br><br>                        <span class="hljs-keyword">if</span> (queryType == <span class="hljs-number">1</span>) &#123;<br>                            System.out.print(<span class="hljs-string">&quot;请输入阳历日期 (yyyy-MM-dd): &quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">solarDateStr</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-type">Date</span> <span class="hljs-variable">solarDate</span> <span class="hljs-operator">=</span> DateUtil.parse(solarDateStr);<br>                                List&lt;Event&gt; events = manager.queryByLunarDate(solarDate);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">lunarDateStr</span> <span class="hljs-operator">=</span> LunarUtil.solarToLunarString(solarDate);<br>                                printEvents(<span class="hljs-string">&quot;阴历 &quot;</span> + lunarDateStr, events);<br>                            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;日期格式错误!&quot;</span>);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (queryType == <span class="hljs-number">2</span>) &#123;<br>                            System.out.print(<span class="hljs-string">&quot;请输入阴历年份: &quot;</span>);<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">lunarYear</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                            System.out.print(<span class="hljs-string">&quot;请输入阴历月份: &quot;</span>);<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">lunarMonth</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                            System.out.print(<span class="hljs-string">&quot;请输入阴历日期 (如: 初一): &quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">lunarDay</span> <span class="hljs-operator">=</span> scanner.next();<br>                            scanner.nextLine(); <span class="hljs-comment">// 消耗换行符</span><br><br>                            List&lt;Event&gt; events = manager.queryByLunarDate(lunarYear, lunarMonth, lunarDay);<br>                            printEvents(<span class="hljs-string">&quot;阴历 &quot;</span> + lunarYear + <span class="hljs-string">&quot;年&quot;</span> + lunarMonth + <span class="hljs-string">&quot;月&quot;</span> + lunarDay, events);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;无效的选择!&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                        <span class="hljs-type">Date</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">lunarToday</span> <span class="hljs-operator">=</span> LunarUtil.getFullLunarInfo(today);<br>                        System.out.println(<span class="hljs-string">&quot;\n===== 当月日期范围 =====&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;今日阳历日期: &quot;</span> + DateUtil.format(today, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>                        System.out.println(<span class="hljs-string">&quot;今日阴历日期: &quot;</span> + lunarToday);<br>                        <span class="hljs-keyword">break</span>;<br><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                        System.out.println(<span class="hljs-string">&quot;感谢使用日历记事本系统，再见!&quot;</span>);<br>                        scanner.close();<br>                        System.exit(<span class="hljs-number">0</span>);<br><br>                    <span class="hljs-keyword">default</span>:<br>                        System.out.println(<span class="hljs-string">&quot;无效的选择，请重新输入!&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (java.util.InputMismatchException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;输入无效，请输入数字!&quot;</span>);<br>                scanner.nextLine(); <span class="hljs-comment">// 清除错误输入</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Event <span class="hljs-title function_">findEventByTitle</span><span class="hljs-params">(String title, List&lt;Event&gt; events)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Event event : events) &#123;<br>            <span class="hljs-keyword">if</span> (event.getTitle().equals(title)) &#123;<br>                <span class="hljs-keyword">return</span> event;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEvents</span><span class="hljs-params">(String dateDescription, List&lt;Event&gt; events)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;\n===== &quot;</span> + dateDescription + <span class="hljs-string">&quot; 的事件 =====&quot;</span>);<br>        <span class="hljs-keyword">if</span> (events.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该日期没有事件记录!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            events.forEach(System.out::println);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsoleObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String message)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;[通知] &quot;</span> + message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lunarutil.java-阴历工具类阳历转阴历农历键生成">LunarUtil.java #阴历工具类（阳历转阴历、农历键生成）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.lunar;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.date.ChineseDate;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LunarUtil</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阳历转阴历字符串（如：2025年四月初八）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">solarToLunarString</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-type">ChineseDate</span> <span class="hljs-variable">lunar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate);<br>        <span class="hljs-keyword">return</span> lunar.getChineseYear() + <span class="hljs-string">&quot;年&quot;</span> + <br>               lunar.getChineseMonthName() + <br>               lunar.getChineseDay();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取阴历年份</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLunarYear</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate).getChineseYear();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取阴历月份（数字，1-12）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLunarMonth</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-comment">// 注意：Hutool的getChineseMonth()返回的是中文月份名（如&quot;正月&quot;）</span><br>        <span class="hljs-comment">// 这里需要使用getMonth()获取数字月份（1-12）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate).getMonth();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取阴历日期（1-30）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLunarDay</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate).getChineseDay();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取阴历关键信息（用于查询）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLunarKey</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-type">ChineseDate</span> <span class="hljs-variable">lunar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate);<br>        <span class="hljs-keyword">return</span> lunar.getChineseYear() + <span class="hljs-string">&quot;-&quot;</span> + <br>               lunar.getMonth() + <span class="hljs-string">&quot;-&quot;</span> + <br>               lunar.getChineseDay();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取完整阴历描述（带节日）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFullLunarInfo</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-type">ChineseDate</span> <span class="hljs-variable">lunar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChineseDate</span>(solarDate);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">festivals</span> <span class="hljs-operator">=</span> lunar.getFestivals();<br>        <span class="hljs-keyword">return</span> lunar.toString() + <br>               (festivals.isEmpty() ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; (&quot;</span> + festivals + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="event.java-事件实体标题日期内容">Event.java #事件实体（标题、日期、内容）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.model;<br><br><span class="hljs-keyword">import</span> com.calendar.notepad.lunar.LunarUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.date.DateUtil;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事件实体类，包含事件的基本属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span> &#123;<br>    <span class="hljs-keyword">private</span> String title;   <span class="hljs-comment">// 事件标题</span><br>    <span class="hljs-keyword">private</span> Date date;      <span class="hljs-comment">// 事件日期</span><br>    <span class="hljs-keyword">private</span> String content; <span class="hljs-comment">// 事件内容</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Event</span><span class="hljs-params">(String title, Date date, String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>        <span class="hljs-built_in">this</span>.date = date;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-comment">// Getters and Setters</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTitle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(Date date)</span> &#123;<br>        <span class="hljs-built_in">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Event&#123;title=&#x27;&quot;</span> + title + <span class="hljs-string">&quot;&#x27;, date=&quot;</span> + <br>               DateUtil.format(date, <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>) + <br>               <span class="hljs-string">&quot;, lunarDate=&quot;</span> + LunarUtil.solarToLunarString(date) +<br>               <span class="hljs-string">&quot;, content=&#x27;&quot;</span> + content + <span class="hljs-string">&quot;&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h3id="eventnotifier.java-事件通知器观察者模式管理事件变更通知">EventNotifier.java# 事件通知器（观察者模式，管理事件变更通知）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.observer;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事件通知器（主题）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventNotifier</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(message);<br>        &#125;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="observer.java-观察者接口定义更新方法">Observer.java #观察者接口（定义更新方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.observer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 观察者接口（观察者模式）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String message)</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><h3id="notepadmanager.java-核心管理类单例事件增删改查存储策略阴历映射">NotepadManager.java# 核心管理类（单例，事件增删改查、存储策略、阴历映射）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.service;<br><br><span class="hljs-keyword">import</span> com.calendar.notepad.lunar.LunarUtil;<br><span class="hljs-keyword">import</span> com.calendar.notepad.model.Event;<br><span class="hljs-keyword">import</span> com.calendar.notepad.observer.EventNotifier;<br><span class="hljs-keyword">import</span> com.calendar.notepad.strategy.StorageStrategy;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 记事本管理类（使用Hutool优化）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotepadManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NotepadManager instance;<br>    <span class="hljs-keyword">private</span> List&lt;Event&gt; eventList;<br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Event&gt;&gt; lunarEventMap;<br>    <span class="hljs-keyword">private</span> StorageStrategy storageStrategy;<br>    <span class="hljs-keyword">private</span> EventNotifier eventNotifier;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">NotepadManager</span><span class="hljs-params">()</span> &#123;<br>        eventList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        eventNotifier = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventNotifier</span>();<br>        lunarEventMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> NotepadManager <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotepadManager</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStorageStrategy</span><span class="hljs-params">(StorageStrategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.storageStrategy = strategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEvent</span><span class="hljs-params">(Event event)</span> &#123;<br>        eventList.add(event);<br>        updateLunarEventMap(event);<br>        eventNotifier.notifyObservers(<span class="hljs-string">&quot;添加了事件: &quot;</span> + event.getTitle());<br>        <span class="hljs-keyword">if</span> (storageStrategy != <span class="hljs-literal">null</span>) &#123;<br>            storageStrategy.saveEvents(eventList);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEvent</span><span class="hljs-params">(Event oldEvent, Event newEvent)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> eventList.indexOf(oldEvent);<br>        <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>            removeFromLunarEventMap(oldEvent);<br>            eventList.set(index, newEvent);<br>            updateLunarEventMap(newEvent);<br>            eventNotifier.notifyObservers(<span class="hljs-string">&quot;更新了事件: &quot;</span> + oldEvent.getTitle());<br>            <span class="hljs-keyword">if</span> (storageStrategy != <span class="hljs-literal">null</span>) &#123;<br>                storageStrategy.saveEvents(eventList);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEvent</span><span class="hljs-params">(Event event)</span> &#123;<br>        eventList.remove(event);<br>        removeFromLunarEventMap(event);<br>        eventNotifier.notifyObservers(<span class="hljs-string">&quot;删除了事件: &quot;</span> + event.getTitle());<br>        <span class="hljs-keyword">if</span> (storageStrategy != <span class="hljs-literal">null</span>) &#123;<br>            storageStrategy.saveEvents(eventList);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">getEventList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> eventList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">queryBySolarDate</span><span class="hljs-params">(Date date)</span> &#123;<br>        List&lt;Event&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Event event : eventList) &#123;<br>            <span class="hljs-keyword">if</span> (event.getDate().equals(date)) &#123;<br>                result.add(event);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过阳历日期转换为阴历查询</span><br>    <span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">queryByLunarDate</span><span class="hljs-params">(Date solarDate)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> LunarUtil.getLunarKey(solarDate);<br>        <span class="hljs-keyword">return</span> lunarEventMap.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>    &#125;<br><br>    <span class="hljs-comment">// 直接通过阴历信息查询</span><br>    <span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">queryByLunarDate</span><span class="hljs-params">(<span class="hljs-type">int</span> lunarYear, <span class="hljs-type">int</span> lunarMonth, String lunarDay)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> lunarYear + <span class="hljs-string">&quot;-&quot;</span> + lunarMonth + <span class="hljs-string">&quot;-&quot;</span> + lunarDay;<br>        <span class="hljs-keyword">return</span> lunarEventMap.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(com.calendar.notepad.observer.Observer observer)</span> &#123;<br>        eventNotifier.registerObserver(observer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(com.calendar.notepad.observer.Observer observer)</span> &#123;<br>        eventNotifier.removeObserver(observer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadEvents</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (storageStrategy != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.eventList = storageStrategy.loadEvents();<br>            rebuildLunarEventMap();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateLunarEventMap</span><span class="hljs-params">(Event event)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> LunarUtil.getLunarKey(event.getDate());<br>        lunarEventMap.computeIfAbsent(key, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()).add(event);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFromLunarEventMap</span><span class="hljs-params">(Event event)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> LunarUtil.getLunarKey(event.getDate());<br>        List&lt;Event&gt; events = lunarEventMap.get(key);<br>        <span class="hljs-keyword">if</span> (events != <span class="hljs-literal">null</span>) &#123;<br>            events.remove(event);<br>            <span class="hljs-keyword">if</span> (events.isEmpty()) &#123;<br>                lunarEventMap.remove(key);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rebuildLunarEventMap</span><span class="hljs-params">()</span> &#123;<br>        lunarEventMap.clear();<br>        <span class="hljs-keyword">for</span> (Event event : eventList) &#123;<br>            updateLunarEventMap(event);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3id="csvstoragestrategy.java-csv存储实现读写events.csv">CsvStorageStrategy.java# CSV存储实现（读写events.csv）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.strategy;<br><br><span class="hljs-keyword">import</span> com.calendar.notepad.model.Event;<br><span class="hljs-keyword">import</span> com.opencsv.CSVReader;<br><span class="hljs-keyword">import</span> com.opencsv.CSVWriter;<br><span class="hljs-keyword">import</span> com.opencsv.exceptions.CsvValidationException;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CsvStorageStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StorageStrategy</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;events.csv&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">DATE_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Event&gt; <span class="hljs-title function_">loadEvents</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Event&gt; events = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">CSVReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CSVReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(FILE_PATH))) &#123;<br>            String[] nextLine;<br>            <span class="hljs-keyword">while</span> ((nextLine = reader.readNext()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (nextLine.length == <span class="hljs-number">3</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> DATE_FORMAT.parse(nextLine[<span class="hljs-number">1</span>]);<br>                        events.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(nextLine[<span class="hljs-number">0</span>], date, nextLine[<span class="hljs-number">2</span>]));<br>                    &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                        System.err.println(<span class="hljs-string">&quot;无效日期格式: &quot;</span> + nextLine[<span class="hljs-number">1</span>]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-comment">// 文件不存在时返回空列表</span><br>        &#125; <span class="hljs-keyword">catch</span> (CsvValidationException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;CSV格式验证失败: &quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> events;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveEvents</span><span class="hljs-params">(List&lt;Event&gt; events)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">CSVWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CSVWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(FILE_PATH))) &#123;<br>            <span class="hljs-keyword">for</span> (Event event : events) &#123;<br>                String[] line = &#123;<br>                    event.getTitle(),<br>                    DATE_FORMAT.format(event.getDate()),<br>                    event.getContent()<br>                &#125;;<br>                writer.writeNext(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3id="storagestrategy.java-存储策略接口可扩展json数据库等存储">StorageStrategy.java# 存储策略接口（可扩展JSON、数据库等存储）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.calendar.notepad.strategy;<br><br><span class="hljs-keyword">import</span> com.calendar.notepad.model.Event;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储策略接口（策略模式）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StorageStrategy</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveEvents</span><span class="hljs-params">(List&lt;Event&gt; events)</span>;<br>    List&lt;Event&gt; <span class="hljs-title function_">loadEvents</span><span class="hljs-params">()</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="八总结">八、总结</h2><p>本项目通过 Hutool 简化日期处理，OpenCSV实现数据持久化，并结合设计模式提升代码可维护性。核心关键点包括：</p><ul><li>单例模式确保全局唯一实例。</li><li>策略模式解耦存储逻辑。</li><li>Hutool 的<code>ChineseDate</code>实现阳历转阴历。</li><li>多层防御机制处理非法日期（解析时验证、工具类过滤、加载后清理）。<ul><li>提供的代码并没有优化数据</li></ul></li></ul><p>通过合理使用工具库和设计模式，有效提升了开发效率和代码健壮性。</p><h2 id="section"></h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCSV</tag>
      
      <tag>Hutool</tag>
      
      <tag>观察者模式</tag>
      
      <tag>策略模式</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研数学基础知识</title>
    <link href="/2025/05/21/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/05/21/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="三方程与不等式">三、方程与不等式</h3><p>（1）一元二次方程及其解</p><p><spanclass="math inline"><em>a</em><em>x</em>² + <em>b</em><em>x</em> + <em>c</em> = 0(<em>a</em> ≠ 0)</span>为一元二次方程，记<spanclass="math inline">∆ = <em>b</em>² − 4<em>a</em><em>c</em></span>。</p><ol type="1"><li>当<span class="math inline">$∆&gt;0，x_1=\frac{-b+\sqrt∆}{2a},x_2=\frac{-b-\sqrt∆ }{2a}$</span>,为两个互异实根；</li><li>当<spanclass="math inline">$∆=0，x_1=x_2=-\frac{b}{2a}$</span>，为两个相等实根；</li><li>当<span class="math inline">$∆&lt;0，x_1=x_2=\frac{-b\pm\sqrt{-∆}i}{2a}$</span>，为一对共轭复根。</li></ol><p>（2）根与系数的关系</p><p><span class="math display">$$\begin{cases}\begin{aligned} x_1+x_2&amp;=-\frac{b}{a},\\x_1x_2&amp;=\frac{c}{a}.\end{aligned}\end{cases}$$</span></p><p><span class="math display">$$\begin{cases} \begin{aligned} a_{11}&amp; =b_{11}\\ a_{22}&amp;=b_{22}+c_{22} \end{aligned} \end{cases}$$</span></p>]]></content>
    
    
    <categories>
      
      <category>高等数学</category>
      
      <category>零基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Spark将DataFrame数据写入MySQL表的完整指南（含MySQL5.7强制安装记录)</title>
    <link href="/2025/05/20/%E4%BD%BF%E7%94%A8Spark%E5%B0%86DataFrame%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5MySQL%E8%A1%A8%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97%EF%BC%88%E5%90%ABMySQL5-7%E5%BC%BA%E5%88%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/05/20/%E4%BD%BF%E7%94%A8Spark%E5%B0%86DataFrame%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5MySQL%E8%A1%A8%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97%EF%BC%88%E5%90%ABMySQL5-7%E5%BC%BA%E5%88%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1id="使用-spark-将-dataframe-数据写入-mysql-表的完整指南含-mysql-5.7-强制安装记录">使用Spark 将 DataFrame 数据写入 MySQL 表的完整指南（含 MySQL 5.7强制安装记录）</h1><p>在大数据处理中，经常需要将数据从一个数据源转移到另一个数据源。本文将详细介绍如何使用Spark 将 DataFrame 数据写入 MySQL 表，并记录 MySQL 5.7强制安装过程及常见问题解决方法。</p><h2 id="一mysql-5.7-强制安装记录">一、MySQL 5.7 强制安装记录</h2><h3 id="问题背景">1. 问题背景</h3><p>在 CentOS 系统中安装 MySQL 5.7 时，可能因 GPG密钥验证失败或依赖冲突导致常规安装失败。此时需通过强制安装跳过验证，适用于测试环境或无法联网更新密钥的场景。</p><h3 id="强制安装命令">2. 强制安装命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载MySQL 5.7仓库配置包</span><br><span class="hljs-built_in">sudo</span> rpm -ivh mysql57-community-release-el7-11.noarch.rpm<br><br><span class="hljs-comment"># 强制安装MySQL服务器（跳过GPG检查和依赖验证）</span><br><span class="hljs-built_in">sudo</span> yum install mysql-community-server --nogpgcheck --force --nodeps<br><br><span class="hljs-comment"># 启动服务</span><br><span class="hljs-built_in">sudo</span> systemctl start mysqld<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> mysqld<br></code></pre></td></tr></table></figure><h3 id="安全风险提示">3. 安全风险提示</h3><ul><li><strong><code>--nogpgcheck</code></strong>：跳过 GPG签名验证，可能安装未经安全校验的包。</li><li><strong><code>--force --nodeps</code></strong>：强制覆盖文件并忽略依赖，可能导致服务不稳定。</li><li><strong>仅建议测试环境使用</strong>，生产环境需通过官方渠道修复密钥或依赖问题。</li></ul><h2 id="二环境准备">二、环境准备</h2><ul><li><strong>操作系统</strong>：CentOS</li><li><strong>数据库</strong>：MySQL 5.7（强制安装）</li><li><strong>编程语言</strong>：Scala</li><li><strong>数据处理框架</strong>：Spark</li></ul><h2 id="三创建-mysql-表">三、创建 MySQL 表</h2><p>在 MySQL中创建<code>school</code>数据库及<code>students</code>表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> school;<br>USE school;<br><span class="hljs-keyword">CREATE TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> students (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span>,<br>  gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT NULL</span>,<br>  age <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT NULL</span><br>);<br></code></pre></td></tr></table></figure><h2 id="四使用-spark-写入数据到-mysql">四、使用 Spark 写入数据到MySQL</h2><h3 id="spark-shell-启动命令指定-mysql-驱动">1. Spark Shell启动命令（指定 MySQL 驱动）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/spark<br>./bin/spark-shell \<br>--jars /usr/local/spark/jars/mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar \<br>--driver-class-path /usr/local/spark/jars/mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar<br></code></pre></td></tr></table></figure><h3 id="scala-代码实现含paste用法">2. Scala代码实现（含<code>:paste</code>用法）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scala">:paste<br><span class="hljs-comment">// 导入必要包</span><br><span class="hljs-keyword">import</span> org.apache.spark.sql.<span class="hljs-type">SparkSession</span><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">Properties</span><br><br><span class="hljs-comment">// 创建SparkSession</span><br><span class="hljs-keyword">val</span> spark = <span class="hljs-type">SparkSession</span>.builder()<br>  .appName(<span class="hljs-string">&quot;SparkToMySQLWriter&quot;</span>)<br>  .getOrCreate()<br><br><span class="hljs-comment">// 创建学生信息DataFrame</span><br><span class="hljs-keyword">val</span> studentData = <span class="hljs-type">Seq</span>(<br>  (<span class="hljs-number">6</span>, <span class="hljs-string">&quot;孙八&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">23</span>),<br>  (<span class="hljs-number">7</span>, <span class="hljs-string">&quot;周九&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">20</span>),<br>  (<span class="hljs-number">8</span>, <span class="hljs-string">&quot;吴十&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">21</span>),<br>  (<span class="hljs-number">9</span>, <span class="hljs-string">&quot;郑十一&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">22</span>),<br>  (<span class="hljs-number">10</span>, <span class="hljs-string">&quot;王十二&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">19</span>)<br>)<br><span class="hljs-keyword">val</span> df = spark.createDataFrame(studentData).toDF(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>)<br><br><span class="hljs-comment">// 配置MySQL连接（强制安装后需确保密码正确）</span><br><span class="hljs-keyword">val</span> jdbcUrl = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/school?useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span><br><span class="hljs-keyword">val</span> tableName = <span class="hljs-string">&quot;students&quot;</span><br><span class="hljs-keyword">val</span> connectionProps = <span class="hljs-keyword">new</span> <span class="hljs-type">Properties</span>()<br>connectionProps.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br>connectionProps.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;YourNewPassword123!&quot;</span>) <span class="hljs-comment">// 强制安装时设置的密码</span><br>connectionProps.put(<span class="hljs-string">&quot;driver&quot;</span>, <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)<br><br><span class="hljs-comment">// 追加写入数据（避免主键冲突可改用overwrite模式）</span><br>df.write.mode(<span class="hljs-string">&quot;append&quot;</span>).jdbc(jdbcUrl, tableName, connectionProps)<br><br><span class="hljs-comment">// 验证数据（可选）</span><br><span class="hljs-keyword">val</span> readDF = spark.read.jdbc(jdbcUrl, tableName, connectionProps)<br>println(<span class="hljs-string">&quot;读取到的数据：&quot;</span>)<br>readDF.show(<span class="hljs-literal">false</span>)<br><br><span class="hljs-comment">// 先回车 然后（可能省略）</span><br><span class="hljs-comment">// 按Ctrl+D执行代码</span><br></code></pre></td></tr></table></figure><h3 id="paste用法说明">3. <code>:paste</code>用法说明</h3><ul><li><p><strong>功能</strong>：在 Spark Shell中启用多行粘贴模式，避免单行输入导致的语法错误。</p></li><li><p>操作步骤</p><p>：</p><ol type="1"><li>输入<code>:paste</code>并按回车；</li><li>粘贴完整代码块；</li><li>按<code>Ctrl+D</code>（Linux/Mac）或<code>Ctrl+Z</code>（Windows）执行。</li></ol></li></ul><h2id="五常见问题及解决方案含强制安装相关">五、常见问题及解决方案（含强制安装相关）</h2><h3 id="中文乱码问题">1. 中文乱码问题</h3><h4 id="原因字符集不统一">原因：字符集不统一</h4><ul><li><strong>MySQL 强制安装后默认字符集可能为latin1</strong>，需手动修改。</li></ul><h4 id="解决步骤">解决步骤：</h4><ol type="1"><li><p><strong>修改 MySQL 表字符集（5.1.x 驱动适用）</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE school <span class="hljs-keyword">CHARACTER SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><span class="hljs-keyword">ALTER TABLE</span> students <span class="hljs-keyword">CONVERT</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">CHARACTER SET</span> utf8;<br></code></pre></td></tr></table></figure></li><li><p><strong>更新 MySQL 配置文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi /etc/my.cnf<br></code></pre></td></tr></table></figure><p>在<code>[mysqld]</code>部分添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">character-set-server</span> = utf8<br><span class="hljs-attr">collation-server</span> = utf8_general_ci<br></code></pre></td></tr></table></figure><p>重启服务：<code>sudo systemctl restart mysqld</code></p></li><li><p><strong>JDBC URL 添加字符集参数</strong>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> jdbcUrl = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/school?useSSL=false&amp;characterEncoding=utf8&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="升级驱动方案推荐">升级驱动方案（推荐）：</h4><p>若需支持 Emoji / 生僻字，升级驱动至 8.0 +并使用<code>utf8mb4</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 8.0+驱动配置</span><br><span class="hljs-keyword">val</span> jdbcUrl = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/school?useSSL=false&amp;characterEncoding=utf8mb4&amp;serverTimezone=UTC&quot;</span><br>connectionProps.put(<span class="hljs-string">&quot;driver&quot;</span>, <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>) <span class="hljs-comment">// 8.0+驱动类名</span><br></code></pre></td></tr></table></figure><h3 id="主键冲突duplicate-entry">2.主键冲突（<code>Duplicate entry</code>）</h3><h4id="原因强制安装后可能残留测试数据或重复写入">原因：强制安装后可能残留测试数据或重复写入</h4><ul><li><strong>场景</strong>：多次执行写入操作，<code>id</code>重复触发主键约束。</li></ul><h4 id="解决方法">解决方法：</h4><ul><li><p><strong>覆盖模式（清空表后写入）</strong>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">df.write.mode(<span class="hljs-string">&quot;overwrite&quot;</span>).jdbc(jdbcUrl, tableName, connectionProps)<br></code></pre></td></tr></table></figure></li><li><p><strong>过滤重复 ID</strong>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> existingIds = spark.read.jdbc(jdbcUrl, tableName, connectionProps).select(<span class="hljs-string">&quot;id&quot;</span>).as[<span class="hljs-type">Int</span>].collect().toSet<br><span class="hljs-keyword">val</span> filteredDF = df.filter(!df(<span class="hljs-string">&quot;id&quot;</span>).isin(existingIds: _*))<br>filteredDF.write.mode(<span class="hljs-string">&quot;append&quot;</span>).jdbc(jdbcUrl, tableName, connectionProps)<br></code></pre></td></tr></table></figure></li></ul><h3 id="驱动不支持utf8mb4错误">3.驱动不支持<code>utf8mb4</code>错误</h3><h4 id="现象">现象：</h4><p><code>java.sql.SQLException: Unsupported character encoding 'utf8mb4'</code><strong>原因</strong>：MySQL Connector/J 5.1.x驱动不支持<code>utf8mb4</code>，仅支持<code>utf8</code>。</p><h4 id="解决方案">解决方案：</h4><ul><li><strong>方案 1：使用<code>utf8</code>编码（5.1.x 驱动）</strong>：见上文中文乱码问题解决方案。</li><li><strong>方案 2：升级驱动至 8.0+</strong>： 见中文乱码问题 -升级驱动方案。</li></ul><h3 id="mysql-服务启动失败强制安装后">4. MySQL服务启动失败（强制安装后）</h3><h4 id="原因依赖缺失或文件损坏">原因：依赖缺失或文件损坏</h4><ul><li><strong>强制安装可能未正确初始化系统服务文件</strong>。</li></ul><h4 id="解决步骤-1">解决步骤：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重新初始化MySQL</span><br><span class="hljs-built_in">sudo</span> mysql_secure_installation<br><br><span class="hljs-comment"># 修复系统服务文件</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl start mysqld<br></code></pre></td></tr></table></figure><h2 id="六总结">六、总结</h2><h3 id="强制安装适用场景">1. 强制安装适用场景</h3><ul><li>测试环境快速部署；</li><li>离线环境无法获取官方 GPG 密钥；</li><li>临时绕过依赖问题（需承担稳定性风险）。</li></ul><h3 id="最佳实践建议">2. 最佳实践建议</h3><ul><li>生产环境优先使用官方源正常安装，确保密钥验证和依赖完整性；</li><li>处理中文时，5.1.x 驱动使用<code>utf8</code>，8.0 +驱动使用<code>utf8mb4</code>；</li><li>写入数据前通过<code>.mode("overwrite")</code>或 ID过滤避免主键冲突。</li></ul><p>通过以上步骤，可在强制安装 MySQL 5.7 的环境下，成功使用 Spark完成数据写入及验证。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Spark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
      <tag>DataFrame</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark编程题：使用RDD求支付金额的Top N值</title>
    <link href="/2025/05/13/Spark%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8RDD%E6%B1%82%E6%94%AF%E4%BB%98%E9%87%91%E9%A2%9D%E7%9A%84Top-N%E5%80%BC/"/>
    <url>/2025/05/13/Spark%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8RDD%E6%B1%82%E6%94%AF%E4%BB%98%E9%87%91%E9%A2%9D%E7%9A%84Top-N%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="spark-编程题使用-rdd-求支付金额的-top-n-值">Spark 编程题：使用RDD 求支付金额的 Top N 值</h1><h2 id="一题目要求">一、题目要求</h2><p>使用 Spark RDD 从给定的支付数据中找出支付金额（payment 字段）最高的前5个值，并按降序排列输出。数据格式为逗号分隔的字符串，其中第三个字段是支付金额。具体要求如下：</p><ol type="1"><li>从 HDFS 或本地文件系统读取数据</li><li>过滤掉无效数据行</li><li>提取 payment 字段</li><li>转换为键值对形式</li><li>按 payment 值降序排序</li><li>输出前 5 个最高支付金额及其排名</li></ol><p>测试数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot;1,Alice,50,Food&quot;,<br>&quot;2,Bob,60,Electronics&quot;,<br>&quot;3,Charlie,788,Clothing&quot;,<br>&quot;4,David,60,Books&quot;,<br>&quot;5,Eve,120,Food&quot;,<br>&quot;6,Frank,95,Electronics&quot;,<br>&quot;7,Grace,200,Books&quot;,<br>&quot;,,,&quot;,  // 无效数据<br>&quot;8,Hank,150,Clothing&quot;,<br>&quot;9,Ivy,300,Electronics&quot;,<br>&quot;10,Jack,250,Food&quot;<br></code></pre></td></tr></table></figure><h2 id="二解题思路">二、解题思路</h2><ol type="1"><li><strong>数据读取</strong>：利用 Spark 的<code>textFile</code>方法从HDFS 或本地文件系统读取数据文件。</li><li><strong>数据清洗</strong>：对读取的数据进行处理，通过字符串分割、条件判断等操作，过滤掉无效数据行。</li><li><strong>字段提取与转换</strong>：提取支付金额字段，并将数据转换为键值对形式，方便后续排序操作。</li><li><strong>排序</strong>：使用<code>sortBy</code>方法按照支付金额进行降序排序。</li><li><strong>结果输出</strong>：选取排序后的数据中的前 5条记录，输出其排名和支付金额。</li></ol><h2 id="三详细步骤">三、详细步骤</h2><h3 id="准备测试数据">3.1 准备测试数据</h3><p>在本地创建一个 CSV格式的文件，用于存储测试数据。在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; payment_data.csv &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">1,Alice,50,Food</span><br><span class="hljs-string">2,Bob,60,Electronics</span><br><span class="hljs-string">3,Charlie,788,Clothing</span><br><span class="hljs-string">4,David,60,Books</span><br><span class="hljs-string">5,Eve,120,Food</span><br><span class="hljs-string">6,Frank,95,Electronics</span><br><span class="hljs-string">7,Grace,200,Books</span><br><span class="hljs-string">,,,</span><br><span class="hljs-string">8,Hank,150,Clothing</span><br><span class="hljs-string">9,Ivy,300,Electronics</span><br><span class="hljs-string">10,Jack,250,Food</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>上述命令使用<code>cat &gt;</code>创建一个名为<code>payment_data.csv</code>的文件，并将测试数据写入其中。完成后，可以使用<code>cat payment_data.csv</code>命令查看文件内容，确认数据写入正确。</p><h3 id="启动-hdfs">3.2 启动 HDFS</h3><p>如果计划将数据存储在 HDFS 上，需要先确保 HDFS 服务正常启动。在 Hadoop环境中，执行以下命令启动 HDFS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">start-dfs.sh<br></code></pre></td></tr></table></figure><p>启动完成后，可以使用<code>jps</code>命令查看进程，确认<code>NameNode</code>和<code>DataNode</code>进程已经正常运行。</p><h3 id="将数据上传至-hdfs">3.3 将数据上传至 HDFS</h3><p>在 HDFS 启动后，创建存储数据的目录，并将本地的测试数据文件上传至HDFS。执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">mkdir</span> -p /user/hadoop/data<br>hdfs dfs -put payment_data.csv /user/hadoop/data/<br></code></pre></td></tr></table></figure><p>上述命令首先在 HDFS中创建了<code>/user/hadoop/data</code>目录（如果目录不存在），然后将本地的<code>payment_data.csv</code>文件上传至该目录。</p><p>上传完成后，可以使用以下命令验证数据是否成功上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">ls</span> /user/hadoop/data/<br>hdfs dfs -<span class="hljs-built_in">cat</span> /user/hadoop/data/payment_data.csv<br></code></pre></td></tr></table></figure><p><code>hdfs dfs -ls</code>命令用于列出目录下的文件，<code>hdfs dfs -cat</code>命令用于查看文件内容。</p><h3 id="编写-spark-代码">3.4 编写 Spark 代码</h3><p>使用文本编辑器（如<code>vi</code>或<code>vim</code>）创建一个 Python文件，命名为<code>top_n_payments.py</code>，并编写以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pyspark <span class="hljs-keyword">import</span> SparkContext, SparkConf<br><br><span class="hljs-comment"># 初始化SparkContext</span><br>conf = SparkConf().setAppName(<span class="hljs-string">&quot;TopNPayments&quot;</span>)<br>sc = SparkContext(conf=conf)<br><br><span class="hljs-comment"># 读取HDFS数据，需根据实际情况修改路径</span><br>file_path = <span class="hljs-string">&quot;hdfs://localhost:9000/user/hadoop/data/payment_data.csv&quot;</span><br><br><span class="hljs-comment"># 处理数据</span><br>payments_rdd = sc.textFile(file_path) \<br>    .<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> line: line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)) \<br>    .<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> parts: <span class="hljs-built_in">len</span>(parts) &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> parts[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> parts[<span class="hljs-number">2</span>]) \<br>    .<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> parts: (<span class="hljs-built_in">int</span>(parts[<span class="hljs-number">0</span>]), <span class="hljs-built_in">float</span>(parts[<span class="hljs-number">2</span>]))) \<br>    .sortBy(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], ascending=<span class="hljs-literal">False</span>) \<br>    .take(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;排名\t支付金额&quot;</span>)<br><span class="hljs-keyword">for</span> rank, (user_id, amount) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(payments_rdd, <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 使用 str.format() 替代 f-strings，兼容Python 2.x和3.x</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;\t&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rank, amount))<br><br><span class="hljs-comment"># 停止SparkContext</span><br>sc.stop()<br></code></pre></td></tr></table></figure><p>代码说明：</p><ul><li><strong>初始化SparkContext</strong>：通过<code>SparkConf</code>和<code>SparkContext</code>创建Spark 应用程序的上下文，设置应用名称为<code>TopNPayments</code>。</li><li><strong>数据读取</strong>：使用<code>sc.textFile</code>方法从 HDFS路径读取数据文件。</li><li>数据处理<ul><li><code>map</code>方法将每一行数据按逗号分割成列表。</li><li><code>filter</code>方法过滤掉数据不完整（字段数量不足 3个）或关键字段为空的无效数据行。</li><li>再次使用<code>map</code>方法将数据转换为键值对形式，键为用户ID（转换为整数类型），值为支付金额（转换为浮点数类型）。</li><li><code>sortBy</code>方法按照支付金额（值）进行降序排序。</li><li><code>take</code>方法获取排序后数据的前 5 条记录。</li></ul></li><li><strong>结果输出</strong>：遍历前 5条记录，输出其排名和支付金额。</li><li><strong>停止 SparkContext</strong>：在程序执行完毕后，停止 Spark应用程序的上下文。</li></ul><h3 id="提交-spark-作业">3.5 提交 Spark 作业</h3><p>在命令行中执行以下命令提交 Spark 作业：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">spark-submit --master <span class="hljs-built_in">local</span>[*] top_n_payments.py<br></code></pre></td></tr></table></figure><p><code>--master local[*]</code>表示在本地模式下运行 Spark作业，使用所有可用的 CPU 核心。执行命令后，Spark会开始处理数据，并输出支付金额最高的前 5 个值及其排名。</p><figure><img src="image-20250513175857387.png" alt="image-20250513175857387" /><figcaption aria-hidden="true">image-20250513175857387</figcaption></figure><h2 id="四常见问题及解决方法">四、常见问题及解决方法</h2><h3 id="数据读取失败">4.1 数据读取失败</h3><p>如果出现数据读取失败的情况，可能原因如下：</p><ul><li><strong>文件路径错误</strong>：确保<code>file_path</code>变量中的HDFS 路径与实际存储路径一致，检查 NameNode 地址和端口是否正确。</li><li><strong>HDFS服务未启动</strong>：使用<code>jps</code>命令检查<code>NameNode</code>进程是否正常运行，若未运行，需启动HDFS 服务。</li><li><strong>权限问题</strong>：确认运行 Spark 作业的用户有权限访问 HDFS中的数据文件，可以通过<code>hdfs dfs -chmod</code>命令修改文件权限。</li></ul><h3 id="代码语法错误">4.2 代码语法错误</h3><p>如遇到<code>SyntaxError</code>错误，可能是由于 Python版本不兼容导致。例如，代码中使用了 f-strings（Python 3.6+支持），而环境中的 Python 版本低于 3.6。此时可以将 f-strings替换为<code>str.format()</code>或<code>%</code>格式化方法，或者升级Python 版本到 3.6 及以上。</p><h3 id="连接-hdfs-失败">4.3 连接 HDFS 失败</h3><p>当出现连接 HDFS失败的错误，如<code>java.net.ConnectException: Connection refused</code>，可参考以下解决方法：</p><ul><li><strong>检查 HDFS服务状态</strong>：使用<code>start-dfs.sh</code>启动 HDFS服务，并通过<code>jps</code>命令确认<code>NameNode</code>和<code>DataNode</code>进程正常运行。</li><li><strong>查看日志文件</strong>：查看<code>NameNode</code>的日志文件（通常位于<code>$HADOOP_HOME/logs</code>目录下），获取详细的错误信息，根据提示进行问题排查。</li><li><strong>检查防火墙和 SELinux</strong>：临时关闭防火墙和 SELinux进行测试，若关闭后能正常连接，则需配置防火墙规则允许 HDFS相关端口的访问。</li><li><strong>检查配置文件</strong>：确认<code>core-site.xml</code>和<code>hdfs-site.xml</code>中的配置正确，尤其是<code>fs.defaultFS</code>和<code>dfs.namenode.http-address</code>等关键属性。</li></ul><p>通过以上详细的步骤和问题解决方法，希望能够帮助你顺利完成使用 SparkRDD 求支付金额 Top N值的编程任务。在实际操作过程中，可能会遇到各种不同的情况，需要根据具体的错误提示和环境进行灵活处理。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Spark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c2c，d2d</title>
    <link href="/2025/04/21/c2c%EF%BC%8Cd2d/"/>
    <url>/2025/04/21/c2c%EF%BC%8Cd2d/</url>
    
    <content type="html"><![CDATA[<figure><img src="2733980253.jpeg" alt="c2d.jpeg" /><figcaption aria-hidden="true">c2d.jpeg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>娱乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路径问题-v1</title>
    <link href="/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/"/>
    <url>/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/</url>
    
    <content type="html"><![CDATA[<h1 id="景区路径规划系统">景区路径规划系统</h1><h2 id="项目简介">项目简介</h2><p>本项目是一个基于Python的景区路径规划系统，使用NetworkX进行图论计算和Plotly进行可视化展示。系统能够帮助游客规划景区游览路线，包括查找最短路径、记录已游览景点、推荐未游览景点以及计算环游所有景点的最短路线等功能。</p><p><strong>项目仓库地址</strong>：<ahref="https://github.com/xiazhimiao/python/tree/master/%E6%99%AF%E5%8C%BA%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98">GitHub仓库</a></p><p><strong>克隆代码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/xiazhimiao/python.git<br><span class="hljs-built_in">cd</span> python/景区路径问题<br></code></pre></td></tr></table></figure><h2 id="项目结构">项目结构</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">景区路径问题/<br>├── edges.xlsx            <span class="hljs-comment"># 景区边信息（路径连接关系）</span><br>├── nodes.xlsx           <span class="hljs-comment"># 景区节点信息（景点数据）</span><br>├── screenshots/         <span class="hljs-comment"># 示例截图目录</span><br>│   ├── graph_visualization.png<br>│   ├── shortest_path_demo.png<br>│   └── unvisited_attractions.png<br>├── scenic_path_v0.py    <span class="hljs-comment"># 项目早期版本代码</span><br>├── scenic_path_v1.py    <span class="hljs-comment"># 项目主程序（当前版本）</span><br>├── visited.xlsx         <span class="hljs-comment"># 已游览景点记录</span><br>├── 文字转表格<span class="hljs-string">.py</span>        <span class="hljs-comment"># 辅助工具（数据预处理）</span><br>└── 项目结构图<span class="hljs-string">.png</span>       <span class="hljs-comment"># 项目结构示意图</span><br></code></pre></td></tr></table></figure><h2 id="功能特性">功能特性</h2><h3 id="景区地图可视化">1. 景区地图可视化</h3><ul><li><p>从Excel文件读取节点和边数据</p></li><li><p>生成交互式景区地图可视化</p></li><li><p>显示景点名称和路径距离</p><figure><img src="graph_visualization.png" alt="景区地图可视化" /><figcaption aria-hidden="true">景区地图可视化</figcaption></figure></li></ul><h3 id="路径规划功能">2. 路径规划功能</h3><ul><li><p><strong>最短路径查询</strong>：查找两个景点之间的最短路径</p></li><li><p><strong>未游览景点推荐</strong>：基于当前位置推荐未游览景点（按距离排序）</p></li><li><p><strong>环游路线规划</strong>：计算从起点出发游览所有景点的最短路线（TSP问题）</p><figure><img src="shortest_path_demo.png" alt="最短路径查询示例" /><figcaption aria-hidden="true">最短路径查询示例</figcaption></figure><figure><img src="unvisited_attractions.png" alt="未游览景点推荐示例" /><figcaption aria-hidden="true">未游览景点推荐示例</figcaption></figure></li></ul><blockquote><p>注：环游路线规划功能由于采用回溯算法，在景点数量较多时计算耗时较长，暂未提供示例截图。建议在实际使用中景点数量控制在10个以内。</p></blockquote><h3 id="游览记录管理">3. 游览记录管理</h3><ul><li>手动添加已游览景点</li><li>查看已游览景点列表</li><li>自动排除已游览景点推荐</li></ul><h2 id="使用说明">使用说明</h2><h3 id="运行环境">运行环境</h3><ul><li>Python 3.6+</li><li>必要库：<code>pandas</code>, <code>networkx</code>,<code>plotly</code>, <code>openpyxl</code></li></ul><p>安装依赖： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pandas networkx plotly openpyxl<br></code></pre></td></tr></table></figure></p><h3 id="使用方法">使用方法</h3><ol type="1"><li><p>准备数据：</p><ul><li><code>nodes.xlsx</code>：包含景点信息（序号、顶点名称）</li><li><code>edges.xlsx</code>：包含路径信息（起始节点、终止节点、权重/公里）</li></ul></li><li><p>运行程序： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python scenic_path_v1.py<br></code></pre></td></tr></table></figure></p></li><li><p>选择功能：</p><ul><li>1: 查找最短路径</li><li>2: 查找未走过的景点</li><li>3: 手动添加走过的景点</li><li>4: 打印已走过的景点</li><li>5: 查找环游所有景点的最短路线</li><li>6: 退出</li></ul></li></ol><h2 id="数据格式要求">数据格式要求</h2><h3 id="nodes.xlsx">nodes.xlsx</h3><table><thead><tr><th>序号</th><th>顶点名称</th></tr></thead><tbody><tr><td>1</td><td>景点A</td></tr><tr><td>2</td><td>景点B</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="edges.xlsx">edges.xlsx</h3><table><thead><tr><th>起始节点</th><th>终止节点</th><th>权重(公里)</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>1.5</td></tr><tr><td>2</td><td>3</td><td>2.0</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="visited.xlsx自动生成">visited.xlsx（自动生成）</h3><table><thead><tr><th>已走过</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr><tr><td>…</td></tr></tbody></table><h2 id="算法说明">算法说明</h2><ul><li><strong>最短路径</strong>：使用Dijkstra算法</li><li><strong>环游路线</strong>：使用回溯算法解决旅行商问题(TSP)（注：景点数量多时性能有限）</li><li><strong>布局算法</strong>：使用NetworkX的spring_layout进行可视化布局</li></ul><h2 id="未来改进">未来改进</h2><ol type="1"><li>增加更高效的TSP求解算法（如动态规划或近似算法）</li><li>添加用户界面（Web或桌面应用）</li><li>支持实时路径更新和多人协作记录</li><li>集成地图API提供更精确的路径计算</li><li>优化环游路线算法性能</li></ol><h2 id="作者信息">作者信息</h2><p>[XiaZhiMiao]<br />[xia_12_13]<br />[2025/4/19]</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>景区路径规划</tag>
      
      <tag>NetworkX</tag>
      
      <tag>Plotly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>妈妈，我感觉浑身发软怎么办</title>
    <link href="/2025/01/04/%E5%A6%88%E5%A6%88%EF%BC%8C%E6%88%91%E6%84%9F%E8%A7%89%E6%B5%91%E8%BA%AB%E5%8F%91%E8%BD%AF%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2025/01/04/%E5%A6%88%E5%A6%88%EF%BC%8C%E6%88%91%E6%84%9F%E8%A7%89%E6%B5%91%E8%BA%AB%E5%8F%91%E8%BD%AF%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<p>若感到浑身发软、无力、疲惫，那么你可能是发烧了，不要自己把手放在额头上摸摸是否发烫，因为手掌可能也是热的，导致摸不出来什么。测出来发现体温高于37.2°，那么你就是发烧了，成人的话，去吃两片扑热息痛，如果过夜后还是持续高烧，尽快去医院看看。最后一个人在外，照顾好自己。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统知识</title>
    <link href="/2025/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/01/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>产生死锁的必要条件，缺一不可：互斥条件、请求和保持条件、不可抢占条件、循环等待条件。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uml里关于版型和消息触发动作类型的一些英文单词</title>
    <link href="/2025/01/03/uml%E9%87%8C%E5%85%B3%E4%BA%8E%E7%89%88%E5%9E%8B%E5%92%8C%E6%B6%88%E6%81%AF%E8%A7%A6%E5%8F%91%E5%8A%A8%E4%BD%9C%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D/"/>
    <url>/2025/01/03/uml%E9%87%8C%E5%85%B3%E4%BA%8E%E7%89%88%E5%9E%8B%E5%92%8C%E6%B6%88%E6%81%AF%E8%A7%A6%E5%8F%91%E5%8A%A8%E4%BD%9C%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="消息触发动作类型">1.消息触发动作类型</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">创造<span class="hljs-symbol">&lt;&lt;create&gt;&gt;</span><br>销毁<span class="hljs-symbol">&lt;&lt;destroy&gt;&gt;</span><br>返回<span class="hljs-symbol">&lt;&lt;return&gt;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="分析阶段的版型">2.分析阶段的版型</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">参与者&lt;&lt;actor/entity&gt;&gt;<br>边界  <span class="hljs-symbol">&lt;&lt;boundary&gt;&gt;</span><br>控制  <span class="hljs-symbol">&lt;&lt;control&gt;&gt;</span><br>实体  <span class="hljs-symbol">&lt;&lt;entity&gt;&gt;</span><br>PS：活动图中摆放位置：abce<br>    参与者版型设置为actor或者entity都可以 <br>    带书名号表示的是分析阶段<br></code></pre></td></tr></table></figure><h4 id="持久化设计类">3.持久化设计类</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">关系表 &lt;<span class="hljs-tag">&lt;<span class="hljs-name">relational</span> <span class="hljs-attr">table</span>&gt;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="用例实现设计">4.用例实现设计</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">接口 <span class="hljs-symbol">&lt;&lt;interface&gt;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="业务阶段">5.业务阶段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">业务参与者 &lt;&lt;<span class="hljs-string">business actor&gt;&gt;</span><br><span class="hljs-string">业务用例   &lt;&lt;business</span> usecase&gt;&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>罗马字母输入对照表</title>
    <link href="/2025/01/02/%E7%BD%97%E9%A9%AC%E5%AD%97%E6%AF%8D%E8%BE%93%E5%85%A5%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <url>/2025/01/02/%E7%BD%97%E9%A9%AC%E5%AD%97%E6%AF%8D%E8%BE%93%E5%85%A5%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure><img src="3740178417.gif" alt="1.gif" /><figcaption aria-hidden="true">1.gif</figcaption></figure><figure><img src="807218882.gif" alt="2.gif" /><figcaption aria-hidden="true">2.gif</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>日本語</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日本语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日本語の名詞</title>
    <link href="/2025/01/02/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E5%90%8D%E8%A9%9E/"/>
    <url>/2025/01/02/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E5%90%8D%E8%A9%9E/</url>
    
    <content type="html"><![CDATA[<figure><img src="3764179843.png" alt="【哲风壁纸】哇酷哇酷-间谍过家家.png" /><figcaptionaria-hidden="true">【哲风壁纸】哇酷哇酷-间谍过家家.png</figcaption></figure><hr /><h4 id="婴儿">1.婴儿</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：赤ん坊　<br>假名：あかんぼう<br>例子：赤ん坊はよく泣（な）くものです。<br>翻译：婴儿就是爱哭。<br></code></pre></td></tr></table></figure><h4 id="表现表露现象">2.表现，表露，现象</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile">汉字：現れる<br><span class="hljs-section">假名: あらわれ</span><br>例子：三十分も待ったが、彼は一向に現れない。<br>翻译：等了他三十分钟可是他连个人影都没有。<br>补充：三十分　さんじゅっぷん<br></code></pre></td></tr></table></figure><h4 id="脚步声">3.脚步声</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：足音<br>假名：あしおと<br>例子：近くの広場ではアジサイが色づき出していよいよ夏の足音も聞こえてきそうな、そんな感じです。<br>翻译：在附近的广场上，绣球花开始染上颜色了，仿佛都快要能听见夏天的脚步声了，就是这样的一种感觉呢。<br></code></pre></td></tr></table></figure><h4 id="非洲">4.非洲</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：**<br>假名：アフリカ<br>例子：総じて言えば、アフリカはまだ貧しいものでずから、各国の援助を望んでいます。<br>翻译：总体而言，非洲仍然比较贫穷，因此希望得到各国的援助。<br></code></pre></td></tr></table></figure><h4 id="雨具">5.雨具</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：雨具<br>假名：あまぐ<br></code></pre></td></tr></table></figure><h4 id="推迟推后缓办往后拖">6.推迟，推后，缓办，往后拖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：後回し<br>假名：あとまわし<br>例子：手数のかかる仕事はどうしても後回しになる。<br>翻译：费时费力的工作总是拖到最后才去做。<br></code></pre></td></tr></table></figure><h4 id="沥青柏油">7.沥青，柏油</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：**<br>假名：アスファルト<br></code></pre></td></tr></table></figure><h4id="光光亮灯灯光解除嫌疑的证据">8.光，光亮；灯，灯光；（解除嫌疑的）证据</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：明かり<br>假名：あかり<br>例子：寝る前に、確かにスタンドの明かりを消したのに、起きたらついていた。<br>翻译：睡觉前明明把台灯关掉了，可是起来时灯却是亮着的。<br></code></pre></td></tr></table></figure><h4 id="早晨和晚上朝夕终日">9.早晨和晚上；朝夕，终日</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：朝夕<br>假名：あさゆう<br></code></pre></td></tr></table></figure><h4 id="天线">10.天线</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：**<br>假名：アンテナ<br>例子：屋根に登ってアンテナを修理しようと試みたが、失敗した。<br>翻译：爬上屋顶试着修理天线，但是没有成功。<br></code></pre></td></tr></table></figure><h4 id="脚下脚步">11.脚下；脚步</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：足下<br>假名：あしもと<br></code></pre></td></tr></table></figure><h4 id="糖果">12.糖果</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：飴<br>假名：あめ<br>例子：喉が痛いならこの飴をあげます。<br>翻译：你嗓子痛的话这个糖给你。<br></code></pre></td></tr></table></figure><h4id="间间隔间隙中间之间人与人的关系">13.间，间隔，间隙；中间，之间；（人与人的）关系</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：間<br>假名：あいだ<br>例子：本屋は花屋とスーパーの間にあります。<br>翻译：书店在花店和超市之间。<br></code></pre></td></tr></table></figure><h4 id="section"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-1"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-2"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-3"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-4"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-5"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-6"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-7"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-8"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-9"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-10"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure><h4 id="section-11"></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">汉字：<br>假名：<br>例子：<br>翻译：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日本語</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日本语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活态度废话</title>
    <link href="/2024/12/31/%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6%E5%BA%9F%E8%AF%9D/"/>
    <url>/2024/12/31/%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6%E5%BA%9F%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<p>没有足够的把握前，不要幻想任何后果。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12306火车票预约服务的吐槽</title>
    <link href="/2024/12/24/12306%E7%81%AB%E8%BD%A6%E7%A5%A8%E9%A2%84%E7%BA%A6%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%90%E6%A7%BD/"/>
    <url>/2024/12/24/12306%E7%81%AB%E8%BD%A6%E7%A5%A8%E9%A2%84%E7%BA%A6%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%90%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<p>今年开学的时候，12306推出了学生预约火车票的服务，但我知道的时候我已经完成购票了，但是那时还是很开心的，毕竟下次就能提前预约车票了。但却不尽人意，通知放假的几天后，导员转文了12306的放假学生预约票服务，我看到消息的时候已经是当天晚上了，那时候想去买1.6号的票，可已经没有卧铺，看了一下未来几天的预约票的卧铺情况，1.8号有卧铺，当时打算晚走两天，预约个卧铺再回家，毕竟硬座的话需要过夜，挺痛苦的。虽然担心预约失败，但是听到朋友预约兑票成功后，还是放心不少，可今早却通知我兑现失败，明明预约人数是中等，还是有些不满。因为我仅仅只有1.8号卧铺的一套方案，并没有去预约硬座，可能也是因为第一次不熟悉，或者没有真正看明白12306的通知，导致这次预约购票的失败。目前的情况是，预约购票仅能预约1.9号的票，虽然有硬座预约也有硬卧预约，但我心理也没底了，那就早点回家吧!去智行购票软件里抢票，最后抢到1.6号的‘硬座无座’。挺新鲜的，有点似曾相识，写到这里让我想起来了上次河南发水我在天津下车那次了，感兴趣的可以去看我那篇，‘不站在悬崖边，怎么知道自己会掉下去’</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本描述UML真的很方便（PlantUml）</title>
    <link href="/2024/12/24/%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BF%B0UML%E7%9C%9F%E7%9A%84%E5%BE%88%E6%96%B9%E4%BE%BF%EF%BC%88PlantUml%EF%BC%89/"/>
    <url>/2024/12/24/%E6%96%87%E6%9C%AC%E6%8F%8F%E8%BF%B0UML%E7%9C%9F%E7%9A%84%E5%BE%88%E6%96%B9%E4%BE%BF%EF%BC%88PlantUml%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>PlantUml，利用人工智能去生成PlantUml语言，然后生成图片真的很方便。不过也有缺点，对于一些小问题调整起来不如具有GUI的staruml软件。但即便如此，人工智能结合文本描述语言绘制图表对于敏捷开发很有帮助。</p>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PlantUml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活态度</title>
    <link href="/2024/12/23/%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6/"/>
    <url>/2024/12/23/%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>面对生活的态度，我发现我错了，可能是个性，可能是环境，无疑我态度不利于我的成长。目前还不知该以何种态度去面对一天天，看动漫‘吞噬星空’里有一句话：不要和别人比，跟自己比就够了。听到这句话的时候，很受用。可能以前想过，却现在才明白跟自己比才不会活的那么累。 你也是。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python绘制甘特图</title>
    <link href="/2024/12/22/python%E7%BB%98%E5%88%B6%E7%94%98%E7%89%B9%E5%9B%BE/"/>
    <url>/2024/12/22/python%E7%BB%98%E5%88%B6%E7%94%98%E7%89%B9%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<figure><img src="1866500359.png" alt="甘特图.png" /><figcaption aria-hidden="true">甘特图.png</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib.dates <span class="hljs-keyword">as</span> mdates<br><br><span class="hljs-comment"># 准备数据</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;任务名称&#x27;</span>: [<span class="hljs-string">&#x27;开发计划&#x27;</span>, <span class="hljs-string">&#x27;可行性分析报告&#x27;</span>, <span class="hljs-string">&#x27;业务分析与建模&#x27;</span>, <span class="hljs-string">&#x27;需求建模和用例分析&#x27;</span>,<br>                 <span class="hljs-string">&#x27;架构设计和类设计&#x27;</span>, <span class="hljs-string">&#x27;数据库设计和物理视图设计&#x27;</span>, <span class="hljs-string">&#x27;总结&#x27;</span>],<br>    <span class="hljs-string">&#x27;开始时间（天）&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>    <span class="hljs-string">&#x27;结束时间（天）&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],<br>    <span class="hljs-string">&#x27;持续天数&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    <span class="hljs-string">&#x27;责任人&#x27;</span>: [<span class="hljs-string">&#x27;夏浩祥&#x27;</span>] * <span class="hljs-number">7</span><br>&#125;<br><br>df = pd.DataFrame(data)<br><br><span class="hljs-comment"># 将开始时间和结束时间转换为日期时间格式（以天为单位模拟日期，统一使用一个原点）</span><br>origin_date = pd.Timestamp(<span class="hljs-string">&#x27;2024-12-16&#x27;</span>)<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;开始时间（天）&#x27;</span>, <span class="hljs-string">&#x27;结束时间（天）&#x27;</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        df[col] = pd.to_datetime(df[col], unit=<span class="hljs-string">&#x27;D&#x27;</span>, origin=origin_date)<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;日期转换出现问题，列 <span class="hljs-subst">&#123;col&#125;</span> 的数据格式可能有误，错误信息：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 创建图形和坐标轴对象</span><br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))<br><br><span class="hljs-comment"># 设置中文字体为黑体，确保能正常显示中文</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br><span class="hljs-comment"># 解决负号显示问题（有时候可能会出现负号显示异常，一并处理）</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 绘制甘特图，使用水平的条形图来表示任务时间区间</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> df.iterrows():<br>    bar_width = (row[<span class="hljs-string">&#x27;结束时间（天）&#x27;</span>] - row[<span class="hljs-string">&#x27;开始时间（天）&#x27;</span>]).days<br>    bar = ax.barh(row[<span class="hljs-string">&#x27;任务名称&#x27;</span>], width=bar_width, left=row[<span class="hljs-string">&#x27;开始时间（天）&#x27;</span>], height=<span class="hljs-number">0.8</span>)<br>    <span class="hljs-comment"># 计算文本注释在任务条内相对靠右的位置（这里简单取任务条宽度的80%位置处）</span><br>    text_x = row[<span class="hljs-string">&#x27;开始时间（天）&#x27;</span>] + pd.Timedelta(days=bar_width * <span class="hljs-number">0.8</span>)<br>    ax.text(text_x, row[<span class="hljs-string">&#x27;任务名称&#x27;</span>], row[<span class="hljs-string">&#x27;责任人&#x27;</span>], ha=<span class="hljs-string">&#x27;left&#x27;</span>, va=<span class="hljs-string">&#x27;center&#x27;</span>)<br><br><span class="hljs-comment"># 设置坐标轴格式</span><br>ax.xaxis_date()<br>ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))<br>ax.set_ylabel(<span class="hljs-string">&#x27;任务名称&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>)<br>ax.set_title(<span class="hljs-string">&#x27;论坛管理系统开发甘特图&#x27;</span>)<br><br><span class="hljs-comment"># 自动调整子图布局，避免标签等显示不全</span><br>plt.tight_layout()<br><br><span class="hljs-comment"># 显示图形</span><br>plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>甘特图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>甘特图</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>齐次线性方程组秩与解的情况</title>
    <link href="/2024/12/17/%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%A7%A9%E4%B8%8E%E8%A7%A3%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <url>/2024/12/17/%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%A7%A9%E4%B8%8E%E8%A7%A3%E7%9A%84%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p>若系数矩阵满秩,则齐次线性方程组有且仅有零解,若系数矩阵降秩,则有无穷多解,且基础解系的向量个数等于n-r.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数思维导图</title>
    <link href="/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <url>/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<figure><img src="1244768930.png" alt="线性代数.png" /><figcaption aria-hidden="true">线性代数.png</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数第四次课</title>
    <link href="/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E5%9B%9B%E6%AC%A1%E8%AF%BE/"/>
    <url>/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E5%9B%9B%E6%AC%A1%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<figure><img src="1989859605.jpg" alt="1.jpg" /><figcaption aria-hidden="true">1.jpg</figcaption></figure><figure><img src="3139584423.jpg" alt="2.jpg" /><figcaption aria-hidden="true">2.jpg</figcaption></figure><figure><img src="1855134786.jpg" alt="3.jpg" /><figcaption aria-hidden="true">3.jpg</figcaption></figure><figure><img src="3288319907.jpg" alt="4.jpg" /><figcaption aria-hidden="true">4.jpg</figcaption></figure><figure><img src="877286559.jpg" alt="5.jpg" /><figcaption aria-hidden="true">5.jpg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数第三次课</title>
    <link href="/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE/"/>
    <url>/2024/12/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<figure><img src="3041946079.jpg" alt="1.jpg" /><figcaption aria-hidden="true">1.jpg</figcaption></figure><figure><img src="1647319968.jpg" alt="2.jpg" /><figcaption aria-hidden="true">2.jpg</figcaption></figure><figure><img src="4232221991.jpg" alt="3.jpg" /><figcaption aria-hidden="true">3.jpg</figcaption></figure><figure><img src="2321926080.jpg" alt="4.jpg" /><figcaption aria-hidden="true">4.jpg</figcaption></figure><figure><img src="3665028954.jpg" alt="5.jpg" /><figcaption aria-hidden="true">5.jpg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spooling技术模拟实现（虚拟打印画廊）</title>
    <link href="/2024/12/10/spooling%E6%8A%80%E6%9C%AF%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%EF%BC%88%E8%99%9A%E6%8B%9F%E6%89%93%E5%8D%B0%E7%94%BB%E5%BB%8A%EF%BC%89/"/>
    <url>/2024/12/10/spooling%E6%8A%80%E6%9C%AF%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%EF%BC%88%E8%99%9A%E6%8B%9F%E6%89%93%E5%8D%B0%E7%94%BB%E5%BB%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟打印画廊系统设计与实现">虚拟打印画廊系统设计与实现</h1><h2 id="一项目结构说明">一、项目结构说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">虚拟打印画廊/<br>├── __init__.py               # 包初始化文件<br>├── main.py                   # 主程序入口<br>├── queue_display.py          # 任务队列展示模块<br>├── load_tasks_to_queue.py    # 任务加载与调度模块<br>├── task_submission.py        # 任务提交模块<br>├── user_processing_procedure.py # 用户进程模拟模块<br>└── show_output_images.py     # 图片展示模块<br></code></pre></td></tr></table></figure><h2 id="二核心模块代码解析">二、核心模块代码解析</h2><h3 id="主程序入口main.py">1. 主程序入口（main.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> 虚拟打印画廊 <span class="hljs-keyword">import</span> queue_display<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    queue_display.root.mainloop()  <span class="hljs-comment"># 启动任务队列展示界面</span><br></code></pre></td></tr></table></figure><h3 id="任务队列展示queue_display.py">2.任务队列展示（queue_display.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> load_tasks_to_queue <span class="hljs-keyword">import</span> print_queue, load_tasks_to_queue<br><span class="hljs-keyword">from</span> task_submission <span class="hljs-keyword">import</span> input_spool_dir<br><span class="hljs-keyword">from</span> show_output_images <span class="hljs-keyword">import</span> create_show_images_interface<br><span class="hljs-keyword">from</span> user_processing_procedure <span class="hljs-keyword">import</span> output_spool_dir, user_processing_procedure<br><br>root = tk.Toplevel()<br>root.title(<span class="hljs-string">&quot;任务队列展示界面&quot;</span>)<br><br>queue_text = tk.Text(root)<br>load_button = tk.Button(root, text=<span class="hljs-string">&quot;加载并展示任务队列&quot;</span>, command=<span class="hljs-keyword">lambda</span>: display_queue())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">display_queue</span>():<br>    queue_text.delete(<span class="hljs-string">&#x27;1.0&#x27;</span>, tk.END)  <span class="hljs-comment"># 清空文本框</span><br>    print_queue = load_tasks_to_queue(input_spool_dir)  <span class="hljs-comment"># 从输入井加载任务</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> print_queue:<br>        queue_text.insert(tk.END, <span class="hljs-string">&#x27;任务队列暂时没有内容&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 模拟用户进程处理任务</span><br>    user = user_processing_procedure(print_queue)<br>    user.process_tasks()  <span class="hljs-comment"># 处理后存入输出井</span><br><br>    output_buffer = load_tasks_to_queue(output_spool_dir)  <span class="hljs-comment"># 加载输出井任务</span><br>    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> output_buffer:<br>        <span class="hljs-comment"># 格式化任务信息并展示</span><br>        task_info = <span class="hljs-string">f&quot;任务ID: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;task_id&#x27;</span>]&#125;</span>\n&quot;</span> \<br>                    <span class="hljs-string">f&quot;文件路径: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;file_path&#x27;</span>]&#125;</span>\n&quot;</span> \<br>                    <span class="hljs-string">f&quot;标题: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;title&#x27;</span>]&#125;</span>\n&quot;</span> \<br>                    <span class="hljs-string">f&quot;作者: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;author&#x27;</span>]&#125;</span>\n&quot;</span> \<br>                    <span class="hljs-string">f&quot;描述: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;description&#x27;</span>]&#125;</span>\n&quot;</span> \<br>                    <span class="hljs-string">f&quot;时间戳: <span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;timestamp&#x27;</span>]&#125;</span>\n\n&quot;</span><br>        queue_text.insert(tk.END, task_info)<br>    <br>    create_show_images_interface(output_buffer)  <span class="hljs-comment"># 打开图片展示界面</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root.mainloop()<br></code></pre></td></tr></table></figure><h3 id="任务提交模块task_submission.py">3.任务提交模块（task_submission.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><br>input_spool_dir = os.path.join(os.getcwd(), <span class="hljs-string">&#x27;input_spool&#x27;</span>)  <span class="hljs-comment"># 输入井目录</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintTask</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, task_id, file_path, title, author, description</span>):<br>        <span class="hljs-variable language_">self</span>.task_id = task_id<br>        <span class="hljs-variable language_">self</span>.file_path = file_path<br>        <span class="hljs-variable language_">self</span>.title = title<br>        <span class="hljs-variable language_">self</span>.author = author<br>        <span class="hljs-variable language_">self</span>.description = description<br>        <span class="hljs-variable language_">self</span>.status = <span class="hljs-string">&quot;等待&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_artwork</span>():<br>    file_path = filedialog.askopenfilename()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (title_entry.get() <span class="hljs-keyword">and</span> author_entry.get() <span class="hljs-keyword">and</span> description_entry.get()):<br>        status_label.config(text=<span class="hljs-string">&quot;请填写完整作品标题、作者和描述信息后再提交！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    task_id = <span class="hljs-built_in">len</span>(os.listdir(input_spool_dir)) <span class="hljs-keyword">if</span> os.path.exists(input_spool_dir) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    task = &#123;<br>        <span class="hljs-string">&quot;task_id&quot;</span>: task_id,<br>        <span class="hljs-string">&quot;file_path&quot;</span>: file_path,<br>        <span class="hljs-string">&quot;title&quot;</span>: title_entry.get(),<br>        <span class="hljs-string">&quot;author&quot;</span>: author_entry.get(),<br>        <span class="hljs-string">&quot;description&quot;</span>: description_entry.get(),<br>        <span class="hljs-string">&quot;timestamp&quot;</span>: time.time()<br>    &#125;<br><br>    <span class="hljs-comment"># 保存任务到输入井</span><br>    task_file_path = os.path.join(input_spool_dir, <span class="hljs-string">f&#x27;task_<span class="hljs-subst">&#123;task_id&#125;</span>.json&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(task_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(task, f)<br>    <br>    status_label.config(text=<span class="hljs-string">f&quot;作品已提交，任务ID：<span class="hljs-subst">&#123;task[<span class="hljs-string">&#x27;task_id&#x27;</span>]&#125;</span>&quot;</span>)<br>    title_entry.delete(<span class="hljs-number">0</span>, tk.END)  <span class="hljs-comment"># 清空输入框</span><br><br><span class="hljs-comment"># 创建提交界面</span><br>root = tk.Tk()<br>root.title(<span class="hljs-string">&quot;虚拟打印画廊提交界面&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;200x200&quot;</span>)<br>root.attributes(<span class="hljs-string">&#x27;-toolwindow&#x27;</span>, <span class="hljs-literal">True</span>)  <span class="hljs-comment"># Windows下去除最大化/最小化按钮</span><br><br><span class="hljs-comment"># 输入框与按钮布局</span><br>title_label = tk.Label(root, text=<span class="hljs-string">&quot;作品标题：&quot;</span>).pack()<br>title_entry = tk.Entry(root).pack()<br><span class="hljs-comment"># 作者和描述输入框类似...</span><br>submit_button = tk.Button(root, text=<span class="hljs-string">&quot;提交作品&quot;</span>, command=submit_artwork).pack()<br>status_label = tk.Label(root).pack()<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(input_spool_dir):<br>    os.makedirs(input_spool_dir)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root.mainloop()<br></code></pre></td></tr></table></figure><h3 id="任务加载与调度load_tasks_to_queue.py">4.任务加载与调度（load_tasks_to_queue.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> task_submission <span class="hljs-keyword">import</span> input_spool_dir<br><br>output_spool_dir = os.path.join(os.getcwd(), <span class="hljs-string">&#x27;output_spool&#x27;</span>)<br>print_queue = []  <span class="hljs-comment"># 全局打印队列</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_tasks_to_queue</span>(<span class="hljs-params">spool</span>):<br>    <span class="hljs-keyword">global</span> print_queue<br>    print_queue.clear()<br>    task_files = os.listdir(spool)<br>    <span class="hljs-keyword">for</span> task_file <span class="hljs-keyword">in</span> task_files:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(spool, task_file), <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            task_info = json.load(f)<br>            print_queue.append(task_info)<br>    <span class="hljs-keyword">return</span> print_queue<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prioritize_queue_fcfs</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;先来先服务（FCFS）调度算法&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> print_queue  <span class="hljs-comment"># 按文件读取顺序自然有序</span><br></code></pre></td></tr></table></figure><h3 id="用户进程模拟user_processing_procedure.py">5.用户进程模拟（user_processing_procedure.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>output_spool_dir = os.path.join(os.getcwd(), <span class="hljs-string">&#x27;output_spool&#x27;</span>)  <span class="hljs-comment"># 输出井目录</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">user_processing_procedure</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, print_queue</span>):<br>        <span class="hljs-variable language_">self</span>.print_queue = print_queue<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_tasks</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_spool_dir):<br>            os.makedirs(output_spool_dir)<br>        <span class="hljs-variable language_">self</span>.clear_output_spool()  <span class="hljs-comment"># 清空输出井</span><br><br>        <span class="hljs-keyword">for</span> task_info <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.print_queue:<br>            task_info[<span class="hljs-string">&quot;title&quot;</span>] += <span class="hljs-string">&quot;| 假设用户进程处理&quot;</span>  <span class="hljs-comment"># 修改任务标题模拟处理</span><br>            task_id = <span class="hljs-built_in">len</span>(os.listdir(output_spool_dir))<br>            task_file_path = os.path.join(output_spool_dir, <span class="hljs-string">f&#x27;task_<span class="hljs-subst">&#123;task_id&#125;</span>.json&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(task_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                json.dump(task_info, f)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_output_spool</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;清空输出井内容（保留文件夹）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(output_spool_dir):<br>            <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(output_spool_dir):<br>                <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                    os.remove(os.path.join(root, file))<br>                <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>                    os.rmdir(os.path.join(root, <span class="hljs-built_in">dir</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output_spool文件夹下内容已清空&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="图片展示模块show_output_images.py">6.图片展示模块（show_output_images.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageTk<br><span class="hljs-keyword">import</span> tkinter.messagebox <span class="hljs-keyword">as</span> msgbox<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_card</span>(<span class="hljs-params">frame, task_info</span>):<br>    card_frame = tk.Frame(frame, bd=<span class="hljs-number">2</span>, relief=tk.SOLID)<br>    task_info_text = <span class="hljs-string">f&quot;任务ID: <span class="hljs-subst">&#123;task_info[<span class="hljs-string">&#x27;task_id&#x27;</span>]&#125;</span>\n文件路径: <span class="hljs-subst">&#123;task_info[<span class="hljs-string">&#x27;file_path&#x27;</span>]&#125;</span>\n...&quot;</span><br>    tk.Label(card_frame, text=task_info_text).pack()<br><br>    <span class="hljs-comment"># 处理图片展示</span><br>    file_extension = os.path.splitext(task_info[<span class="hljs-string">&#x27;file_path&#x27;</span>])[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> file_extension <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;.png&#x27;</span>, <span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;.gif&#x27;</span>]:<br>        <span class="hljs-keyword">try</span>:<br>            image = Image.<span class="hljs-built_in">open</span>(task_info[<span class="hljs-string">&#x27;file_path&#x27;</span>])<br>            <span class="hljs-comment"># 缩放图片</span><br>            max_width = <span class="hljs-number">150</span><br>            scale = max_width / image.size[<span class="hljs-number">0</span>]<br>            image = image.resize((<span class="hljs-built_in">int</span>(image.size[<span class="hljs-number">0</span>]*scale), <span class="hljs-built_in">int</span>(image.size[<span class="hljs-number">1</span>]*scale)), Image.Resampling.LANCZOS)<br>            photo = ImageTk.PhotoImage(image)<br>            tk.Label(card_frame, image=photo).pack()<br>            card_frame.image = photo  <span class="hljs-comment"># 防止GC回收</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            msgbox.showerror(<span class="hljs-string">&quot;图片加载错误&quot;</span>, <span class="hljs-string">f&quot;错误：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> card_frame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_show_images_interface</span>(<span class="hljs-params">output_buffer</span>):<br>    root = tk.Toplevel()<br>    root.title(<span class="hljs-string">&quot;图片展示界面&quot;</span>)<br><br>    main_frame = tk.Frame(root)<br>    scrollbar = tk.Scrollbar(main_frame)<br>    content_canvas = tk.Canvas(main_frame, bg=<span class="hljs-string">&#x27;white&#x27;</span>)<br>    scrollbar.config(command=content_canvas.yview)<br>    content_canvas.config(yscrollcommand=scrollbar.<span class="hljs-built_in">set</span>)<br><br>    <span class="hljs-comment"># 添加卡片布局</span><br>    vertical_offset = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> task_info <span class="hljs-keyword">in</span> output_buffer:<br>        card = create_card(content_canvas, task_info)<br>        card.pack(padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br>        vertical_offset = <span class="hljs-built_in">max</span>(vertical_offset, card.winfo_height())<br><br>    content_canvas.config(scrollregion=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, vertical_offset))<br>    main_frame.pack(fill=tk.BOTH, expand=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="三系统流程说明">三、系统流程说明</h2><ol type="1"><li><strong>任务提交</strong>：用户通过<code>task_submission.py</code>界面上传文件并填写信息，任务以JSON 格式保存到<code>input_spool</code>目录。</li><li><strong>任务加载</strong>：<code>queue_display.py</code>点击 “加载”按钮后，从<code>input_spool</code>读取任务到<code>print_queue</code>（FCFS调度）。</li><li><strong>任务处理</strong>：<code>user_processing_procedure.py</code>模拟用户进程处理任务，修改标题后保存到<code>output_spool</code>目录。</li><li><strong>队列展示</strong>：处理后的任务信息显示在文本框，同时调用<code>show_output_images.py</code>生成带图片预览的卡片式展示界面。</li></ol><h2 id="四关键技术点">四、关键技术点</h2><ol type="1"><li><strong>输入 / 输出井设计</strong>：<ul><li><code>input_spool</code>：存放待处理任务（JSON文件），支持文件系统持久化。</li><li><code>output_spool</code>：存放处理后任务，每次处理前自动清空（<code>clear_output_spool</code>方法）。</li></ul></li><li><strong>任务调度算法</strong>： 采用 ** 先来先服务（FCFS）**策略，按任务提交顺序处理，通过<code>load_tasks_to_queue</code>保证顺序性。</li><li><strong>图形界面（Tkinter）</strong>：<ul><li><code>queue_display.py</code>使用<code>Text</code>组件展示任务列表，<code>Button</code>触发加载逻辑。</li><li><code>show_output_images.py</code>实现带滚动条的图片画廊，支持PNG/JPG/GIF 格式预览，自动缩放图片保持比例。</li></ul></li><li><strong>异常处理</strong>：<ul><li>任务提交时校验必填字段，防止空数据。</li><li>图片加载失败时弹出错误提示，避免程序崩溃。</li></ul></li></ol><h2 id="五运行与测试">五、运行与测试</h2><ol type="1"><li><p><strong>启动系统</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python main.py  <span class="hljs-comment"># 打开任务队列展示界面</span><br></code></pre></td></tr></table></figure></li><li><p><strong>提交任务</strong>：运行<code>task_submission.py</code>，填写信息并上传图片文件，任务 ID自动生成。</p></li><li><p><strong>查看队列与图片</strong>： 在队列界面点击“加载并展示任务队列”，处理后的任务信息和图片会分别显示在文本框和新窗口中。</p></li></ol><h2 id="六项目地址">六、项目地址</h2><p><ahref="https://gitee.com/xiazhimiao/python/tree/master/虚拟打印画廊">Gitee仓库</a> （含完整代码及资源文件）</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>spooling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线代第五次</title>
    <link href="/2024/12/07/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%BA%94%E6%AC%A1/"/>
    <url>/2024/12/07/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%BA%94%E6%AC%A1/</url>
    
    <content type="html"><![CDATA[<figure><img src="2887121933.jpg" alt="1.jpg" /><figcaption aria-hidden="true">1.jpg</figcaption></figure><figure><img src="1372064888.jpg" alt="2.jpg" /><figcaption aria-hidden="true">2.jpg</figcaption></figure><figure><img src="4065476061.jpg" alt="3.jpg" /><figcaption aria-hidden="true">3.jpg</figcaption></figure><figure><img src="2098063474.jpg" alt="4.jpg" /><figcaption aria-hidden="true">4.jpg</figcaption></figure><figure><img src="764369055.jpg" alt="5.jpg" /><figcaption aria-hidden="true">5.jpg</figcaption></figure><figure><img src="538555254.jpg" alt="6.jpg" /><figcaption aria-hidden="true">6.jpg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小说爬取的软件测试</title>
    <link href="/2024/11/09/%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/11/09/%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>由于测试程序可正常运行，下面省略单元测试：</p><h3 id="测试计划">测试计划</h3><h4 id="一测试目标">一、测试目标</h4><ol type="1"><li>验证程序从获取URL列表、处理网页内容到最终保存文件的整个流程能够顺利完成，确保各个函数之间协作正常，无数据丢失或错误。</li><li>确认程序在多线程环境下能够正确处理每个章节的网页内容下载、转换和保存操作，线程相关的计时和信息输出准确。</li><li>检查程序在面对各种异常情况（如网络异常、文件读取失败等）时的处理能力，确保程序不会因异常而崩溃，且能给出合理的错误提示。</li><li>从用户角度出发，模拟实际使用场景，验证程序是否能完整地完成从指定小说网页抓取内容并转换保存为Markdown文件的功能，生成的文件内容符合预期且可正常阅读使用。</li></ol><h4 id="二测试策略">二、测试策略</h4><ol type="1"><li><strong>集成测试</strong>：按照程序的主要流程进行测试，关注不同函数之间的调用和数据传递是否正确，重点检查整体流程的连贯性和正确性。例如，从获取小说首页URL开始，依次经过获取URL列表、读取CSS字典、处理每个章节的网页内容并最终保存为Markdown文件的整个过程。</li><li><strong>功能测试</strong>：模拟实际用户使用场景，输入不同的有效小说网页URL及对应的CSSURL，运行程序，检查最终生成的Markdown文件内容是否完整、准确，格式是否符合要求，能否清晰呈现小说内容。同时验证程序对不同小说网页的通用性。</li><li><strong>异常测试</strong>：故意制造各种异常情况，如传入错误的URL、模拟网络中断、删除必要文件等，检查程序在异常情况下的处理是否符合预期，如是否能正确提示错误信息，是否会导致程序崩溃等。</li></ol><h4 id="三测试资源">三、测试资源</h4><ol type="1"><li><strong>人力资源</strong>：安排至少一名熟悉Python编程和测试的测试人员负责本次测试工作。</li><li><strong>测试设备</strong>：普通PC机，具备网络连接功能，能够正常运行程序所需的环境。</li><li><strong>测试工具</strong>：可使用一些网络模拟工具（如<code>pytest-responses</code>等，若有需要更精细地模拟网络请求和响应情况）辅助进行异常测试。</li></ol><h4 id="四测试进度安排忽略">四、测试进度安排（忽略）</h4><h5 id="第一阶段测试准备1天">第一阶段：测试准备（1天）</h5><ul><li>熟悉程序代码逻辑和功能需求。</li><li>搭建测试环境，确保所需的库（如<code>requests</code>、<code>BeautifulSoup</code>、<code>yaml</code>等）都能正确安装和运行。</li></ul><h5 id="第二阶段集成测试2天">第二阶段：集成测试（2天）</h5><ul><li>编写集成测试用例，按照程序的主要流程进行测试，涵盖从获取URL到最终保存文件的完整流程。</li><li>执行集成测试用例，重点关注函数之间的协作是否正常，数据传递是否准确，记录测试结果，对发现的问题及时反馈给开发人员进行修复。</li></ul><h5 id="第三阶段功能测试2天">第三阶段：功能测试（2天）</h5><ul><li>模拟实际使用场景，选取多个不同的有效小说网页及对应的CSSURL，运行程序，检查最终生成的Markdown文件内容是否完整、准确。</li><li>对生成的文件内容进行人工阅读检查，确保其能清晰呈现小说的文本内容，符合用户阅读需求。同时验证程序对不同小说网页的通用性。</li></ul><h5 id="第四阶段异常测试2天">第四阶段：异常测试（2天）</h5><ul><li>故意制造各种异常情况，如传入错误的URL（包括小说首页URL、CSSURL等）、模拟网络中断、删除必要文件（如<code>urls.yaml</code>、<code>css_dict.yml</code>等）。</li><li>检查程序在异常情况下的处理是否符合预期，如是否能正确提示错误信息，是否会导致程序崩溃等，记录测试结果。</li></ul><h5 id="第五阶段测试总结1天">第五阶段：测试总结（1天）</h5><ul><li>汇总各个阶段的测试结果，计算缺陷率等指标。</li><li>编写测试总结报告，对程序的质量进行评估，提出改进建议（如果有）。</li></ul><h3 id="测试设计">测试设计</h3><h4 id="一集成测试用例">一、集成测试用例</h4><ul><li><strong>测试用例1：完整流程测试</strong><ul><li><strong>输入</strong>：一个有效的小说首页URL，如<code>https://www.qianbiwenxue.com/noval/41497273.html</code>和对应的<code>css_url</code>，如<code>https://www.qianbiwenxue.com/static/css/fonts.css?v=c560a92cd812e57bb8e2e8fdde5f1650</code>。</li><li><strong>预期输出</strong>：在<code>无敌剑域</code>目录下成功生成所有章节对应的<code>.md</code>文件，且文件内容为处理后的Markdown格式内容，格式正确，无乱码等问题，同时控制台输出每个线程的下载完成信息以及最终是否全部成功的提示信息。</li><li><strong>测试步骤</strong>：<ol type="1"><li>按照程序的主流程，依次调用<code>read_urls</code>、<code>read_css_dict</code>等函数获取所需的数据。</li><li>调用<code>process_html_pages</code>函数通过线程池处理每个章节的网页内容。</li><li>检查<code>无敌剑域</code>目录下是否生成了所有预期的<code>.md</code>文件。</li><li>读取每个生成的<code>.md</code>文件内容，检查其格式是否符合Markdown规范，并且内容与预期处理后的内容一致。</li><li>检查控制台输出是否包含正确的线程下载完成信息以及最终是否全部成功的提示信息。</li></ol></li></ul></li></ul><h4 id="二功能测试用例">二、功能测试用例</h4><ul><li><strong>测试用例1：抓取小说内容并转换保存</strong><ul><li><strong>输入</strong>：不同的有效小说首页URL及对应的CSS URL，例如：<ul><li>小说1：<code>https://www.qianbiwenxue.com/noval/41497273.html</code>和<code>https://www.qianbiwenxue.com/static/css/fonts.css?v=c560a99cd812e57bb8e2e8fdde5f1650</code></li><li>小说2：<code>https://www.anothernovel.com/noval/12345678.html</code>和<code>https://www.anothernovel.com/static/css/fonts.css?v=abcdef1234567890</code></li></ul></li><li><strong>预期输出</strong>：在<code>无敌剑域</code>目录下分别成功生成对应小说所有章节的<code>.md</code>文件，且文件内容为处理后的Markdown格式内容，格式正确，无乱码等问题，生成的文件内容能够完整准确地呈现小说的文本内容（通过人工阅读对比）。</li><li><strong>测试步骤</strong>：<ol type="1"><li>运行程序，分别传入上述不同小说的首页URL和CSS URL。</li><li>等待程序运行完成。</li><li>检查<code>无敌剑域</code>目录下是否生成了所有预期的<code>.md</code>文件。</li><li>随机抽取生成的<code>.md</code>文件，人工阅读其内容，检查是否能完整准确地呈现小说的相应章节内容。</li></ol></li></ul></li></ul><h4 id="三异常测试用例">三、异常测试用例</h4><ul><li><strong>测试用例1：传入无效小说首页URL</strong><ul><li><strong>输入</strong>：一个无效的小说首页URL，如<code>https://www.invalid_url.com</code>。</li><li><strong>预期输出</strong>：程序能够正确处理异常，在控制台输出相应的错误信息，如<code>读取本地:urls</code>的相关错误提示，并且不会导致程序崩溃。</li><li><strong>测试步骤</strong>：<ol type="1"><li>运行程序，传入上述无效小说首页URL。</li><li>观察控制台输出，检查是否有正确的错误提示，并且程序是否继续运行（未崩溃）。</li></ol></li></ul></li><li><strong>测试用例2：传入无效CSS URL</strong><ul><li><strong>输入</strong>：一个无效的CSSURL，如<code>https://www.invalid_css_url.com</code>。</li><li><strong>预期输出</strong>：程序能够正确处理异常，在控制台输出相应的错误信息，如<code>读取本地:css_dict</code>的相关错误提示，并且不会导致程序崩溃。</li><li><strong>测试步骤</strong>：<ol type="1"><li>运行程序，传入上述无效CSS URL。</li><li>观察控制台输出，检查是否有正确的错误提示，并且程序是否继续运行（未崩溃）。</li></ol></li></ul></li><li><strong>测试用例3：模拟网络中断</strong><ul><li><strong>输入</strong>：使用网络模拟工具在程序请求网页（如获取网页源码、读取CSS内容等）时模拟网络中断情况。</li><li><strong>预期输出</strong>：程序能够正确处理异常，在控制台输出相应的错误信息，如网络请求失败的相关提示，并且不会导致程序崩溃。</li><li><strong>测试步骤</strong>：<ol type="1"><li>借助网络模拟工具，在程序执行到相关网络请求操作时，触发网络中断模拟。</li><li>观察控制台输出，检查是否有正确的错误提示，并且程序是否继续运行（未崩溃）。</li></ol></li></ul></li><li><strong>测试用例4：删除必要文件</strong><ul><li><strong>输入</strong>：在程序运行前，删除<code>urls.yaml</code>文件或<code>css_dict.yml</code>文件。</li><li><strong>预期输出</strong>：程序能够正确处理异常，在控制台输出相应的错误信息，如文件读取失败的相关提示，并且不会导致程序崩溃。</li><li><strong>测试步骤</strong>：<ol type="1"><li>先删除<code>urls.yaml</code>文件（或<code>css_dict.yml</code>文件）。</li><li>运行程序，传入有效的小说首页URL和CSS URL（假设其他条件正常）。</li><li>观察控制台输出，检查是否有正确的错误提示，并且程序是否继续运行（未崩溃）。</li></ol></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不站在悬崖边，怎么才能知道自己会掉下去</title>
    <link href="/2024/11/08/%E4%B8%8D%E7%AB%99%E5%9C%A8%E6%82%AC%E5%B4%96%E8%BE%B9%EF%BC%8C%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%9F%A5%E9%81%93%E8%87%AA%E5%B7%B1%E4%BC%9A%E6%8E%89%E4%B8%8B%E5%8E%BB/"/>
    <url>/2024/11/08/%E4%B8%8D%E7%AB%99%E5%9C%A8%E6%82%AC%E5%B4%96%E8%BE%B9%EF%BC%8C%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%9F%A5%E9%81%93%E8%87%AA%E5%B7%B1%E4%BC%9A%E6%8E%89%E4%B8%8B%E5%8E%BB/</url>
    
    <content type="html"><![CDATA[<p>7 月 16 号开往海口的 Z384号列车因为河南大水被迫哪里来的回哪去，我选择在天津下车。12306可以根据区间进行退款，也是很快通过软件退款，不过并没有第一时间收到，因为我是第三方平台买的票，需要等第三方平台退款。车是凌晨 3点停的，出站后查了一下当天的列车，发现嫩个走的大多都是高铁，比较贵，当时决定买第二天的Z384从天津上车，这里是第一次犹豫，或许也不是犹豫，也可以说是错过一次机会。我选择买第二天的 Z384，终于买到了无座，也是第二天凌晨 2 点开，四站之后 9点 47 到家，当时打算还不错。不过，家里来电话希望早点回去，不要在这么呆着，我本来是担心钱花太多，毕竟当时已经没有学生票可以用了，必须成人，但俺妈说不管多少钱给就是了（俺家并不富裕）。因为我本身也想早点回家，加上家里催促，也就打算多花几百去买高铁早点回家（当然没有直达），不过此时距离我下车已经过了6个小时，当天的列车基本被抢光了，我在第三天软件去买多程的时候，发现第一程买不到，也就造成了后两程的手续费，因为不足24 小时，造成 0.2 的手续费。为什么第一程买不到，因为我之前已经买了第二天凌晨的 Z384列车，第一程不让买了，犹豫后知后觉，把 Z384退掉之后去买第一程列车，发现第一程也买不到了，直到 11-40也没有候补到，这里距离开车不足一小时，基本买不到了，至此退掉后两程。在网吧通过第三方路径规划和 12306查看余票，最终也没能选到合适的，而且白白能丢了之前拥有的 Z384。中午去售票大厅去看一下，希望他们有特殊渠道还能购买到 Z384的无座，结果和我之前掌握的情况并无二致，只不过排了半天队的代价罢了。最后买了第二天晚上 22 点的票，第三天早上到家。看到了天津的血液中心车，发现自己转氨酶 114 正常是50，不能献血，大概是我没睡好的原因，没能献上血。这里多说一句，对看到这里的读者，现在有些地方血库缺血，可以去献一下，顺便检查一下自己的身体情况，也不错。从血车出来后，已经 1点多了，并没打算去爬山了，毕竟身上还有两个背包，于是去找了个旅馆，从 1点到明天 12，算一天 80块钱。洗个澡，睡了一会，发现六点了，此时心情并不好，本来我当天早上已经到家了，结果现在因为天灾导致在地下旅馆，后天才能到家，此时很不甘心。字数到没说重点，就先这样</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>老式洗衣机甩干桶</title>
    <link href="/2024/11/08/%E8%80%81%E5%BC%8F%E6%B4%97%E8%A1%A3%E6%9C%BA%E7%94%A9%E5%B9%B2%E6%A1%B6/"/>
    <url>/2024/11/08/%E8%80%81%E5%BC%8F%E6%B4%97%E8%A1%A3%E6%9C%BA%E7%94%A9%E5%B9%B2%E6%A1%B6/</url>
    
    <content type="html"><![CDATA[<p>基础稍微摇摆，用大力压制，尚可使之回归正轨。若实在不堪，天大力气也压制不住，只好停止重新打好基础。基础若稳，堪堪几秒，就得稍远些，担心因转的太快飞出去爆炸致伤。往往自视甚高，用眼就会，底子就会虚浮，真到打仗便会自乱阵脚。那一句：“你说的我都懂”，是我听过最不好笑的冷笑话了，也希望早些明白。超过别人一点点会引起嫉妒，超过别人一大截会引起羡慕，高出别人一个档次会引起崇拜。听出茧子的打基础，也是先生问题，口头教育早该明白不过经历的打击。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用scrapy完成人民网社会法制栏目下原创新闻的爬取</title>
    <link href="/2024/11/07/%E5%88%A9%E7%94%A8scrapy%E5%AE%8C%E6%88%90%E4%BA%BA%E6%B0%91%E7%BD%91%E7%A4%BE%E4%BC%9A%E6%B3%95%E5%88%B6%E6%A0%8F%E7%9B%AE%E4%B8%8B%E5%8E%9F%E5%88%9B%E6%96%B0%E9%97%BB%E7%9A%84%E7%88%AC%E5%8F%96/"/>
    <url>/2024/11/07/%E5%88%A9%E7%94%A8scrapy%E5%AE%8C%E6%88%90%E4%BA%BA%E6%B0%91%E7%BD%91%E7%A4%BE%E4%BC%9A%E6%B3%95%E5%88%B6%E6%A0%8F%E7%9B%AE%E4%B8%8B%E5%8E%9F%E5%88%9B%E6%96%B0%E9%97%BB%E7%9A%84%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="人民网新闻爬虫开发指南">人民网新闻爬虫开发指南</h1><h2 id="一环境搭建与初始化命令">一、环境搭建与初始化命令</h2><h3 id="所需依赖安装">所需依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装Scrapy框架</span><br>pip install scrapy  <br><span class="hljs-comment"># 安装MySQL连接库</span><br>pip install pymysql  <br></code></pre></td></tr></table></figure><h3 id="项目创建与初始化">项目创建与初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建Scrapy项目</span><br>scrapy startproject people_news_crawler  <br><span class="hljs-comment"># 进入项目目录</span><br><span class="hljs-built_in">cd</span> people_news_crawler  <br><span class="hljs-comment"># 生成爬虫脚本（域名需与目标网站一致）</span><br>scrapy genspider PeopleNews people.com.cn  <br></code></pre></td></tr></table></figure><h2 id="二项目文件结构说明">二、项目文件结构说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">people_news_crawler/<br>├── scrapy.cfg                  # 部署配置文件<br>└── people_news_crawler/<br>    ├── __init__.py             # 初始化文件<br>    ├── items.py                # 数据结构定义<br>    ├── pipelines.py            # 数据处理管道<br>    ├── settings.py             # 项目配置文件<br>    └── spiders/<br>        └── people_news.py      # 爬虫核心代码<br></code></pre></td></tr></table></figure><h2 id="三核心代码实现">三、核心代码实现</h2><h3 id="爬虫类peoplenewsspider.py">1. 爬虫类（PeopleNewsSpider.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> ..items <span class="hljs-keyword">import</span> PeopleNewsCrawlerItem<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PeopleNewsSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&quot;people_news&quot;</span>  <span class="hljs-comment"># 爬虫名称（需与genspider命令一致）</span><br>    <span class="hljs-comment"># 生成多页URL（此处爬取1-17页，共17页）</span><br>    start_urls = [<span class="hljs-string">f&#x27;http://society.people.com.cn/GB/86800/index<span class="hljs-subst">&#123;i&#125;</span>.html&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">18</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;解析列表页，提取文章链接并传递至详情页解析&quot;&quot;&quot;</span><br>        article_list = response.css(<span class="hljs-string">&#x27;.ej_list_box.clear ul&#x27;</span>)<br>        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> article_list:<br>            links = article.css(<span class="hljs-string">&#x27;a[href]&#x27;</span>)  <span class="hljs-comment"># 筛选包含href属性的a标签</span><br>            <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> links:<br>                item = PeopleNewsCrawlerItem()<br>                item[<span class="hljs-string">&quot;href&quot;</span>] = <span class="hljs-string">&quot;http://society.people.com.cn&quot;</span> + link.attrib[<span class="hljs-string">&quot;href&quot;</span>]  <span class="hljs-comment"># 补全绝对URL</span><br>                item[<span class="hljs-string">&quot;title&quot;</span>] = link.css(<span class="hljs-string">&#x27;::text&#x27;</span>).get().strip()  <span class="hljs-comment"># 提取标题并去空格</span><br>                <span class="hljs-comment"># 发送详情页请求，传递item至回调函数</span><br>                <span class="hljs-keyword">yield</span> scrapy.Request(item[<span class="hljs-string">&quot;href&quot;</span>], callback=<span class="hljs-variable language_">self</span>.parse_article, meta=&#123;<span class="hljs-string">&quot;item&quot;</span>: item&#125;)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_article</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;解析详情页，提取新闻具体内容&quot;&quot;&quot;</span><br>        item = response.meta[<span class="hljs-string">&quot;item&quot;</span>]<br>        content_div = response.css(<span class="hljs-string">&#x27;.col.col-1.fl&#x27;</span>)  <span class="hljs-comment"># 内容容器</span><br><br>        <span class="hljs-comment"># 解析发布时间与来源</span><br>        info_div = content_div.css(<span class="hljs-string">&#x27;.col-1-1.fl&#x27;</span>)<br>        info_text = info_div.css(<span class="hljs-string">&#x27;::text&#x27;</span>).getall()  <span class="hljs-comment"># 获取所有文本节点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(info_text) &gt;= <span class="hljs-number">2</span>:<br>            item[<span class="hljs-string">&quot;time&quot;</span>] = info_text[<span class="hljs-number">0</span>].strip()  <span class="hljs-comment"># 时间（第一个文本节点）</span><br>            item[<span class="hljs-string">&quot;source&quot;</span>] = info_text[<span class="hljs-number">1</span>].strip() <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;来源&quot;</span> <span class="hljs-keyword">in</span> info_text[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;解析失败&quot;</span>  <span class="hljs-comment"># 来源</span><br>        <span class="hljs-keyword">else</span>:<br>            item[<span class="hljs-string">&quot;time&quot;</span>] = item[<span class="hljs-string">&quot;source&quot;</span>] = <span class="hljs-string">&quot;解析失败&quot;</span><br><br>        <span class="hljs-comment"># 解析正文内容</span><br>        content_tags = content_div.css(<span class="hljs-string">&#x27;.rm_txt_con.cf p&#x27;</span>)<br>        item[<span class="hljs-string">&quot;content&quot;</span>] = <span class="hljs-string">&quot;\n&quot;</span>.join([p.css(<span class="hljs-string">&#x27;::text&#x27;</span>).get().strip() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> content_tags <span class="hljs-keyword">if</span> p.css(<span class="hljs-string">&#x27;::text&#x27;</span>).get()])<br>        item[<span class="hljs-string">&quot;content&quot;</span>] = item[<span class="hljs-string">&quot;content&quot;</span>] <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;解析失败&quot;</span>  <span class="hljs-comment"># 处理空内容</span><br><br>        <span class="hljs-comment"># 解析责任编辑</span><br>        editor = content_div.css(<span class="hljs-string">&#x27;.edit.cf::text&#x27;</span>).get()<br>        item[<span class="hljs-string">&quot;author&quot;</span>] = editor.strip() <span class="hljs-keyword">if</span> editor <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;解析失败&quot;</span><br><br>        <span class="hljs-keyword">yield</span> item  <span class="hljs-comment"># 传递至管道处理</span><br></code></pre></td></tr></table></figure><h3 id="数据结构定义items.py">2. 数据结构定义（items.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PeopleNewsCrawlerItem</span>(scrapy.Item):<br>    <span class="hljs-string">&quot;&quot;&quot;定义新闻数据字段&quot;&quot;&quot;</span><br>    href = scrapy.Field()       <span class="hljs-comment"># 文章链接（必选）</span><br>    title = scrapy.Field()      <span class="hljs-comment"># 文章标题（必选）</span><br>    time = scrapy.Field()       <span class="hljs-comment"># 发布时间（可选）</span><br>    source = scrapy.Field()     <span class="hljs-comment"># 来源媒体（可选）</span><br>    author = scrapy.Field()     <span class="hljs-comment"># 责任编辑（可选）</span><br>    content = scrapy.Field()    <span class="hljs-comment"># 正文内容（必选）</span><br></code></pre></td></tr></table></figure><h3 id="数据存储管道pipelines.py">3. 数据存储管道（pipelines.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-keyword">from</span> scrapy.exceptions <span class="hljs-keyword">import</span> DropItem<br><span class="hljs-keyword">from</span> itemadapter <span class="hljs-keyword">import</span> ItemAdapter<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLPipeline</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;MySQL数据库存储管道&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, host, user, password, db</span>):<br>        <span class="hljs-variable language_">self</span>.host = host<br>        <span class="hljs-variable language_">self</span>.user = user<br>        <span class="hljs-variable language_">self</span>.password = password<br>        <span class="hljs-variable language_">self</span>.db = db<br>        <span class="hljs-variable language_">self</span>.logger = logging.getLogger(__name__)<br>        <span class="hljs-variable language_">self</span>.logger.setLevel(logging.DEBUG)  <span class="hljs-comment"># 配置日志等级</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">from_crawler</span>(<span class="hljs-params">cls, crawler</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从配置文件获取数据库参数&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> cls(<br>            host=crawler.settings.get(<span class="hljs-string">&quot;MYSQL_HOST&quot;</span>),<br>            user=crawler.settings.get(<span class="hljs-string">&quot;MYSQL_USER&quot;</span>),<br>            password=crawler.settings.get(<span class="hljs-string">&quot;MYSQL_PASSWORD&quot;</span>),<br>            db=crawler.settings.get(<span class="hljs-string">&quot;MYSQL_DB&quot;</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_spider</span>(<span class="hljs-params">self, spider</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;爬虫启动时建立数据库连接&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.connection = pymysql.connect(<br>                host=<span class="hljs-variable language_">self</span>.host,<br>                user=<span class="hljs-variable language_">self</span>.user,<br>                password=<span class="hljs-variable language_">self</span>.password,<br>                db=<span class="hljs-variable language_">self</span>.db,<br>                charset=<span class="hljs-string">&quot;utf8mb4&quot;</span>,  <span class="hljs-comment"># 支持存储特殊字符</span><br>                cursorclass=pymysql.cursors.DictCursor<br>            )<br>            <span class="hljs-variable language_">self</span>.cursor = <span class="hljs-variable language_">self</span>.connection.cursor()<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;成功连接到数据库：%s&quot;</span>, <span class="hljs-variable language_">self</span>.db)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;数据库连接失败：%s&quot;</span>, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">raise</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_spider</span>(<span class="hljs-params">self, spider</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;爬虫关闭时释放连接&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.connection.close()<br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;数据库连接已关闭&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;处理数据并插入数据库&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            sql = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            INSERT INTO people_news (</span><br><span class="hljs-string">                href, title, time, source, author, content</span><br><span class="hljs-string">            ) VALUES (%s, %s, %s, %s, %s, %s)</span><br><span class="hljs-string">            ON DUPLICATE KEY UPDATE content = VALUES(content)  # 避免重复插入</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            <span class="hljs-variable language_">self</span>.cursor.execute(sql, (<br>                item[<span class="hljs-string">&quot;href&quot;</span>],<br>                item[<span class="hljs-string">&quot;title&quot;</span>],<br>                item[<span class="hljs-string">&quot;time&quot;</span>],<br>                item[<span class="hljs-string">&quot;source&quot;</span>],<br>                item[<span class="hljs-string">&quot;author&quot;</span>],<br>                item[<span class="hljs-string">&quot;content&quot;</span>]<br>            ))<br>            <span class="hljs-variable language_">self</span>.connection.commit()<br>            <span class="hljs-variable language_">self</span>.logger.debug(<span class="hljs-string">&quot;成功插入数据：%s&quot;</span>, item[<span class="hljs-string">&quot;title&quot;</span>])<br>        <span class="hljs-keyword">except</span> pymysql.Error <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.connection.rollback()  <span class="hljs-comment"># 出错时回滚事务</span><br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;数据插入失败：%s&quot;</span>, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">raise</span> DropItem(<span class="hljs-string">f&quot;丢弃损坏数据：<span class="hljs-subst">&#123;item[<span class="hljs-string">&#x27;title&#x27;</span>]&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></table></figure><h3 id="项目配置settings.py">4. 项目配置（settings.py）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">BOT_NAME = <span class="hljs-string">&quot;people_news_crawler&quot;</span><br>SPIDER_MODULES = [<span class="hljs-string">&quot;people_news_crawler.spiders&quot;</span>]<br>NEWSPIDER_MODULE = <span class="hljs-string">&quot;people_news_crawler.spiders&quot;</span><br><br><span class="hljs-comment"># 数据管道配置（数字越小优先级越高）</span><br>ITEM_PIPELINES = &#123;<br>    <span class="hljs-string">&quot;people_news_crawler.pipelines.MySQLPipeline&quot;</span>: <span class="hljs-number">300</span>,<br>&#125;<br><br><span class="hljs-comment"># MySQL数据库配置</span><br>MYSQL_HOST = <span class="hljs-string">&quot;localhost&quot;</span><br>MYSQL_USER = <span class="hljs-string">&quot;root&quot;</span><br>MYSQL_PASSWORD = <span class="hljs-string">&quot;1234&quot;</span><br>MYSQL_DB = <span class="hljs-string">&quot;news&quot;</span><br><br><span class="hljs-comment"># 日志配置</span><br>LOG_FILE = <span class="hljs-string">&quot;scrapy.log&quot;</span><br>LOG_LEVEL = <span class="hljs-string">&quot;DEBUG&quot;</span><br>LOG_STDOUT = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 将日志输出到终端</span><br><br><span class="hljs-comment"># 爬虫行为配置</span><br>ROBOTSTXT_OBEY = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 遵守robots协议（开发测试时可设为False）</span><br>USER_AGENT = <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&quot;</span><br>DOWNLOAD_DELAY = <span class="hljs-number">1</span>  <span class="hljs-comment"># 下载延迟（秒），避免爬取过快</span><br></code></pre></td></tr></table></figure><h2 id="四运行与调试">四、运行与调试</h2><h3 id="启动爬虫">1. 启动爬虫</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 标准模式（数据存入数据库）</span><br>scrapy crawl people_news  <br><br><span class="hljs-comment"># JSON输出模式（数据保存至文件）</span><br>scrapy crawl people_news -o output.json -t json  <br></code></pre></td></tr></table></figure><h3 id="常见问题处理">2. 常见问题处理</h3><ul><li><p><strong>终端无输出</strong>：检查<code>settings.py</code>中<code>LOG_STDOUT</code>是否设为<code>True</code>，或通过<code>LOG_LEVEL</code>调整日志等级（如设为<code>INFO</code>）。</p></li><li><p>数据库连接失败</p><p>：</p><ol type="1"><li><p>确保 MySQL 服务已启动</p></li><li><p>检查<code>settings.py</code>中的数据库用户名、密码、库名是否正确</p></li><li><p>授权用户远程访问数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> news.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>数据解析失败</strong>：使用<code>scrapy shell "目标URL"</code>调试 CSS选择器，确保能正确提取数据。</p></li></ul><h2 id="五扩展建议">五、扩展建议</h2><ol type="1"><li><strong>反爬机制应对</strong>：<ul><li>添加随机请求头（<code>USER_AGENT</code>池）</li><li>启用代理 IP（通过<code>DOWNLOADER_MIDDLEWARES</code>配置）</li><li>增加重试机制（<code>RETRY_TIMES</code>）</li></ul></li><li><strong>分布式爬取</strong>：集成<code>Scrapy-Redis</code>实现分布式部署，提升爬取效率。</li><li><strong>数据清洗增强</strong>： 使用正则表达式去除正文冗余内容（如“本文来源：”前缀），或通过<code>BeautifulSoup</code>进一步解析富文本。</li><li><strong>性能优化</strong>：<ul><li>调整并发请求数（<code>CONCURRENT_REQUESTS</code>）</li><li>启用 DNS 缓存（<code>DNSCACHE_ENABLED = True</code>）</li></ul></li></ol><p>通过以上步骤，可快速搭建一个稳定的新闻爬虫系统，实现对人民网指定频道内容的定时抓取与结构化存储。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>scrapy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scrapy</tag>
      
      <tag>人民网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据存储题目</title>
    <link href="/2024/11/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/11/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>基础概念题</p><p>1.NoSQL 数据库有哪些常见的数据模型？ NoSQL数据库常见的数据模型有键值对模型、文档模型、列族模型和图模型。</p><p>2.简述键值存储型 NoSQL 数据库的工作原理。 键值存储型 NoSQL数据库的工作原理是将数据以键值对的形式存储，通过键来快速查找对应的值。键是唯一标识，值可以是任意数据类型。</p><p>3.文档数据库与键值存储数据库的主要区别是什么？文档数据库与键值存储数据库的主要区别在于文档数据库的值是结构化的文档，通常以JSON、XML等格式存储，可以包含复杂的层次结构和数据类型；而键值存储数据库的值通常是简单的数据类型或二进制对象。</p><p>4.列族存储型 NoSQL 数据库适合存储什么样的数据？ 列族存储型 NoSQL数据库适合存储大量稀疏数据，如日志数据、传感器数据等。它可以高效地存储和查询具有大量列但每行只有部分列有值的数据。</p><p>5.图数据库的主要应用场景有哪些？图数据库的主要应用场景包括社交网络分析、推荐系统、知识图谱等。它擅长处理复杂的关系数据，可以快速查询节点之间的关系。</p><p>6.NoSQL 数据库中的最终一致性是什么意思？ NoSQL数据库中的最终一致性是指在分布式系统中，数据的更新可能不会立即在所有节点上反映出来，但是经过一段时间后，系统会达到一致状态。</p><p>7.解释 NoSQL 数据库的高可扩展性具体体现在哪些方面？ NoSQL数据库的高可扩展性体现在可以通过增加节点来轻松扩展存储容量和处理能力，无需对数据库进行复杂的重构。不同类型的NoSQL数据库有不同的扩展方式，如分布式键值存储可以水平扩展，文档数据库可以通过分片来扩展。</p><p>8.说说 NoSQL 数据库如何处理海量数据的存储？ NoSQL数据库处理海量数据的存储通常采用分布式架构，将数据分散存储在多个节点上。同时，采用数据分区、压缩等技术来提高存储效率。一些NoSQL 数据库还支持自动扩展，根据数据量的增长动态调整存储资源。</p><p>9.NoSQL 数据库在数据安全性方面有哪些措施？ NoSQL数据库在数据安全性方面的措施包括访问控制、数据加密、备份和恢复等。访问控制可以限制用户对数据库的访问权限；数据加密可以保护数据的机密性；备份和恢复可以确保数据在出现故障时能够恢复。</p><p>10.比较 NoSQL 数据库和传统关系型数据库在数据完整性方面的差异。 NoSQL数据库和传统关系型数据库在数据完整性方面的差异在于，关系型数据库通常通过严格的模式定义和约束来保证数据的完整性，如主键约束、外键约束等；而NoSQL数据库更注重灵活性和可扩展性，对数据完整性的约束相对较少，更多地依赖应用程序来保证数据的正确性。</p><p>11.HBase 中的 Region 是什么概念？ Region 是 HBase中表的水平分区，随着表中数据的不断增长，当达到一定大小时，表会被自动分割成多个Region。每个 Region 包含一段连续的行键范围的数据，由一个 RegionServer负责管理。Region的作用是实现数据的分布式存储和负载均衡，提高数据的读写性能。</p><p>12.简述 HBase 的读写流程。 写流程：客户端发起写请求，首先连接到ZooKeeper 获取 HBase 集群的元数据信息，确定要写入的数据所在的RegionServer。然后将数据发送到对应的 RegionServer，RegionServer接收到数据后将其写入到预写日志（WAL）和内存中的 MemStore。当 MemStore中的数据达到一定大小后，会被刷写到磁盘上形成一个 StoreFile。读流程：客户端发起读请求，同样通过 ZooKeeper获取元数据信息，确定要读取的数据所在的 RegionServer。RegionServer根据行键查找对应的 Region，然后从内存中的 MemStore 和磁盘上的 StoreFile中读取数据并返回给客户端。</p><p>应用场景分析题</p><p>1.在一个实时数据分析的项目中，为什么可能会选择 NoSQL数据库？请说明理由。 在实时数据分析项目中选择 NoSQL 数据库的理由：NoSQL数据库通常具有高可扩展性和高写入性能，能够快速处理大量实时数据的写入和查询。它们可以轻松应对数据量的快速增长，并且支持分布式架构，便于在多台服务器上进行并行处理。此外，一些NoSQL 数据库还提供实时数据分析的功能，如流处理和聚合查询。</p><p>2.对于一个内容管理系统，分析使用 NoSQL数据库和关系型数据库各自的优势和劣势。 对于内容管理系统，使用 NoSQL数据库的优势包括：高可扩展性，能够轻松处理大量的内容数据；灵活的数据模型，适应不同类型的内容；快速写入性能，方便用户实时上传和更新内容。劣势可能是缺乏事务支持和复杂的查询功能，对于需要严格事务保证和复杂关系查询的场景可能不太适合。使用关系型数据库的优势在于提供强大的事务支持和复杂查询功能，适合处理结构化数据和需要严格数据一致性的场景。劣势是可扩展性相对较差，在处理大量数据时可能需要进行复杂的架构调整。</p><p>3.假设要开发一个物联网应用，从数据库选择的角度分析 NoSQL数据库的适用性。 在物联网应用中，NoSQL数据库的适用性：物联网应用通常产生大量的传感器数据，这些数据具有高吞吐量、半结构化或非结构化的特点。NoSQL数据库可以轻松处理这些海量数据，并且具有高可扩展性和高写入性能。例如，键值存储数据库可以快速存储传感器的读数，文档数据库可以存储传感器的配置信息和状态数据，列族存储数据库可以高效地存储时间序列数据。</p><p>4.在一个社交网络平台中，哪些功能模块可能更适合使用 NoSQL数据库？为什么？ 在社交网络平台中，可能更适合使用 NoSQL数据库的功能模块包括用户关系管理、消息队列、动态内容存储等。用户关系管理可以使用图数据库来高效地查询用户之间的关系；消息队列可以使用键值存储数据库或文档数据库来快速存储和读取消息；动态内容存储可以使用文档数据库来存储用户生成的内容，如帖子、评论等。这些功能模块通常需要高可扩展性和高写入性能，NoSQL数据库能够更好地满足这些需求。</p><p>性能优化题</p><p>1.对于一个大规模使用的文档数据库，有哪些方法可以提高写入性能？对于大规模使用的文档数据库，提高写入性能的方法包括：使用批量写入操作，减少单个写入的开销；合理设置索引，避免过多的索引影响写入性能；优化数据库的配置参数，如内存分配、写入缓冲区大小等；采用分布式架构，将写入负载分散到多个节点上。</p><p>2.在键值存储型 NoSQL 数据库中，如何优化查询性能？ 在键值存储型 NoSQL数据库中，优化查询性能的方法包括：使用合适的键设计，确保键能够快速定位到所需的值；利用缓存机制，缓存经常访问的数据；优化数据库的配置参数，如内存分配、缓存大小等；如果可能，使用分布式架构，并行处理查询请求。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>大数据存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在大数据、人工智能当下化工行业的产业升级</title>
    <link href="/2024/11/07/%E5%9C%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BD%93%E4%B8%8B%E5%8C%96%E5%B7%A5%E8%A1%8C%E4%B8%9A%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%8D%87%E7%BA%A7/"/>
    <url>/2024/11/07/%E5%9C%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%81%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BD%93%E4%B8%8B%E5%8C%96%E5%B7%A5%E8%A1%8C%E4%B8%9A%E7%9A%84%E4%BA%A7%E4%B8%9A%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h4id="在科技飞速发展的当下全球工业界正面临着一场技术转型革命本文将对比德国工业4.0下文简称4.0的产品转型论述吉林化工产业如何利用新兴技术推动产业升级">在科技飞速发展的当下，全球工业界正面临着一场技术转型革命。本文将对比德国工业4.0（下文简称“4.0”）的产品转型，论述吉林化工产业如何利用新兴技术推动产业升级。</h4><p>下面我们先来分析一下4.0的组成因素，由5点组成： -一个核心：互联网+制造业，将信息物理融合系统(CPS)广泛深入地应用于制造业，构建智能工厂、实现智能制造。-两个重点：领先的供应商策略，成为“智能生产”设备的主要供应者;主导的市场策略，设计并实施一套全面的知识和技术转化方案，引领市场发展。-三大集成：企业内部灵活目可重新组合的纵向集成，企业之间价值链的横向集成，全社会价值链的端到端工程数字化集成。-四个特征:生产可调节，可自我调节以应对不同形势;产品可识别，可以在任何时候把产品分辨出来;需求可变通，可以根据临时的需求变化而改变设计、构造、计划、生产和运作，并且仍有获利空间:四是过程可监测，可以实时针对商业模式全过程进行监测。-六项措施：实现技术标准化和开放标准的参考体系;建立复杂模型管理系统;建立一套综合的工业宽带基础设施;建立安全保障机制和规章制度;创新工作组织和设计方式;加强培训和持续职业教育。</p><p>在大数据、人工智能技术的当下，德国工业通过这些措施，不仅提升了生产效率，还带来了生产方式的根本性改变。</p><p>吉林市化工行业的现状与挑战： -技术水平相对滞后：目前，吉林市的化工生产主要依赖传统的制造方式，智能化和信息化的应用较为局限。-产业结构有待优化：许多企业的生产依然停留在低附加值的阶段，亟需提高技术水平和产品附加值。-生产效率不足：虽然企业的规模不断扩大，但生产效率和资源利用率依然有很大的提升空间。</p><p>综上可看出，科技飞速发展的当下，吉林市化工行业的产业亟需借助新技术，实现智能化、绿色化生产，并优化生产流程，提高效率和市场竞争力。</p><p>从4.0中汲取经验，结合大数据、人工智能等技术，我认为适合吉林化工产业升级的举措有以下几点：- 智能制造与信息化融合：德国工业4.0的核心之一是信息物理系统（CPS）。吉林市可以通过引入传感器、物联网技术、大数据等，将生产过程智能化。例如，利用RFID标签和传感器对化工产品的生产、存储和运输进行实时监控，将传统的人工管理转变为自动化、智能化的流程，减少人为错误，提高效率。- 生产过程的智能调节与监控：根据工业4.0的理念，生产过程应具备高度的可调节性和可监控性。吉林市化工企业可以通过人工智能和机器学习，对生产线进行实时数据分析，自动调整生产参数，确保产品质量稳定性，并根据市场需求变化灵活调整生产计划。- 大数据与物联网技术应用：在大数据和物联网技术的支持下，吉林市化工行业可以实现更加高效的仓储和供应链管理。通过实时监控库存状态、自动化调度库存位置等手段，可以大幅提高仓库空间的利用率，并减少库存积压，优化资金流转。同时，通过大数据分析，可以更精准地预测市场需求，优化生产计划，减少不必要的资源浪费。- 推动技术标准化与开放平台：吉林市化工行业应加强技术标准化建设，借鉴德国工业4.0的做法，推动行业内外的数据共享与技术协同。通过建立统一的数据接口和技术标准，不仅能促进企业之间的合作，还能推动整个行业的智能化进程。- 人才培养与技术更新：产业升级离不开人才的支持。吉林市化工行业应积极培养具备大数据分析、人工智能应用、智能制造等技能的人才。可以通过与高等院校合作，加强人才培训和职业教育，提升员工的技术水平和适应能力。同时，企业内部应持续推动技术创新和管理优化，提升企业整体的智能化水平。</p><p>吉林市化工行业的产业升级，并非一蹴而就，它需要结合当地的实际情况，逐步推进技术创新和管理变革。通过借鉴4.0的理念，结合大数据、人工智能等现代技术，吉林市的化工企业有望实现从传统生产到智能化工厂的转型。尽管当前存在一些技术和管理上的挑战，但随着信息化、智能化进程的推进，吉林市的化工行业将能够在激烈的市场竞争中占据有利位置，实现更高效、更环保、更智能的产业升级。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信的可用性分析论文</title>
    <link href="/2024/11/05/%E5%BE%AE%E4%BF%A1%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%E5%88%86%E6%9E%90%E8%AE%BA%E6%96%87/"/>
    <url>/2024/11/05/%E5%BE%AE%E4%BF%A1%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%E5%88%86%E6%9E%90%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h3 id="微信的可用性分析">微信的可用性分析</h3><p>可用性的概念在开始正文之前，我们先来了解一下，什么是人机交互系统中的“可用性”。定义：国际标准化组织(ISO9241-11)给出的可用性定义是指特定的用户在特定环境下使用产品并达到特定目标的效力、效率和满意的程度。可用性概念的内涵可以从五个方面去理解,这五个方面集中反映了用户对产品的需求,从它们的英文表示上被归纳为五个“E”。分别是： - 有效性(Effective):怎样准确、完整地完成工作或达到目标。 -效率(Efficient):怎样快速地完成工作。 -吸引力(Engaging):用户界面如何吸引用户进行交互并在使用中得到满意和满足。- 容错能力(Error Tolerant):产品避免错误的发生并帮助用户修正错误的能力。- 易于学习(Easy toLearn):支持用户对产品的入门使用及在以后使用过程中的持续学习。本文将共分以上五部分，对微信的可行性进行评估，每部分20分，总分100分。#### 有效性 微信可完成的工作分为4部分： 一、 社交沟通有效性：(1)即时通讯功能强大：微信支持文字、语音、图片、视频等多种形式的信息传递，满足不同场景下用户的沟通需求。无论你是在忙碌时快速发送文字消息，还是在不方便打字时使用语音聊天，亦或是需要更直观地展示场景时发送图片和视频，微信都能提供便捷的沟通方式。实时在线状态和消息推送确保你不会错过任何重要信息，与亲朋好友、同事客户保持紧密联系。(2)社交圈子广泛：可以通过手机号、微信号、二维码等多种方式添加好友，轻松扩大社交圈子。同时，微信还支持建立群组，方便家人、朋友、同事等不同群体之间的交流和互动。公众号和小程序的存在进一步拓展了社交范围，用户可以关注感兴趣的公众号获取资讯，参与小程序中的社交活动，增加社交机会。二、 工作协作有效性(1)办公功能实用：微信提供了文件传输、语音通话、视频会议等功能，方便工作中的沟通和协作。特别是在远程办公日益普及的今天，微信的这些功能为团队协作提供了有力支持。企业微信更是针对企业用户进行了专门优化，提供了更强大的管理和协作功能，如考勤打卡、审批流程、日程安排等。(2)信息传递高效：可以通过微信群组快速传达工作任务和信息，避免了传统邮件沟通的繁琐和延迟。同时，微信的消息提醒功能也能确保员工及时收到重要通知。三、 生活服务有效性(1)便捷的支付功能:微信支付方便快捷，支持多种支付场景，如购物、餐饮、出行等。用户只需扫描二维码或使用指纹识别等方式即可完成支付，无需携带现金或银行卡。微信支付还提供了账单查询、理财等功能，方便用户管理个人财务。(2)丰富的生活服务:微信中的小程序涵盖了各种生活服务，如外卖点餐、酒店预订、电影票购买、打车服务等。用户可以在微信中一站式解决生活中的各种需求。城市服务功能则提供了政务服务、社保查询、交通违章查询等便民服务，让生活更加便捷。四、 营销推广有效性（1）公众号营销:企业和个人可以通过微信公众号进行品牌推广、产品宣传和客户服务。公众号文章、图文消息、视频等形式多样的内容可以吸引用户关注，提高品牌知名度。微信公众号还支持粉丝互动、留言评论等功能，增强用户粘性和参与度（2）小程序营销:小程序可以作为企业的线上门店，展示产品和服务，提供在线购买和预订功能。通过微信的社交传播，小程序可以快速获得流量和用户。小程序还可以通过优惠券、秒杀、拼团等营销活动吸引用户，提高销售转化率。综上所述，微信在社交沟通、工作协作、生活服务和营销推广等方面都具有很高的有效性，成为人们日常生活中不可或缺的一部分。因此在有效性方面得分：20分。#### 效率 微信在效率方面可分为以下3部分： 一、沟通效率(1)即时通讯高效便捷：微信的消息实时推送功能确保信息能够第一时间传达给接收者。无论是文字、语音还是图片、视频消息，都能迅速发送和接收，极大地提高了沟通的速度。例如，在讨论工作问题时，无需等待邮件的发送和接收过程，直接通过微信即可快速交流意见，快速做出决策。(2)群组沟通协同工作：工作群组的建立使得团队成员之间可以方便地共享信息、讨论问题和分配任务。在群组中，大家可以同时参与讨论，快速达成共识，提高工作效率。例如，一个项目组可以通过微信群组及时沟通项目进展情况，协调工作安排，避免信息不对称和重复劳动。二、办公效率(1)办公工具集成度高:微信中的文件传输功能允许用户快速发送和接收各种类型的文件，包括文档、图片、音频和视频等。无论是在办公室还是在外出差，都可以轻松地进行文件交换，提高工作效率。语音转文字功能对于不方便打字的时候非常实用，可以快速将语音消息转换为文字，提高信息输入的速度。同时，微信还支持翻译功能，方便与不同语言的用户进行沟通。收藏功能可以让用户将重要的信息、文件和链接保存起来，方便随时查阅和使用。这对于需要经常参考某些资料的工作场景非常有帮助。(2)小程序助力办公自动化:众多的办公小程序为用户提供了丰富的办公工具和服务。例如，文档编辑小程序可以让用户在手机上进行文档的创建、编辑和分享；任务管理小程序可以帮助用户规划和跟踪工作任务；考勤打卡小程序方便企业进行员工考勤管理等。这些小程序的使用可以大大提高办公效率，实现办公自动化。三、 营销效率(1)公众号营销精准高效:公众号的数据分析功能可以帮助企业了解用户需求和行为，从而优化营销策略，提高营销效率。例如，通过分析用户的阅读量、点赞数、评论等数据，可以了解哪些内容更受用户欢迎，从而调整内容创作方向。(2)微信的社交传播特性使得小程序可以快速触达大量用户。用户可以通过分享小程序给好友、微信群等方式，扩大小程序的影响力，提高营销效率。综上所述，微信通过高效的沟通、便捷的办公工具和强大的营销功能，为用户提供了快速完成工作的有效途径，极大地提高了工作效率。但是，由于部分办公小程序内嵌广告或加载广告的因素导致降低效率，降低兼容性，友好性，因此在有效性方面得分：17分。#### 吸引力 微信在吸引力方面表现出色，主要体现在以下3个方面：一、简洁直观的用户界面(1)布局清晰：微信的界面设计简洁大方，各个功能模块布局合理。主界面上的聊天列表、通讯录、发现和我四个板块一目了然，用户可以轻松找到所需的功能入口。聊天窗口简洁明了，显示聊天记录和输入框，没有过多的繁杂元素干扰，让用户能够专注于交流。(2)图标易懂：微信中的图标设计简洁直观，易于理解。例如，通讯录中的联系人图标、发现页面的朋友圈图标、支付图标等，都能够让用户一眼看出其代表的功能，无需费力猜测。二、丰富多样的交互方式(1)文字、语音、图片、视频等多种交流形式：微信支持多种形式的信息传递，满足不同用户的交流需求。用户可以根据实际情况选择最方便的交流方式，增加了交互的趣味性和灵活性。语音聊天和视频聊天功能让用户能够更加直观地进行交流，增强了沟通的效果和吸引力。(2)表情、红包、动态表情包等互动元素：微信中的丰富表情和动态表情包为用户的交流增添了乐趣。用户可以通过发送表情来表达自己的情感和态度，使交流更加生动有趣。红包功能也是微信的一大特色，无论是在节日祝福、朋友聚会还是工作群中，红包都能增加互动的趣味性和吸引力。(3)朋友圈、公众号等社交互动平台：朋友圈是用户分享生活点滴、展示自我的重要平台。用户可以通过发布文字、图片、视频等内容，与好友进行互动和交流，增强了社交的吸引力。公众号为用户提供了丰富的资讯和服务，用户可以关注自己感兴趣的公众号，获取有价值的内容，并通过留言、点赞等方式与公众号运营者进行互动。三、个性化的设置和体验(1)主题皮肤、聊天背景等个性化选项：微信提供了多种主题皮肤（第三方）和聊天背景供用户选择，用户可以根据自己的喜好进行设置，打造属于自己的个性化微信界面。这种个性化的设置能够让用户在使用微信时感到更加舒适和满意，增加了用户对微信的喜爱度和忠诚度。(2)消息提醒、隐私设置等个性化功能：微信的消息提醒功能可以让用户根据自己的需求进行设置，避免被过多的消息打扰。同时，隐私设置功能也能够保护用户的个人信息安全，让用户在使用微信时更加放心。这些个性化的功能能够满足不同用户的需求，提高用户的使用体验和满意度。综上所述，微信通过简洁直观的用户界面、丰富多样的交互方式和个性化的设置和体验，吸引用户进行交互，并在使用中得到满意和满足。因此在吸引力方面得分：20分。#### 容错能力 以下是对微信容错能力的分析，分为优缺点： 一、优点(1)消息撤回功能：允许用户在一定时间内撤回已发送的消息，这在发送错误内容、错别字或者不恰当的表达时非常有用，可以避免尴尬和误解。例如在工作群中误发了错误的信息，可以及时撤回并重新发送正确的内容。一定程度上减轻了用户因一时疏忽而产生的不良后果，提高了沟通的准确性和流畅性。(2)网络异常处理：当网络出现问题时，微信会及时提示用户，并尝试自动重连。在网络不稳定的情况下，微信会缓存未发送成功的消息，待网络恢复后自动发送，确保信息不会丢失。例如在乘坐地铁等网络信号不好的地方，用户不必担心消息发送失败，提高了使用的可靠性。(3)操作提示明确：在进行一些关键操作时，如删除聊天记录、退出群组等，微信会弹出明确的提示框，让用户确认操作，避免误操作。例如在删除重要的聊天记录前，提示用户谨慎操作，防止因误触而导致数据丢失。二、缺点(1)撤回时间有限：微信消息撤回的时间限制相对较短，只有两分钟。在某些情况下，用户可能在两分钟后才发现错误，此时无法撤回消息，可能会造成一些不良影响。比如在发送了重要的工作信息后，过了一段时间才发现有错误，但已经无法撤回修正。(2)部分操作不可逆：一些操作一旦执行就无法恢复，如删除好友。如果用户误删了好友，需要重新搜索添加，过程较为繁琐。而且在删除好友时，没有更多的确认步骤或恢复途径，容易给用户带来不便。综上所述，微信在消息撤回、网络异常处理和操作提示等方面表现较为出色，为用户提供了一定的容错保障。但是，撤回时间有限、部分操作不可逆等问题也在一定程度上影响了其容错能力的进一步提升。因此在容错能力方面得分，12分。#### 易于学习 以下是对微信易于学习方面的分析，分为优缺点： 一、优点(1)简洁直观的界面设计：微信的界面布局清晰，功能模块划分明确。主界面上的聊天列表、通讯录、发现和我四个板块一目了然，用户可以轻松找到所需的功能入口。例如，新用户在打开微信后，很容易就能识别出聊天、添加好友等常用功能的位置，降低了入门难度。(2)引导式操作流程：在用户首次使用微信时，会有一些简单的引导提示，帮助用户了解基本的操作方法，如注册账号、添加好友等。当用户进行一些特定操作时，也会有相应的提示和引导，例如发送红包时会有明确的步骤说明，让用户能够快速上手。(3)广泛的用户基础和社交传播：由于微信的用户群体非常庞大，新用户可以通过身边的朋友、家人等快速学习和了解微信的使用方法。用户之间的交流和分享也有助于新用户更快地掌握微信的各种功能，例如看到别人在朋友圈分享的内容，就可以学习到如何发布朋友圈等。二、缺点(1)功能繁多且部分功能隐藏较深：随着微信功能的不断扩展，一些功能可能隐藏在较深的层级中，新用户可能不容易发现。例如微信支付中的一些生活缴费功能，需要经过多个步骤才能找到。对于一些不常用功能的查找和学习可能会给用户带来一定的困扰。(2)部分功能操作较为复杂：虽然微信的大部分功能操作比较简单，但也有一些功能的操作相对复杂，例如公众号的运营管理、小程序的开发等。这些功能对于普通用户来说，学习成本较高，可能需要花费较多的时间和精力去了解和掌握。综上所述，微信在简洁直观的界面设计、引导式操作流程和广泛的用户基础等方面表现出色，为用户提供了良好的入门学习体验和持续学习的支持。但是，功能繁多且部分功能隐藏较深以及部分功能操作复杂等问题也在一定程度上影响了其易于学习的程度。因此在易于学习方面得分：16分。#### 总结综上所述，通过对微信在有效性、效率、吸引力、容错能力和易于学习五个方面的分析，我们可以看出，微信作为一款广泛使用的社交和生活服务应用，在多方面都展现出卓越的可用性。它能够满足用户在沟通、办公、生活服务以及营销推广等多种场景中的需求，并通过持续优化和丰富功能，不断提升用户体验。然而，微信在容错能力和易于学习方面仍有一定改进空间，特别是在撤回时间限制和部分功能的隐藏深度方面。总体而言，微信凭借其高效、便捷的功能和用户友好的设计，成为了现代生活中不可或缺的一部分，展现了强大的可用性价值。对于微信的可用性最终得分：85分。</p>]]></content>
    
    
    <categories>
      
      <category>人机交互</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人机交互</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵笔记</title>
    <link href="/2024/11/04/%E7%9F%A9%E9%98%B5%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/11/04/%E7%9F%A9%E9%98%B5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure><img src="264223653.jpg" alt="1.jpg" /><figcaption aria-hidden="true">1.jpg</figcaption></figure><figure><img src="3658348953.jpg" alt="2.jpg" /><figcaption aria-hidden="true">2.jpg</figcaption></figure><figure><img src="1982764147.jpg" alt="3.jpg" /><figcaption aria-hidden="true">3.jpg</figcaption></figure><figure><img src="1909162252.jpg" alt="4.jpg" /><figcaption aria-hidden="true">4.jpg</figcaption></figure><figure><img src="1077174605.jpg" alt="5.jpg" /><figcaption aria-hidden="true">5.jpg</figcaption></figure><figure><img src="4237211923.jpg" alt="6.jpg" /><figcaption aria-hidden="true">6.jpg</figcaption></figure><figure><img src="4166427484.jpg" alt="7.jpg" /><figcaption aria-hidden="true">7.jpg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用例之间的扩展关系（extend）</title>
    <link href="/2024/10/29/%E7%94%A8%E4%BE%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E6%89%A9%E5%B1%95%E5%85%B3%E7%B3%BB%EF%BC%88extend%EF%BC%89/"/>
    <url>/2024/10/29/%E7%94%A8%E4%BE%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E6%89%A9%E5%B1%95%E5%85%B3%E7%B3%BB%EF%BC%88extend%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>基用例与扩展用例是互斥关系</p>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行列式笔记</title>
    <link href="/2024/10/27/%E8%A1%8C%E5%88%97%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/27/%E8%A1%8C%E5%88%97%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure><img src="3203657541.jpg" alt="1.jpg" /><figcaption aria-hidden="true">1.jpg</figcaption></figure><figure><img src="2226445047.jpg" alt="2.jpg" /><figcaption aria-hidden="true">2.jpg</figcaption></figure><figure><img src="1883595905.jpg" alt="3.jpg" /><figcaption aria-hidden="true">3.jpg</figcaption></figure><figure><img src="355354954.jpg" alt="4.jpg" /><figcaption aria-hidden="true">4.jpg</figcaption></figure><figure><img src="1694028862.jpg" alt="5.jpg" /><figcaption aria-hidden="true">5.jpg</figcaption></figure><figure><img src="2344289680.jpg" alt="6.jpg" /><figcaption aria-hidden="true">6.jpg</figcaption></figure><figure><img src="2194887148.jpg" alt="7.jpg" /><figcaption aria-hidden="true">7.jpg</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>行列式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
      <tag>行列式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关系表</title>
    <link href="/2024/10/24/%E5%85%B3%E7%B3%BB%E8%A1%A8/"/>
    <url>/2024/10/24/%E5%85%B3%E7%B3%BB%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure><img src="4000766839.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="327326502-1747725423243-14.jpg" alt="327326502" /><figcaption aria-hidden="true">327326502</figcaption></figure><figure><img src="image-20250520151731720.png" alt="image-20250520151731720" /><figcaption aria-hidden="true">image-20250520151731720</figcaption></figure><figure><img src="image-20250520151755949.png" alt="image-20250520151755949" /><figcaption aria-hidden="true">image-20250520151755949</figcaption></figure><figure><img src="2538689556-1747725547268-26.jpg" alt="2538689556" /><figcaption aria-hidden="true">2538689556</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程同步与信号机制</title>
    <link href="/2024/10/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/10/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1id="操作系统进程控制实验fork-与进程间通信">操作系统进程控制实验：fork与进程间通信</h1><h2 id="一实验一fork-创建多个进程标准输出加锁">一、实验一：fork创建多个进程（标准输出加锁）</h2><h3 id="代码实现">代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> p1, p2, i;<br>    <span class="hljs-comment">// 创建子进程p1</span><br>    <span class="hljs-keyword">while</span> ((p1 = fork()) == <span class="hljs-number">-1</span>);       <br>    <span class="hljs-keyword">if</span> (p1 == <span class="hljs-number">0</span>) &#123;<br>        lockf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);          <span class="hljs-comment">// 锁定标准输出（描述符1）</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;daughter %d\n&quot;</span>, i);<br>        lockf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);          <span class="hljs-comment">// 解锁</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 创建子进程p2</span><br>        <span class="hljs-keyword">while</span> ((p2 = fork()) == <span class="hljs-number">-1</span>);  <br>        <span class="hljs-keyword">if</span> (p2 == <span class="hljs-number">0</span>) &#123;<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;son %d\n&quot;</span>, i);<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">// 解锁</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);         <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; parent %d\n&quot;</span>, i);<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);         <span class="hljs-comment">// 解锁</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果">运行结果</h3><figure><img src="1243138675-1747725188684-10.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="结果分析">结果分析：</h4><ul><li><strong>进程关系</strong>：父进程创建子进程<code>p1</code>（daughter）和<code>p2</code>（son）。</li><li><strong>加锁机制</strong>：通过<code>lockf(1, 1, 0)</code>锁定标准输出，确保各进程输出不交叉，顺序为：<code>daughter 0-9</code> → <code>son 0-9</code> →<code>parent 0-9</code>（因父进程在子进程之后执行）。</li></ul><h2 id="二实验二fork-与文件加锁写入文件">二、实验二：fork与文件加锁（写入文件）</h2><h3 id="代码实现-1">代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> p1, p2, i;<br>    FILE *fp;<br>    fp = fopen(<span class="hljs-string">&quot;to_be_locked.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>); <span class="hljs-comment">// 打开文件</span><br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fail to create file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 创建子进程p1</span><br>    <span class="hljs-keyword">while</span> ((p1 = fork()) == <span class="hljs-number">-1</span>); <br>    <span class="hljs-keyword">if</span> (p1 == <span class="hljs-number">0</span>) &#123;<br>        lockf(fileno(fp), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">// 锁定文件描述符</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>            <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;daughter %d\n&quot;</span>, i);<br>        lockf(fileno(fp), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">// 解锁</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 创建子进程p2</span><br>        <span class="hljs-keyword">while</span> ((p2 = fork()) == <span class="hljs-number">-1</span>); <br>        <span class="hljs-keyword">if</span> (p2 == <span class="hljs-number">0</span>) &#123;<br>            lockf(fileno(fp), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;son %d\n&quot;</span>, i);<br>            lockf(fileno(fp), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 解锁</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            wait(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 等待子进程完成</span><br>            lockf(fileno(fp), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;parent %d\n&quot;</span>, i);<br>            lockf(fileno(fp), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 解锁</span><br>        &#125;<br>    &#125;<br>    fclose(fp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-1">运行结果</h3><figure><img src="1142579660-1747725177602-7.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="结果分析-1">结果分析：</h4><ul><li><strong>文件加锁</strong>：通过<code>lockf(fileno(fp), 1, 0)</code>锁定文件，确保写入顺序为：<code>son 0-9</code> → <code>daughter 0-9</code> →<code>parent 0-9</code>（父进程通过<code>wait(NULL)</code>等待子进程完成后执行）。</li><li><strong>与实验一差异</strong>：输出顺序不同，因子进程<code>p1</code>和<code>p2</code>的执行顺序由调度器决定，体现进程并发特性。</li></ul><h2id="三实验三进程信号处理kill-与-signal">三、实验三：进程信号处理（kill与 signal）</h2><h3 id="代码实现-2">代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">waiting</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 等待函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;      <span class="hljs-comment">// 信号处理函数</span><br><span class="hljs-type">int</span> wait_mark;    <span class="hljs-comment">// 等待标志</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> p1, p2;<br>    <span class="hljs-comment">// 创建子进程p1</span><br>    <span class="hljs-keyword">while</span> ((p1 = fork()) == <span class="hljs-number">-1</span>);       <br>    <span class="hljs-keyword">if</span> (p1 &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 创建子进程p2</span><br>        <span class="hljs-keyword">while</span> ((p2 = fork()) == <span class="hljs-number">-1</span>);     <br>        <span class="hljs-keyword">if</span> (p2 &gt; <span class="hljs-number">0</span>) &#123;<br>            wait_mark = <span class="hljs-number">1</span>;<br>            signal(SIGINT, stop);   <span class="hljs-comment">// 捕获Ctrl+C信号</span><br>            waiting();              <span class="hljs-comment">// 等待子进程响应信号</span><br>            kill(p1, <span class="hljs-number">16</span>);           <span class="hljs-comment">// 向p1发送自定义信号16</span><br>            kill(p2, <span class="hljs-number">17</span>);           <span class="hljs-comment">// 向p2发送自定义信号17</span><br>            wait(<span class="hljs-number">0</span>); wait(<span class="hljs-number">0</span>);       <span class="hljs-comment">// 等待子进程退出</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent process is killed!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            wait_mark = <span class="hljs-number">1</span>;<br>            signal(<span class="hljs-number">17</span>, stop);       <span class="hljs-comment">// 捕获信号17</span><br>            signal(SIGINT, SIG_IGN); <span class="hljs-comment">// 忽略Ctrl+C</span><br>            waiting();<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child process 2 is killed by parent!\n&quot;</span>);<br>            lockf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        wait_mark = <span class="hljs-number">1</span>;<br>        signal(<span class="hljs-number">16</span>, stop);       <span class="hljs-comment">// 捕获信号16</span><br>        signal(SIGINT, SIG_IGN); <span class="hljs-comment">// 忽略Ctrl+C</span><br>        waiting();<br>        lockf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child process 1 is killed by parent!\n&quot;</span>);<br>        lockf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">waiting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (wait_mark != <span class="hljs-number">0</span>); <span class="hljs-comment">// 循环等待信号</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>    wait_mark = <span class="hljs-number">0</span>; <span class="hljs-comment">// 接收到信号后修改标志</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果-2">运行结果</h3><figure><img src="996771971-1747725160618-4.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="结果分析-2">结果分析：</h4><ul><li><p>信号机制</p><p>：</p><ul><li>父进程通过<code>kill(p1, 16)</code>和<code>kill(p2, 17)</code>向子进程发送自定义信号。</li><li>子进程通过<code>signal(16, stop)</code>和<code>signal(17, stop)</code>注册信号处理函数，接收到信号后修改<code>wait_mark</code>，结束等待循环。</li></ul></li><li><p>输出顺序</p><p>：</p><ol type="1"><li>用户按下<code>Ctrl+C</code>（SIGINT），父进程捕获后触发<code>stop()</code>，向子进程发送信号。</li><li>子进程接收到信号后输出提示并退出，最后父进程输出<code>Parent process is killed!</code>。</li></ol></li></ul><h2 id="四关键知识点总结">四、关键知识点总结</h2><ol type="1"><li><strong>fork () 函数</strong>：<ul><li>创建子进程，返回值为<code>0</code>（子进程）或子进程PID（父进程），失败返回<code>-1</code>。</li><li>子进程复制父进程的地址空间，两者并发执行。</li></ul></li><li><strong>进程同步与加锁</strong>：<ul><li><code>lockf(fd, mode, size)</code>用于锁定文件或标准输出，避免多个进程同时写入导致内容混乱。</li><li><code>mode=1</code>为加锁，<code>mode=0</code>为解锁，<code>size</code>为锁定字节数（<code>0</code>表示锁定整个文件）。</li></ul></li><li><strong>信号处理</strong>：<ul><li><code>signal(sig, handler)</code>注册信号处理函数，如<code>SIGINT</code>（Ctrl+C）、自定义信号（如<code>16</code>、<code>17</code>）。</li><li><code>kill(pid, sig)</code>向进程发送信号，用于进程间通信和控制。</li></ul></li><li><strong>wait () 函数</strong>：<ul><li>父进程通过<code>wait(NULL)</code>等待子进程结束，回收僵尸进程资源。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关联关系</title>
    <link href="/2024/10/22/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/10/22/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>组合生命周期一样，整体侧是实体菱形◆聚合生命周期不一样，整体侧是空心菱形♢</p><p>多对多的关系，在 oo里无法实现，可以转换成一个聚合和一个组合关系，中间一个关联类</p>]]></content>
    
    
    <categories>
      
      <category>UML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Java操作HBase</title>
    <link href="/2024/10/20/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase/"/>
    <url>/2024/10/20/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase/</url>
    
    <content type="html"><![CDATA[<h2 id="开启-hadoop-和-hbase">开启 Hadoop 和 HBase</h2><p>点击测评前，请先执行以下操作：</p><ol type="1"><li><p>启动 Hadoop：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">start-dfs.sh  <br></code></pre></td></tr></table></figure></li><li><p>启动 HBase：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">start-hbase.sh  <br></code></pre></td></tr></table></figure><p>注意</p><p>：需等待 HBase 初始化完成（约 20 秒），否则无法创建表。</p></li></ol><h3 id="验证-hbase-初始化状态">验证 HBase 初始化状态</h3><p>输入以下命令查看 HBase 根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hadoop fs -<span class="hljs-built_in">ls</span> /hbase  <br></code></pre></td></tr></table></figure><p>若显示相关文件或目录（如<code>.tmp</code>、<code>master</code>等），则表示初始化成功。</p><h2 id="连接-hbase">连接 HBase</h2><h3 id="配置对象创建">配置对象创建</h3><p>通过<code>HBaseConfiguration</code>读取配置文件（<code>hbase-site.xml</code>和<code>hbase-default.xml</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Connection;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;  <br><br><span class="hljs-comment">// 创建配置对象  </span><br><span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> HBaseConfiguration.create();  <br><span class="hljs-comment">// 创建连接对象  </span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> ConnectionFactory.createConnection(config);  <br></code></pre></td></tr></table></figure><h2 id="创建表">创建表</h2><h3 id="版本写法">1.0 版本写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.TableName;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Admin;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.HColumnDescriptor;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.HTableDescriptor;  <br><br><span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> connection.getAdmin();  <br><span class="hljs-type">TableName</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>);  <br><span class="hljs-type">HTableDescriptor</span> <span class="hljs-variable">htd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTableDescriptor</span>(tableName);  <br><span class="hljs-type">HColumnDescriptor</span> <span class="hljs-variable">hcd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HColumnDescriptor</span>(<span class="hljs-string">&quot;data&quot;</span>); <span class="hljs-comment">// 列族名为&quot;data&quot;  </span><br>htd.addFamily(hcd);  <br>admin.createTable(htd);  <br>admin.close();  <br>connection.close();  <br></code></pre></td></tr></table></figure><h3 id="x-版本写法推荐">2.X 版本写法（推荐）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.TableName;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Admin;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.TableName;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.TableDescriptorBuilder;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;  <br><br><span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> connection.getAdmin();  <br><span class="hljs-type">TableName</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>);  <br><span class="hljs-comment">// 构建表描述符  </span><br><span class="hljs-type">TableDescriptorBuilder</span> <span class="hljs-variable">tableDescriptor</span> <span class="hljs-operator">=</span> TableDescriptorBuilder.newBuilder(tableName);  <br><span class="hljs-comment">// 构建列族（列族名为&quot;data&quot;）  </span><br><span class="hljs-type">ColumnFamilyDescriptor</span> <span class="hljs-variable">family</span> <span class="hljs-operator">=</span> ColumnFamilyDescriptorBuilder  <br>    .newBuilder(Bytes.toBytes(<span class="hljs-string">&quot;data&quot;</span>))  <br>    .build();  <br>tableDescriptor.setColumnFamily(family);  <br>admin.createTable(tableDescriptor.build());  <br>admin.close();  <br>connection.close();  <br></code></pre></td></tr></table></figure><h2 id="添加数据">添加数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.TableName;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Table;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Put;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.util.Bytes;  <br><br><span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> connection.getTable(TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>));  <br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-comment">// 插入第一条数据  </span><br>    <span class="hljs-type">Put</span> <span class="hljs-variable">put</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Put</span>(Bytes.toBytes(<span class="hljs-string">&quot;row1&quot;</span>));  <br>    put.addColumn(  <br>        Bytes.toBytes(<span class="hljs-string">&quot;data&quot;</span>),   <span class="hljs-comment">// 列族  </span><br>        Bytes.toBytes(<span class="hljs-string">&quot;1&quot;</span>),      <span class="hljs-comment">// 列修饰符  </span><br>        Bytes.toBytes(<span class="hljs-string">&quot;张三丰&quot;</span>)  <span class="hljs-comment">// 值  </span><br>    );  <br>    table.put(put);  <br><br>    <span class="hljs-comment">// 插入第二条数据  </span><br>    <span class="hljs-type">Put</span> <span class="hljs-variable">put2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Put</span>(Bytes.toBytes(<span class="hljs-string">&quot;row2&quot;</span>));  <br>    put2.addColumn(  <br>        Bytes.toBytes(<span class="hljs-string">&quot;data&quot;</span>),  <br>        Bytes.toBytes(<span class="hljs-string">&quot;2&quot;</span>),  <br>        Bytes.toBytes(<span class="hljs-string">&quot;张无忌&quot;</span>)  <br>    );  <br>    table.put(put2);  <br>&#125; <span class="hljs-keyword">finally</span> &#123;  <br>    <span class="hljs-comment">// 释放资源  </span><br>    table.close();  <br>    connection.close();  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="查询数据">查询数据</h2><h3 id="查询单条数据">查询单条数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Get;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Result;  <br><br><span class="hljs-type">TableName</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>);  <br><span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> connection.getTable(tableName);  <br><span class="hljs-type">Get</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Get</span>(Bytes.toBytes(<span class="hljs-string">&quot;row1&quot;</span>));  <br><span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> table.get(get);  <br><br><span class="hljs-comment">// 获取指定列族和列修饰符的值  </span><br><span class="hljs-type">byte</span>[] valueBytes = result.getValue(  <br>    Bytes.toBytes(<span class="hljs-string">&quot;data&quot;</span>),  <br>    Bytes.toBytes(<span class="hljs-string">&quot;1&quot;</span>)  <br>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">valueStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(valueBytes, <span class="hljs-string">&quot;utf-8&quot;</span>);  <br>System.out.println(<span class="hljs-string">&quot;value: &quot;</span> + valueStr); <span class="hljs-comment">// 输出：value: 张三丰  </span><br></code></pre></td></tr></table></figure><h3 id="批量扫描数据">批量扫描数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Scan;  <br><span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.ResultScanner;  <br><br>tableName = TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>);  <br>table = connection.getTable(tableName);  <br><span class="hljs-type">Scan</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scan</span>();  <br><span class="hljs-type">ResultScanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> table.getScanner(scan);  <br><br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-keyword">for</span> (Result scannerResult : scanner) &#123;  <br>        <span class="hljs-type">byte</span>[] row = scannerResult.getRow();  <br>        System.out.println(<span class="hljs-string">&quot;rowName: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(row, <span class="hljs-string">&quot;utf-8&quot;</span>));  <br>        <span class="hljs-comment">// 可进一步解析列数据...  </span><br>    &#125;  <br>&#125; <span class="hljs-keyword">finally</span> &#123;  <br>    scanner.close(); <span class="hljs-comment">// 释放扫描器资源  </span><br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="删除表">删除表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> connection.getAdmin();  <br><span class="hljs-type">TableName</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> TableName.valueOf(<span class="hljs-string">&quot;test&quot;</span>);  <br><br><span class="hljs-comment">// 禁用表（删除前必须先禁用）  </span><br>admin.disableTable(tableName);  <br><span class="hljs-comment">// 删除表  </span><br>admin.deleteTable(tableName);  <br><br>admin.close();  <br>connection.close();  <br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>HBase表名、列族名、列修饰符均为字节数组，建议通过<code>Bytes.toBytes()</code>处理字符串。</li><li>操作完成后务必关闭<code>Connection</code>、<code>Table</code>、<code>Admin</code>等资源，避免内存泄漏。</li><li>删除表前需先调用<code>disableTable()</code>，否则会抛出异常。</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>HBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏会杀死一个人</title>
    <link href="/2024/10/13/%E6%B8%B8%E6%88%8F%E4%BC%9A%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E4%BA%BA/"/>
    <url>/2024/10/13/%E6%B8%B8%E6%88%8F%E4%BC%9A%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>游戏拿来在列车上消磨时间是合理的，如果相反破坏了生活，无异于慢性自杀，游戏会杀死记忆，最后一片空白。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生活情绪那么简单又那么难</title>
    <link href="/2024/10/13/%E7%94%9F%E6%B4%BB%E6%83%85%E7%BB%AA%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95%E5%8F%88%E9%82%A3%E4%B9%88%E9%9A%BE/"/>
    <url>/2024/10/13/%E7%94%9F%E6%B4%BB%E6%83%85%E7%BB%AA%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95%E5%8F%88%E9%82%A3%E4%B9%88%E9%9A%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="心情会好起来满满都是动力">心情会好起来，满满都是动力</h3><p>情绪低沉的时候想到买的快递快到了，心情会好起来或者备案的事情步入进程，心情会好起来或者下周遇到擅长可得到认可的事情，心情会好起来 ###考研还有一年多，我知道必须要考上 但是，却是得过且过。知道，面对生活不是无知的，那么心情会好。知道，面对生活是无知的，那么心情可能会好。但，迷迷糊糊的状态，才是最折磨的，那也就是所谓的得过且过，妄自菲薄。 ###总觉得一切都是安排的那么恰当，那么巧合生活能到目前的每一步，都不是巧合，有着契机，但就是那些契机，感觉又是巧合。这是很奇妙的一件事情。</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>废话文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小说爬取</title>
    <link href="/2024/10/13/%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96/"/>
    <url>/2024/10/13/%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1id="网页小说爬取与转换工具从-html-到-markdown-的自动化解决方案">网页小说爬取与转换工具：从HTML 到 Markdown 的自动化解决方案</h1><h2 id="一项目概述">一、项目概述</h2><p>本项目是一个用于爬取并格式化网页小说的 Python脚本，它能够自动抓取小说内容并将其转换为 Markdown格式，方便用户离线阅读和整理。脚本采用了多线程技术来加速下载过程，同时处理了特殊字符编码和分页问题，确保生成的Markdown 文件内容完整且格式规范。</p><p>主要功能包括：</p><ul><li>自动获取小说目录和各章节链接</li><li>处理网页中的特殊字符和图标</li><li>支持多线程并行下载多个章节</li><li>自动检测并合并分页内容</li><li>生成格式良好的 Markdown 文件</li></ul><h2 id="二核心功能模块">二、核心功能模块</h2><h3 id="网页内容获取与解析">1. 网页内容获取与解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_html_text</span>(<span class="hljs-params">url</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;cookie&#x27;</span>: <span class="hljs-string">&#x27;jq_Obj=1; ff54ff0fa0f557568e6e69d35b815894=fcad32351f41e0bacbc3c4dc74b2a721; zh_choose=n; _ga=GA1.1.234751423.1728474308; _ga_YN9485YEKE=GS1.1.1728535222.6.1.1728536491.0.0.0&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        r = requests.get(url, headers=headers)<br>        r.encoding = r.apparent_encoding  <span class="hljs-comment"># 将响应对象的编码设置为通过分析响应内容推断出的编码,较为准确</span><br>        <span class="hljs-keyword">return</span> r.text<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这个函数负责发送 HTTP请求获取网页内容，并自动检测和设置正确的编码，确保中文内容能正常显示。</p><h3 id="目录处理与-url-管理">2. 目录处理与 URL 管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_and_save_urls</span>(<span class="hljs-params">url</span>):<br>    html = get_html_text(url)<br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    ul_tag = soup.find(<span class="hljs-string">&#x27;ul&#x27;</span>, class_=<span class="hljs-string">&#x27;chaw_c&#x27;</span>)<br>    a_all = ul_tag.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    urls = []<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> a_all:<br>        a_url = a.get(<span class="hljs-string">&#x27;href&#x27;</span>)<br>        a_title = a.text<br>        urls.append(&#123;a_title: a_url&#125;)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;urls.yaml&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        yaml.safe_dump(urls, file)<br>    <span class="hljs-keyword">return</span> urls<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_urls</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;urls.yaml&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取本地:urls&#x27;</span>)<br>            <span class="hljs-keyword">return</span> yaml.safe_load(file)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> fetch_and_save_urls(url)<br></code></pre></td></tr></table></figure><p>这部分代码处理小说目录页，提取所有章节的 URL 和标题，并将其保存到YAML 文件中。下次运行时会优先读取本地文件，避免重复爬取。</p><h3 id="特殊字符处理">3. 特殊字符处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_css_dict</span>(<span class="hljs-params">css_url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;css_dict.yml&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            css_dict = yaml.safe_load(file)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取本地:css_dict&#x27;</span>)<br>            <span class="hljs-keyword">return</span> css_dict<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        css_content = get_html_text(css_url)<br>        icon_pattern = <span class="hljs-string">r&#x27;\.icon-(.*?):before\s*\&#123;\s*content:\s*&quot;(.*?)&quot;;\s*\&#125;&#x27;</span><br>        css_dict = re.findall(icon_pattern, css_content)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;css_dict.yml&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            yaml.safe_dump(css_dict, file)<br>        <span class="hljs-keyword">return</span> css_dict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_content</span>(<span class="hljs-params">css_dict, html_content</span>):<br>    icon_dict = &#123;&#125;<br>    <span class="hljs-keyword">for</span> icon_class, content <span class="hljs-keyword">in</span> css_dict:<br>        <span class="hljs-keyword">try</span>:<br>            content_bytes = <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(content[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>], <span class="hljs-number">16</span>), <span class="hljs-built_in">int</span>(content[<span class="hljs-number">3</span>:], <span class="hljs-number">16</span>)])<br>            decoded_str = content_bytes.decode(<span class="hljs-string">&#x27;utf-16be&#x27;</span>)<br>            icon_dict[<span class="hljs-string">f&#x27;icon-<span class="hljs-subst">&#123;icon_class&#125;</span>&#x27;</span>] = decoded_str<br>        <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;无法正确解码 icon-<span class="hljs-subst">&#123;icon_class&#125;</span> 的内容。&quot;</span>)<br><br>    soup = BeautifulSoup(html_content, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    div = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;mlfy_main_text&#x27;</span>)<br>    <span class="hljs-keyword">for</span> icon_class, utf8_content <span class="hljs-keyword">in</span> icon_dict.items():<br>        <span class="hljs-keyword">for</span> i_tag <span class="hljs-keyword">in</span> div.find_all(<span class="hljs-string">&#x27;i&#x27;</span>, &#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-keyword">lambda</span> c: icon_class <span class="hljs-keyword">in</span> c&#125;):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i_tag.string:<br>                i_tag.string = utf8_content<br>            <span class="hljs-keyword">else</span>:<br>                i_tag.string = i_tag.string + utf8_content<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(soup)<br></code></pre></td></tr></table></figure><p>这部分代码处理网页中的特殊图标和字符。通过解析 CSS文件，提取图标对应的编码，并将其替换为实际字符，确保内容完整。</p><h3 id="分页处理">4. 分页处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">if_has_next</span>(<span class="hljs-params">url_next</span>):<br>    html = get_html_text(url_next)<br>    pattern = <span class="hljs-string">r&#x27;url_next:\s*&quot;(.*?)&quot;&#x27;</span><br>    <span class="hljs-keyword">match</span> = re.search(pattern, html)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        url_next_value = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">in</span> url_next_value:<br>            <span class="hljs-keyword">return</span> url_next_value<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>该函数检测章节是否有下一页，并返回下一页的URL，用于后续内容合并。</p><h3 id="markdown-转换与保存">5. Markdown 转换与保存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_page_content</span>(<span class="hljs-params">html_content, chapter</span>):<br>    h = html2text.HTML2Text()<br>    markdown_content = ((h.handle(html_content)<br>                         .replace(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>                         .replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br>                        .replace(<span class="hljs-string">&#x27;铅笔小说网qianbiwenxue.com&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;无敌剑域/&#x27;</span> + chapter + <span class="hljs-string">&#x27;.md&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(markdown_content)<br></code></pre></td></tr></table></figure><p>这个函数将 HTML 内容转换为 Markdown格式，并保存到文件中。它会移除多余的空格和网站标识，使生成的文件更加简洁。</p><h3 id="多线程处理">6. 多线程处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_html_pages</span>(<span class="hljs-params">chapter, url</span>):<br>    thread_id = threading.current_thread().ident<br>    html_content = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> url:<br>        html = get_html_text(url)<br>        html_content += replace_content(css_dict, html)<br>        url = if_has_next(url)<br><br>    save_page_content(html_content, chapter)<br><br>    end_time = time.time()<br>    elapsed_time = end_time - start_time<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;线程：<span class="hljs-subst">&#123;thread_id&#125;</span>下载章节《<span class="hljs-subst">&#123;chapter&#125;</span>》完毕--当前用时：<span class="hljs-subst">&#123;elapsed_time:<span class="hljs-number">.5</span>f&#125;</span> 秒。&#x27;</span><br><br><span class="hljs-comment"># 主程序中的线程池部分</span><br><span class="hljs-keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    future_to_task = &#123;executor.submit(process_html_pages, <span class="hljs-built_in">list</span>(item.keys())[<span class="hljs-number">0</span>], <span class="hljs-built_in">list</span>(item.values())[<span class="hljs-number">0</span>]): item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> url_s&#125;<br>    <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> concurrent.futures.as_completed(future_to_task):<br>        task = future_to_task[future]<br>        <span class="hljs-keyword">try</span>:<br>            result = future.result()<br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(task.keys())[<span class="hljs-number">0</span>]&#125;</span> 产生了一个异常：<span class="hljs-subst">&#123;exc&#125;</span>&quot;</span>)<br>            failed_tasks.append(task)<br></code></pre></td></tr></table></figure><p>这部分代码实现了多线程下载功能，通过线程池并行处理多个章节，大大提高了下载效率。同时还包含了失败重试机制，确保所有章节都能成功下载。</p><h2 id="三项目使用方法">三、项目使用方法</h2><ol type="1"><li>安装必要的依赖库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install requests beautifulsoup4 pyyaml html2text<br></code></pre></td></tr></table></figure><ol type="1"><li>修改代码中的 URL：</li></ol><ul><li>将<code>url</code>变量设置为目标小说的目录页 URL</li><li>将<code>css_url</code>变量设置为网站的 CSS 文件 URL</li></ul><ol type="1"><li>运行脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python script_name.py<br></code></pre></td></tr></table></figure><ol type="1"><li>等待下载完成，所有章节将以 Markdown 格式保存在 “无敌剑域”文件夹中</li></ol><h2 id="四项目优化建议">四、项目优化建议</h2><ol type="1"><li>添加进度条显示，让用户更直观地了解下载进度</li><li>增加配置文件，将 URL、保存路径等参数外部化，提高灵活性</li><li>改进异常处理机制，对不同类型的异常进行分类处理</li><li>添加断点续传功能，支持从上次中断的位置继续下载</li><li>增加对不同网站结构的支持，提高通用性</li></ol><p>这个项目展示了如何使用 Python进行网页爬取和内容处理，通过多线程技术提高效率，并利用正则表达式和BeautifulSoup处理复杂的网页结构。代码结构清晰，功能完整，可以作为类似项目的基础框架进行扩展。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git含有隐私信息导致推送失败的解决方案</title>
    <link href="/2024/08/01/Git%E5%90%AB%E6%9C%89%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E5%AF%BC%E8%87%B4%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/08/01/Git%E5%90%AB%E6%9C%89%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E5%AF%BC%E8%87%B4%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h4 id="背景引入">背景引入：</h4><blockquote><p>我在推送考试系统到远程仓库时，出现一个错误：.yml配置文件含有阿里云oos的密钥信息</p><p>我尝试删除之后推送也没有解决：</p><p>因为之前本地仓库master分支已经提交过含有隐私信息的版本，此时即便是修改后重新提交本地仓库，上一个分支版本中依旧含有隐私信息导致推送失败</p></blockquote><h4 id="解决方案">解决方案：</h4><blockquote><ol type="1"><li>最简单的解决方案：如果是个人版本库不注重版本的前提下，完全可以删除当前git仓库的版本信息，也就是<code>.git</code>文件夹，之后把隐私文件中的隐私信息一并删除或者不纳入版本控制，重新<code>git init</code>即可解决。</li><li>如果不希望删除<code>.git</code>,怎么解决，这个比较麻烦，而且网上几乎都是这种解决方案：</li></ol><ul><li>就是找到之前含有隐私信息的那个版本，写一个sh脚本替换或者删除其中的隐私信息，这样也就破坏了版本结构。</li><li>或者直接删除含有隐私信息的那个版本。</li><li>最后就是回退到不含有隐私信息的版本。</li></ul><p>个人推荐直接第一种解决，省事图方便。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过shell脚本自动部署项目</title>
    <link href="/2024/07/31/%E9%80%9A%E8%BF%87shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/07/31/%E9%80%9A%E8%BF%87shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="操作步骤">操作步骤:</h4><ol type="1"><li>在Linux中安装Git</li><li>在Linux中安装maven</li><li>编写Shell脚本(拉取代码、编译、打包、启动）</li><li>为用户授予执行Shell脚本的权限</li><li>执行shell脚本</li></ol><hr /><h4 id="具体实现">具体实现：</h4><ol type="1"><li><p>在Linux中安装Git</p><blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">list</span> git<br>yum <span class="hljs-keyword">install</span> git<br><br>CMAKE<br></code></pre></td></tr></table></figure></blockquote></li><li><p>使用Git克隆代码</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">cd /usr/local/<br>git clone <span class="hljs-link">https://gitee.com/</span>[<span class="hljs-string">占位</span>]/[占位].git<br><br>ASCIIDOC<br></code></pre></td></tr></table></figure></blockquote></li><li><p>将maven安装包上传到Linux，在Linux中安装maven</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf apache-maven-3.5.4-bin.tar.gz-C/usr/local<br>vim /etc/profile<br>修改配置文件，加入如下内容<br><span class="hljs-built_in">export</span> MAVENIHOME=/usr/local/apache-maven-3.5.4<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA</span> HOME/bin:<span class="hljs-variable">$MAVEN</span> HOME/bin:<span class="hljs-variable">$PATH</span><br><br><br><span class="hljs-built_in">source</span> /etc/profile<br>mvn -version<br>vim /usr/local/apache-maven-3.5.4/conf/settings.xml<br>修改配置文件内容如下<br>&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;<br><br>BASH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>Shell脚本</p><blockquote><p>可以创建一个sh脚本在/usr/local/sh目录下</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> =================================<br><span class="hljs-built_in">echo</span>  自动化部署脚本启动<br><span class="hljs-built_in">echo</span> =================================<br><br><span class="hljs-built_in">echo</span> 停止原来运行中的工程<br>APP_NAME=helloworld<br><br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Process...&#x27;</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">sleep</span> 2<br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Kill Process!&#x27;</span><br>    <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Success!&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> 准备从Git仓库拉取最新代码<br><span class="hljs-built_in">cd</span> /usr/local/helloworld<br><br><span class="hljs-built_in">echo</span> 开始从Git仓库拉取最新代码<br>git pull<br><span class="hljs-built_in">echo</span> 代码拉取完成<br><br><span class="hljs-built_in">echo</span> 开始打包<br>output=`mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>`<br><br><span class="hljs-built_in">cd</span> target<br><br><span class="hljs-built_in">echo</span> 启动项目<br><span class="hljs-built_in">nohup</span> java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; helloworld.log &amp;<br><span class="hljs-built_in">echo</span> 项目启动完成<br><br><br>SH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>为用户授权</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">chmod</span><span class="hljs-params">(英文全拼:change mode)</span></span>命令是控制用户对文件的权限的命令<br>Linux中的权限分为:读(<span class="hljs-attribute">r</span>)、写(w)、执行(x)三种权限<br>Linux的文件调用权限分为三级:文件所有者(<span class="hljs-number">0</span>wner)、用户组(Group)、其它用户(<span class="hljs-number">0</span>ther Users)<br>只有文件的所有者和超级用户可以修改文件或目录的权限要执行Shell脚本需要有对此脚本文件的执行权限，如果没有则不能执行<br><br>STYLUS<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-comment">1 root root 785 May 17 20:43 bootstart</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span><br><br><span class="hljs-comment">CEYLON</span><br></code></pre></td></tr></table></figure><p><ahref="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/linux-file权限.png"><imgsrc="linux-file权限.png" alt="file权限" /></a></p><hr /><ul><li><p>chmod命令可以使用八进制数来指定权限</p></li><li><p>举例:</p><blockquote><p><code>chmod 777 bootstart.sh</code> 为所有用户授予读、写、执行权限<code>chmod 755 bootstart.sh</code>为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</p><p><code>chmod 210 bootstart.sh</code>为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</p></blockquote></li><li><blockquote><p>注意:三位数字分别代表不同用户的权限 第1位表示文件拥有者的权限第2位表示同组用户的权限 第3位表示其他用户的权限</p></blockquote></li><li><table><thead><tr><th>#</th><th>权限</th><th>rwx</th></tr></thead><tbody><tr><td>7</td><td>读+写+执行</td><td>rwx</td></tr><tr><td>6</td><td>读+写</td><td>rw-</td></tr><tr><td>5</td><td>读+执行</td><td>r-x</td></tr><tr><td>4</td><td>只读</td><td>r–</td></tr><tr><td>3</td><td>写+执行</td><td>-wx</td></tr><tr><td>2</td><td>只写</td><td>-w-</td></tr><tr><td>1</td><td>只执行</td><td>–x</td></tr><tr><td>0</td><td>无</td><td>—</td></tr></tbody></table></li></ul></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>自动部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>自动部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql-Linux</title>
    <link href="/2024/07/31/Mysql-Linux/"/>
    <url>/2024/07/31/Mysql-Linux/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li>启动mysql</li></ol><blockquote><ul><li><p>查看mysql服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status mysqld</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure></li><li><p>启动mysql服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld<br><br>CRMSH<br></code></pre></td></tr></table></figure></li><li><p>开机启动mysql服务（说明:可以设置开机时启动mysql服务，避免每次开机启动mysql）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> mysqld<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></li><li><p>查看已经启动的服务</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat <span class="hljs-punctuation">-</span>tunlp<br>netstat <span class="hljs-punctuation">-</span>tunlp <span class="hljs-string">| grep mysql</span><br><br><span class="hljs-number">1</span>C<br></code></pre></td></tr></table></figure></li><li><p>查看mysql进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> mysql<br>  <br>VIM<br></code></pre></td></tr></table></figure></li></ul></blockquote><ol type="1"><li>登录MySOL数据库，查阅临时密码</li></ol><blockquote><ul><li>查看文件内容</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span><br><br>STATA<br></code></pre></td></tr></table></figure><ul><li>查看文件内容中包含password的行信息</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span> | grep password<br><br>STATA<br></code></pre></td></tr></table></figure></blockquote><ol type="1"><li>登录MySOL，修改密码，开放访问权限</li></ol><blockquote><ul><li>登录mysql(使用临时密码登录)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br><br>CSS<br></code></pre></td></tr></table></figure><p>修改密码</p><ul><li>设置密码长度最低位数</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_length</span>=4;<br><br>ROUTEROS<br></code></pre></td></tr></table></figure><ul><li>设置密码安全等级低，便于密码可以修改成root</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=LOW;<br><br>ROUTEROS<br></code></pre></td></tr></table></figure><ul><li>设置密码为root</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">set password</span> = password(<span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-attribute">PGSQL</span><br></code></pre></td></tr></table></figure><ul><li>开启访问权限</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br>PGSQL<br></code></pre></td></tr></table></figure><ul><li>刷新权限，立即生效</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>mysql</tag>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装/卸载软件-rpm</title>
    <link href="/2024/07/31/Linux%E5%AE%89%E8%A3%85-%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-rpm/"/>
    <url>/2024/07/31/Linux%E5%AE%89%E8%A3%85-%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-rpm/</url>
    
    <content type="html"><![CDATA[<p>RPM软件包管理器是Linux用于管理和安装软件的工具</p><ol type="1"><li>检测当前系统是否安装MySQL数据库</li></ol><blockquote><ul><li><p>查询当前系统中安装的所有软件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rpm -qa</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure></li><li><p>查询当前系统中安装的名称带mysql的软件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mysql<br><br>VIM<br></code></pre></td></tr></table></figure></li><li><p>查询当前系统中安装的名称带mariadb的软件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mariadb<br>  <br>VIM<br></code></pre></td></tr></table></figure></li></ul><p>PS:如果当前系统中已经安装有MySQL数据库，安装将失败。CentOS7自带mariadb，与MySQL数据库冲突。</p></blockquote><ol type="1"><li>卸载已经安装的冲突软件</li></ol><blockquote><p>卸载软件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">rpm -e <span class="hljs-comment">--nodeps 软件名称</span><br><br>ADA<br></code></pre></td></tr></table></figure></blockquote><ol type="1"><li>安装软件</li></ol><blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rpm</span> -ivh [<span class="hljs-regexp">*.rpm</span>]<br><br>NGINX<br></code></pre></td></tr></table></figure></blockquote><hr /><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Yum</span><span class="hljs-params">(全称为 Yellow dog Updater, Modified)</span></span>是一个在Fedora和RedHat以及Cent0S中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。<br><br>STYLUS<br></code></pre></td></tr></table></figure><ol type="1"><li>搜索软件（yum）</li></ol><blockquote><p>搜索lrzsz安装包，命令为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum list lrzsz</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>rz，sz是Linux/Unix同Windows进行ZModem文件传输的命令行工具。</strong></p><p>rz可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端，就算中间隔着跳板机也不影响。</p></blockquote></blockquote><ol type="1"><li>安装软件（yum）</li></ol><blockquote><p>使用yum命令在线安装，命令为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yuminstalllrzsz</span>.x86 <span class="hljs-number">64</span><br><br><span class="hljs-attribute">APACHE</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>rpm</tag>
      
      <tag>卸载</tag>
      
      <tag>安装</tag>
      
      <tag>RPM软件包管理器</tag>
      
      <tag>yum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连接远程数据库失败的原因</title>
    <link href="/2024/07/31/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <url>/2024/07/31/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li><p>开启访问权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br>PGSQL<br></code></pre></td></tr></table></figure></li><li><p>开启服务器端口</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3306/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">ports</span><br><br><span class="hljs-comment">BRAINFUCK</span><br></code></pre></td></tr></table></figure></li><li><p>如果没有开启端口或者关闭防火墙，那么可以通过ssh进行连接数据库，</p><ul><li>常规连接就是远程连接，使用的账号权限是支持远程连接的，即权限为%.但如果没有连接成功就出现上面的1和2</li><li>ssh连接是因为你使用的账号不支持远程连接，只支持localhost本地连接，所以需要登录到数据库所在的服务器登录，即ssh登录</li><li>一般MySQL的管理员账户都是localhsot，比如root等</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux防火墙操作命令_</title>
    <link href="/2024/07/30/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/30/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li><p>查看防火墙状态</p><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">systemctl <span class="hljs-built_in">status</span> firewalld 或者 firewall-cmd <span class="hljs-comment">--state</span><br><br>LINUX<br></code></pre></td></tr></table></figure></blockquote></li><li><p>暂时关闭防火墙</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br><br>ARDUINO<br></code></pre></td></tr></table></figure></blockquote></li><li><p>永久关闭防火墙(不建议操作)</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">disable</span> firewalld<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>开启防火墙</p><blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld<br><br>CRMSH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>开放指定端口</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=8080/tcp --permanent<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>关闭指定端口</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--remove-port</span>=8080/tcp --permanent<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>立即生效(开启或关闭端口后需要执行的命令，重新加载)</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br><br>ADA<br></code></pre></td></tr></table></figure></blockquote></li><li><p>查看开放的端口</p><blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">ports</span><br><br><span class="hljs-comment">BRAINFUCK</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><h3 id="注意">注意:</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-number">1</span>、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作<br><span class="hljs-number">2</span>、firewall-<span class="hljs-keyword">cmd</span><span class="language-bash">是Linux中专门用于控制防火墙的命令</span><br><span class="hljs-number">3</span>、为了保证系统安全，服务器的防火墙不建议关闭<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>防火墙</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS-第二天ip改变结果ssh连接不上的解决方案_</title>
    <link href="/2024/07/29/CentOS-%E7%AC%AC%E4%BA%8C%E5%A4%A9ip%E6%94%B9%E5%8F%98%E7%BB%93%E6%9E%9Cssh%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/29/CentOS-%E7%AC%AC%E4%BA%8C%E5%A4%A9ip%E6%94%B9%E5%8F%98%E7%BB%93%E6%9E%9Cssh%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="解决方案">解决方案：</h1><p>昨天ssh连接正常，今天打开虚拟机ipaddr发现ip改变了，于是我改变了ssh软件的ip地址发现不行，之后网上试了防火墙之类的方法，想来也是方向错了。</p><p>既然昨天可以连接上去，今天的问题也就不是电脑防火墙的关系。</p><p>具体在桥接模式下自然分配的ip改变后为何不能连接，还不知道解决方案。以下内容是解决如何连上去的。</p><p>首先在桥接模式下设置静态ip以及网关。</p><blockquote><ul><li>使用如下命令打开虚拟网卡配置文件 vi/etc/sysconfig/network-scripts/ifcfg-ens33输入字母键i可以进入插入状态，修改如下内容： BOOTPROTO=“static”ONBOOT=“yes” IPADDR=192.168.1.250(需要根据自己主机改变)GATEWAY=192.168.1.1(需要根据自己主机改变) DNS1=8.8.8.8</li><li>重启网卡 systemctl restart network</li></ul></blockquote><p>上面桥接模式下设置的静态ip可以在子网内随意选择，但网关（GATEWAY）只有一个。</p><p>电脑打开cmd+ipconfig查看无线局域网适配器 WLAN:</p><p>最后设置完成后，重新使用ssh工具连接虚拟机静态ip即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">已经试过的情况：不是缓存的问题，也不是防火墙的问题。<br>具体因为什么，评论区来个大哥解释。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2024/07/22/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/22/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git-常用命令">Git-常用命令</h1><ol type="1"><li><h4 id="git全局设置信息">git全局设置信息</h4><blockquote><p>设置用户信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xiazhimiao&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xiazhimiao@qq.com&quot;</span><br><br>GIT<br></code></pre></td></tr></table></figure><p>查看配置信息</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br><br>GIT<br></code></pre></td></tr></table></figure></blockquote></li><li><p>创建仓库</p><blockquote><p>创建本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br><br>GIT<br></code></pre></td></tr></table></figure><p>克隆远程仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">[远程仓库地址.git</span>]<br><br>CRMSH<br></code></pre></td></tr></table></figure><p>PS:仓库不能嵌套</p></blockquote></li><li><p>本地仓库常用命令</p><blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git status  查看文件状态<br><span class="hljs-comment">-------------- * 是通配符</span><br>git <span class="hljs-keyword">add</span>   将文件的修改加入暂存区<br>git <span class="hljs-keyword">reset</span>   将暂存区的文件取消暂存或者切换到指定版本<br><span class="hljs-comment">-------------- [文件名] </span><br><span class="hljs-comment">-------------- --hard [版本号]</span><br>git <span class="hljs-keyword">commit</span>  将暂存区的文件修改提交到版本库<br><span class="hljs-comment">--------------  -m &quot;记录&quot; [文件名]</span><br>git <span class="hljs-keyword">log</span>     查看日志<br><br>GIT<br></code></pre></td></tr></table></figure></blockquote></li><li><p>远程仓库操作</p><blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git remote     查看远程仓库<br>--------------  -v   查看远程仓库地址<br>git remote add 添加远程仓库<br>-------------- origin [远程仓库地址]<br>git <span class="hljs-keyword">clone</span>      <span class="hljs-title">从远程仓库克隆</span><br><span class="hljs-title">-------------- [url</span>]<br>git pull       从远程仓库拉取<br>-------------- origin <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push       推送到远程仓库<br>-------------- origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title">GIT</span><br></code></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Git</tag>
      
      <tag>常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS-7-ip-ens33为空的解决方案_</title>
    <link href="/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="解决方法">解决方法</h1><p>在此之前确保/etc/sysconfig/network-scripts/ifcfg-ens33文件中ONBOOT=yes，然后</p><p>如下图：在VM虚拟机的<code>可移动设备</code>-&gt;<code>网络适配器</code>中选择<code>桥接模式</code>即可</p><p><ahref="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/qiaojie.png"><imgsrc="qiaojie.png" alt="选择桥接" /></a></p><p>选择桥接</p>]]></content>
    
    
    <categories>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>ip</tag>
      
      <tag>ens33</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对数据库的详解文章</title>
    <link href="/2024/07/14/%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%A6%E8%A7%A3%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/14/%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%A6%E8%A7%A3%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库详解">数据库详解</h1><h3id="ps以下页码以数据库系统概论第五版为主">PS：以下页码以《数据库系统概论第五版》为主</h3><h3 id="一第一章">一、第一章</h3><ul><li><p>数据库基本概念 P3</p><blockquote><p><code>数据</code>、<code>数据库</code>、<code>数据库管理系统</code>和<code>数据库系统</code>是与数据库技术密切相关的四个基本概念</p></blockquote></li><li><p><code>数据</code>、<code>数据库</code>、<code>数据库管理系统</code>和<code>数据库系统</code>P4-P5</p><blockquote><ul><li><p>数据：数据是数据库中存储的基本对象；描述事物的符号记录称为数据。</p></li><li><p>数据库：数据库是长期储存在计算机内、有组织的、可共享是大量数据的集合。</p><blockquote><p>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度<ahref="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>、较高的数据独立性和易扩展性，并可为各种用户共享。</p><p>概括的讲，数据库数据具有永久存储、有组织和可共享三个基本特点。</p></blockquote></li></ul></blockquote><blockquote><ul><li><p>数据库管理系统：数据库管理系统和操作系统一样是计算机的基础软件，也是一个大型复杂的软件系统。它的主要功能包括以下几个方面：</p><blockquote><p>1.数据定义功能。</p><p>2.数据组织、存储和管理各种数据。</p><p>3.数据操纵功能:使用数据操纵语言DML实现增删改查。</p><p>4.数据库的事务管理和运行管理。</p><p>5.数据库的建立和维护功能。</p><p>6.其他功能。</p></blockquote></li><li><p>数据库系统：数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。</p></li></ul></blockquote></li><li><p>三个阶段：人工管理阶段、文件系统阶段、数据库系统阶段 P6-P9</p><blockquote><ul><li>人工管理阶段：20世纪50年代中期前。</li><li>文件系统阶段：50年代后期至60年代中期。</li><li>数据库系统阶段：60年代后期至今。</li></ul><blockquote><p>从文件系统到数据库系统标志着数据管理技术的飞跃。</p></blockquote></blockquote></li><li><p>数据操作的组成要素：数据结构，数据操作，数据的完整性约束条件P18</p><blockquote><ol type="1"><li>数据结构: 数据结构描述数据库的组成对象以及对象之间的联系。</li><li>数据操作：数据操作是指对数据库中各种对象(型)的实例(值)允许执行的操作的集合，包括操作及有关的操作规则。</li><li>数据的完整性约束条件： 数据的完整性约束条件是一组完整性规则。</li></ol><blockquote><p>完整性规则是给定的数据模型中数据及其联系所具有的制约和依存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容。</p></blockquote></blockquote></li><li><p>三个模型：层次模型，网状模型，关系模型 P19-P27</p><blockquote><ul><li><p>层次模型：最早出现的数据模型，典型代表是1968年的IBM公司推出的IMS。</p><blockquote><ol type="1"><li><blockquote><p>层次模型的数据结构：</p><blockquote><p>在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型：</p><p>1.有且只有一个结点没有双亲结点，这个结点称为根节点。</p><p>2.根以外的其他结点有且只有一个双亲结点。</p></blockquote><ul><li>层次模型像一棵倒立的树，结点的双亲是唯一的。</li></ul></blockquote></li><li><blockquote><p>层次模型的数据操纵和完整性约束：</p><blockquote><p>层次模型的数据操纵主要有查询、插入、删除和更新。进行插入、删除、更新操作时要满足层次模型的完整性约束条件。进行插入操作时，如果没有相应的双亲结点值就不能插入它的子女结点值。例如在图1.11的层次数据库中，若新调入一名教员，但尚未分配到某个教研室，这时就不能将新教员插入到数据库中。进行删除操作时，如果删除双亲结点值，则相应的子女结点值也将被同时删除。例如在图1.10的层次数据库中，若删除网络教研室，则该教研室所有教员的数据将全部丢失</p></blockquote></blockquote></li><li><blockquote><p>层次模型的优缺点：</p><ul><li><p>层次模型的优点主要有:</p><blockquote><p>(1)层次模型的数据结构比较简单清晰。</p><p>(2)层次数据库的查询效率高。因为层次模型中记录之间的联系用有向边表示，这种联系在DBMS中常常用指针来实现。因此这种联系也就是记录之间的存取路径。当要存取某个结点的记录值，DBMS就沿着这一条路径很快找到该记录值，所以层次数据库的性能优于关系数据库，不低于网状数据库。(3)层次数据模型提供了良好的完整性支持。</p></blockquote></li><li><p>层次模型的缺点主要有:</p><blockquote><p>(1)现实世界中很多联系是非层次性的，如结点之间具有多对多联系，不适合用层次模型表示。(2)如果一个结点具有多个双亲结点等，用层次模型表示这类联系就很笨拙，只能通过引入冗余数据(易产生不一致性)或创建非自然的数据结构(引入虚拟结点)来解决。对插入和删除操作的限制比较多，因此应用程序的编写比较复杂。(3)查询子女结点必须通过双亲结点。(4)由于结构严密，层次命令趋于程序化。</p></blockquote></li><li><p>可见，用层次模型对具有一对多的层次联系的部门描述非常自然、直观，容易理解这是层次数据库的突出优点。</p></li></ul></blockquote></li></ol></blockquote></li><li><p>网状模型:在现实世界中事物之间的联系更多的是非层次关系的，用层次模型表示非树形结构是很不直接的，网状模型则可以克服这一弊病。</p><blockquote><ol type="1"><li><blockquote><p>网状模型的数据结构:</p><blockquote><p>在数据库中，把满足以下两个条件的基本层次联系集合称为网状模型:</p><p>1.允许一个以上的结点无双亲。 2.一个结点可以有多于一个的双亲。</p></blockquote><ul><li>层次模型中子女结点与双亲结点的联系是唯一的，而在网状模型中这种联系可以不唯一。</li></ul></blockquote></li><li><blockquote><p>网状模型的数据操纵与完整性约束:</p><blockquote><p>网状模型一般来说没有层次模型那样严格的完整性约束条件，但具体的网状数据库系统对数据操纵都加了一些限制，提供了一定的完整性约束。例如，DBTG在模式数据定义语言中提供了定义DBTG数据库完整性的若干概念和语句，主要有:(1)支持记录码的概念，码即唯一标识记录的数据项的集合。例如，学生记录(如图1.13)中学号是码，因此数据库中不允许学生记录中学号出现重复值。</p><p>(2)保证一个联系中双亲记录和子女记录之间是一对多的联系。(3)可以支持双亲记录和子女记录之间的某些约束条件。例如，有些子女记录要求双亲记录存在才能插入，双亲记录删除时也连同删除。例如图1.13中选课记录就应该满足这种约束条件,学生选课记录值必须是数据库中存在的某一学生选修存在的某一门课的记录。DBTG提供了“属籍类别”的概念来描述这类约束条件。</p></blockquote></blockquote></li><li><blockquote><p>网状模型的优缺点:</p><ul><li><p>网状模型的优点主要有:</p><blockquote><p>(1)能够更为直接地描述现实世界，如一个结点可以有多个双亲，结点之间可以有多种联系。 (2)具有良好的性能，存取效率较高。</p></blockquote></li><li><p>网状模型的缺点主要有:</p><blockquote><p>(1)结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握。(2)网状模型的DDL、DML复杂，并且要嵌入某一种高级语言(如 COBOL、C)中。用户不容易掌握，不容易使用。(3)由于记录之间的联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存储路径，因此用户必须了解系统结构的细节，加重了编写应用程序的负担。</p></blockquote></li></ul></blockquote></li></ol></blockquote></li><li><p>关系模型：关系模型是最重要的一种数据模型。关系数据库系统采用关系模型作为数据的组织方式。</p><blockquote><ol type="1"><li>关系模型的数据结构:</li></ol><blockquote><ul><li>关系：一个关系对应通常说的一张表，例如图1.14中的这张学生登记表。</li><li>元组(tuple):表中的一行即为一个元组。</li><li>属性(attribute):表中的一列即为一个属性，给每一个属性起一个名称即属性名。如图1.14所示的表有6列，对应6个属性(学号，姓名，年龄，性别，系名和年级)。</li><li>码(key):也称为码键。表中的某个属性组，它可以唯一确定一个元组，如图1.14中的学号可以唯一确定一个学生，也就成为本关系的码。</li><li>域（domain):域是一组具有相同数据类型的值的集合。属性的取值范围来自某个域，如人的年龄一般在1至120岁之间，大学生年龄属性的域是(15至45岁)，性别的城是(男女)，系名的域是一个学校所有系名的集合。</li></ul><blockquote><p>也就是属性的取值区间。</p></blockquote><ul><li>分量:元组中的一个属性值。</li><li>关系模式：对关系的描述，可表示为：</li></ul><blockquote><p>关系名（属性1，属性2，···，属性n）</p><p>例如，上面的关系可描述为学生(学号，姓名，年龄，性别，系名，年级)</p></blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">关系模式的要求必须是规范化的，关系的每一个分量必须是一个不可分的数据项，也就是不允许`表中有表`<br><br>ARCADE<br></code></pre></td></tr></table></figure></blockquote><ol type="1"><li>关系模型的数据操纵与完整性約束:</li></ol><blockquote><p>关系模型的数据操纵主要包括查询、插入、删除和更新数据。这些操作必须满足关系的完整性约束条件。</p><p>关系的完整性约束条件包括三大类:<code>实体完整性</code>、<code>参照完整性</code>和<code>用户定义的完整性</code>。其具体含义将在后续内容中介绍。</p><p>关系模型中的数据操作是集合操作，操作对象和操作结果都是关系，即若干元组的集合，而不像格式化模型中那样是单记录的操作方式。另一方面，关系模型把存取路径向用户隐蔽起来，用户只要指出<code>干什么</code>或<code>找什么</code>不必详细说明“怎么干”或“怎么找”,从而大大地提高了数据的独立性，提高了用户生产率。</p></blockquote><ol type="1"><li>关系模型的优缺点：</li></ol><blockquote><ul><li><p>关系模型具有下列优点:</p><blockquote><p>(1)关系模型与格式化模型不同，它是建立在严格的数学概念的基础上的。</p><p>(2)关系模型的概念单一。无论实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是关系(即表)。所以其数据结构简单、清晰，用户易懂易用。(3)关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的上作和数据库开发建立的工作。所以关系模型诞生以后发展迅速，深受用户的喜爱。</p></blockquote></li><li><p>关系模型具有下列缺点：</p><blockquote><p>例如，由于存取路径对用户是隐蔽的，查询效率往往不如格式化数据模型。为了提高性能，数据库管理系统必须对用户的查询请求进行优化，因此增加了开发数据库管理系统的难度。不过用户不必考虑这些系统内部的优化技术细节。</p></blockquote></li></ul></blockquote></blockquote></li></ul></blockquote></li><li><p>数据库系统的三级模式结构：模式、外模式、内模式 P29</p><blockquote><ol type="1"><li><p>数据库系统模式的概念：</p><blockquote><ul><li><p>在数据模型中有<code>型(type)</code>和<code>值(value)</code>的概念。型是指对某一类数据的结构和属性的说明，值是型的一个具体赋值。</p><p>例如，学生记录定义为(学号，姓名，性别，系别，年龄，籍贯)这样的记录型，</p><p>而(201315130，李明，男，计算机系，19，江苏南京市)则是该记录型的一个记录值。</p></li><li><p>模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及对型的描述，不涉及具体的值。</p><p>模式的一个具体值称为模式的一个实例。同一个模式可以有很多实例。</p></li><li><p>模式是相对稳定的，而实例是相对变动的。</p><p>因为数据库中的数据是在不断更新的。模式反映的是数据的结构及耳联系，而实例及映的是数据库某一时刻的状态。</p></li></ul></blockquote></li><li><p>数据库系统的三级模式结构：</p><blockquote><p>数据库系统的三级模式结构是指数据库系统是由外模式、模式和内模式三级构成。</p><ul><li><p>模式(schema)模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。<code>一个数据库只有一个模式</code>。</p></li><li><p>外模式(external schema)</p><p>外模式也称子模式(subschema)或用户模式，它是数据库用户(包括应用程序员和最终用户)能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。<code>关系外模式通常是模式的子集</code>，<code>一个数据库可以有多个外模式</code>。</p></li><li><p>内模式(internal schema)</p><p>内模式也称存储模式(storageschema),<code>一个数据库只有一个内模式</code>,它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</p></li></ul></blockquote></li><li><p>数据库的二级映像功能与数据独立性</p><blockquote><p>数据库系统的三级模式是数据的三个抽象级别，它把数据的具体组织留给数据库管理系统管理，使用户能逻辑地、抽象地处理数据，而不必关心数据在计算机中的具体表示方式与存储方式。为了能够在系统内部实现这三个抽象层次的联系和转换，数据库管理系统在这三级模式之间提供了两层映像:<code>外模式/模式映像</code>和<code>模式/内模式映像</code>。正是这两层映像保证了数据库系统中的数据能够具有较高的<code>逻辑独立性</code>和<code>物理独立性</code>。</p><blockquote><ol type="1"><li>外模式/模式映像</li></ol><blockquote><p>描述的是数据的全局逻辑结构，(外模式描述的是数据的局部逻辑结构。对应于同一个模式可以有任意多个外模式。对于每一个外模式，数据库系统都有一个外模式/模式映像，它定义了该外模式与模式之间的对应关系。这些映像定义通常包含在各自外模式的描述中。当模式改变时(例如增加新的关系、新的属性、改变属性的数据类型等)，由数据库描述中。管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。<code>应用程序是依据数据的外模式编写的</code>，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</p></blockquote><ol type="1"><li>模式/内模式映像</li></ol><blockquote><p>数据库中只有一个模式，也只有一个内模式，所以模式/内模式映像是唯一的，它定义了数据全局逻辑结构与存储结构之间的对应关系。例如，说明逻辑记录和字段在内部是如何表示的。该映像定义通常包含在模式描述中。（如选用了另一种存储结构)，由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。</p></blockquote><ul><li>数据库模式即全局逻辑结构是数据库的中心与关键，它独立于数据库的其他层次。因此设计数据库模式结构时应首先确定数据库的逻辑模式。</li><li>数据库的外模式面向具体的应用程序。</li><li>特定的应用程序是在外模式描述的数据结构上编制的。</li></ul></blockquote></blockquote></li></ol></blockquote></li><li><p>数据库管理员DBA P31</p><blockquote><ul><li><p>DBA</p><blockquote><ol type="1"><li>决定数据库中的信息内容和结构。</li><li>决定数据库的存储结构和存取策略。</li><li>定义数据的安全性要求和完整性约束条件。</li><li>监控数据库的使用和运行。</li><li>数据库的改进和重组、重构。</li></ol></blockquote></li><li><p>系统分析员</p><blockquote><p>系统分析员负责应用系统的需求分析和规范说明，要和用户及数据库管理员相结合，确定系统的硬件软件配置，并参与数据库系统的概要设计。</p></blockquote></li><li><p>数据库设计人员</p><blockquote><p>数据库设计人员负责数据库中数据的确定及数据库各级模式的设计。数据库设计人员必须参加用户需求调查和系统分析，然后进行数据库设计。在很多情况下，数据库设计人员就由数据库管理员担任。</p></blockquote></li></ul></blockquote></li></ul><hr /><h3 id="二第二章重点">二、第二章（重点）</h3><p>关系代数 P48</p><ul><li><p>概念解释：</p><blockquote><p>关系代数是一种抽象的查询语言，它用于对关系的运算来表示查询。</p><p>关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类。</p><ol type="1"><li>传统的集合运算将关系看成元组的集合，其运算是从关系的“水平”方向，即行的角度来进行；</li><li>而专门的关系运算不仅涉及行，而且涉及列。</li><li>比较运算符和逻辑运算符是用来辅助专门的关系运算符进行操纵的。</li></ol><table><thead><tr><th>运算符</th><th>含义</th><th></th></tr></thead><tbody><tr><td>集合 运算符</td><td>∪</td><td>并</td></tr><tr><td>-</td><td>差</td><td></td></tr><tr><td>∩</td><td>交</td><td></td></tr><tr><td>×</td><td>笛卡尔积</td><td></td></tr><tr><td>专门的 关系 运算符</td><td>σ</td><td>选择</td></tr><tr><td>π</td><td>投影</td><td></td></tr><tr><td>⋈</td><td>连接</td><td></td></tr><tr><td>÷</td><td>除</td><td></td></tr></tbody></table></blockquote></li><li><p>传统的集合运算：</p><blockquote><p>传统的集合运算是二目运算，包括并、差、交、笛卡尔积4种运算。</p><ul><li><p>并、差、交需要两张表结构相同。</p></li><li><p>笛卡尔积不需要两张表相同。</p><blockquote><p>这里的笛卡儿积严格地讲应该是广义的笛卡儿积,因为这里的笛卡尔积的元素是元组。两个分别为n目和m目的关系R和S的笛卡儿积是一个(n+m)列的元组的集合。元组的前n列是关系R的一个元组，后m列是关系S的一个元组。若R有k1个元组，S有k2个元组，则关系R和关系S的笛卡儿积有k1×k2个元组。</p></blockquote></li></ul></blockquote></li><li><p>专门的关系运算：</p><blockquote><p>专门的关系运算包括选择、投影、连接、除运算等。</p><ol type="1"><li><p>选择：选择又称为限制，它是在关系R中选择满足给定条件的诸元组。</p><blockquote><table><thead><tr><th>运算符</th><th>含义</th><th></th></tr></thead><tbody><tr><td>比较 运算符</td><td>&gt;</td><td>大于</td></tr><tr><td>≥</td><td>大于等于</td><td></td></tr><tr><td>＜</td><td>小于</td><td></td></tr><tr><td>≤</td><td>小于等于</td><td></td></tr><tr><td>=</td><td>等于</td><td></td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td></td></tr><tr><td>逻辑 运算符</td><td>¬</td><td>非</td></tr><tr><td>∧</td><td>与</td><td></td></tr><tr><td>∨</td><td>或</td><td></td></tr></tbody></table></blockquote></li><li><p>投影：关系R上的投影是从R中选择出若干属性列组成新的关系。</p><blockquote><p>投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组，因为取消了某些属性列后，就可能出现重复行，应取消这些完全相同的行。</p></blockquote></li><li><p>连接：连接也称为θ连接。它是从两个关系的笛卡儿积中选取属性间满足一定条件的元组。</p><blockquote><ul><li><p>θ为“=”的连接运算称为等值连接。</p><p>自然连接是一种特殊的等值连接,它要求两个关系中进行比较的分量必须是同名的属性组,并且在结果中把重复的属性列去掉。</p><p>一般的连接操作是从行的角度进行运算，但自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。</p></li><li><p>此时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，从而造成R中这些元组在操作时被会弃了，同样，S中某些元组也可能被会弃。这些被会弃的元组称为悬浮元组(dangiingtupie)。</p></li><li><blockquote><p>如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(NULL)，那么这种连接就叫做外连接(outerjoin):</p><p>如果只保留左边关系R中的悬浮元组就叫做左外连接(let outerjoin或lettjoin);</p><p>如果只保留右边关系S中的悬浮元组就叫做右外连接(right outerjoin 或right join)。</p></blockquote></li></ul></blockquote></li><li><p>除运算:设关系R除以关系S的结果为关系T，则<code>T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中</code>。</p><blockquote><p>给定关系R（X,Y）和S（Y,Z），其中X,Y,Z为属性组。R中的Y和S中的Y可以有不同的属性名，但必须出自相同的域集。</p><p>求解步骤：</p><ol type="1"><li>求R表各分量的象集；</li><li>依次查看R中各分量的象集哪个包含S表对公共属性组的投影元组的集合；</li><li>最后得出符合的分量的关系。</li></ol></blockquote></li></ol></blockquote></li><li><p>本节介绍了8种关系代数运算，其中并、差、笛卡儿积、选择和投影这5种运算为基本的运算。</p><p>其他三种运算，即交、连接和除，均可以用这5种基本运算来表达。引进它们并不增加语言的能力，但可以简化表达。</p><p>关系代数中，这些运算经有限次复合后形成的表达式称为<code>关系代数表达式</code>。</p></li></ul><hr /><h3 id="三第三章重点">三、第三章（重点）</h3><ul><li><p>数据库查询</p></li><li><p>创建数据库</p></li><li><p>建索引，建视图</p></li><li><p>单表查询、多表查询</p></li><li><p>多看本章例题</p></li><li><p>3.3 数据定义</p><blockquote><p>关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式表、视图和索引等。因此SQL的数据定义功能包括模式定义、表定义、视图和索引的定义如表3.3 所示。</p><table><thead><tr><th>操作对象</th><th>操作方式</th><th></th><th></th></tr></thead><tbody><tr><td>创建</td><td>删除</td><td>修改</td><td></td></tr><tr><td>模式</td><td>CREATE SCHEMA</td><td>DROP SCHEMA</td><td>null</td></tr><tr><td>表</td><td>CREATE TABLE</td><td>DROP TABLE</td><td>ALTER TABLE</td></tr><tr><td>视图</td><td>CREATE VIEW</td><td>DROP VIEW</td><td>null</td></tr><tr><td>索引</td><td>CREATE INDEX</td><td>DROP INDEX</td><td>ALTER INDEX</td></tr></tbody></table><p>一个关系数据库管理系统的实例(instance)中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。</p></blockquote></li></ul><hr /><h3 id="四第四章">四、第四章</h3><ul><li><p>安全性完整性 P133</p><blockquote><p>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</p><ul><li>用户身份鉴别：<ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul></li></ul></blockquote></li><li><p>授予与收回 P141</p></li></ul><hr /><h3 id="五第五章">五、第五章</h3><ul><li>用户定义的完整性</li><li>参照完整性</li><li>实体完整性</li></ul><hr /><h3 id="六第六章">六、第六章</h3><ul><li>给出题目写出函数依赖 P180</li><li>判断是几范式</li><li>然后解释为什么是几范式</li><li>最后修改为更高一级的范式</li></ul><p>一般考不到四范式</p><hr /><h3 id="七第七章">七、第七章</h3><ul><li>概念结构设计 P 215</li><li>逻辑结构设计</li><li>物理结构设计</li><li>给出一段话画出E-R图</li><li>E-R图是概念结构设计</li><li>根据E-R图转换成关系模式 P 231</li></ul><hr /><h3 id="九第九章">九、第九章</h3><ul><li><p>查询步骤 P 275</p><blockquote><ul><li>查询分析</li><li>查询检查</li><li>查询优化</li><li>查询执行</li></ul></blockquote></li><li><p>查询优化 P 280</p></li><li><p>代数优化：查询树 P 282</p><blockquote><ul><li>选择运算应尽可能先做。</li><li>把投影运算和选择运算同时进行。</li><li>把投影同其前或后的双目运算结合起来。</li><li>把某些选择同在它前面要执行的笛卡儿积结合起来成为一个连接运算。</li><li>找出公共子表达式。</li></ul></blockquote></li></ul><hr /><h3 id="十第十章">十、第十章</h3><ul><li><p>事务基本概念 P 293:我们说事务是用户定义的一个数据库的操作序列，要么全做，要么全不做是一个不可分割的单位</p><blockquote><p><code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持续性（永久性）</code>。</p><p>4个特征：</p><p>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p>一致性：事务执行的结果必修是使数据库从一个一致性状态到另外一个一致性状态。</p><p>隔离性：一个事务的执行不能被其他事务干扰。</p><p>持续性：持续性也称为永久性。指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</p></blockquote></li><li><p>正常结束，非正常结束</p></li><li><p>事务故障，登记日志 P 298</p></li><li><p>恢复的实现技术 P 297</p></li><li><p>恢复策略 P 300</p></li><li><blockquote><p>题目</p><p><strong>考虑下图所示的日志记录：</strong></p><table><thead><tr><th>序号</th><th>日志</th></tr></thead><tbody><tr><td>1</td><td>T1：开始</td></tr><tr><td>2</td><td>T1：写A，A=10</td></tr><tr><td>3</td><td>T2：开始</td></tr><tr><td>4</td><td>T2：写B，B=9</td></tr><tr><td>5</td><td>T1：写C，C=11</td></tr><tr><td>6</td><td>T1：提交</td></tr><tr><td>7</td><td>T2：写C，C=13</td></tr><tr><td>8</td><td>T3：开始</td></tr><tr><td>9</td><td>T3：写A，A=8</td></tr><tr><td>10</td><td>T2：回滚</td></tr><tr><td>11</td><td>T3：写B，B=7</td></tr><tr><td>12</td><td>T4：开始</td></tr><tr><td>13</td><td>T3：提交</td></tr><tr><td>14</td><td>T4：写C，C=12</td></tr></tbody></table><p><strong>假设开始时A，B，C的值都是0：</strong></p><p>（1）<strong>如果系统故障发生在14之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1T3,T2T4</strong></p><p><strong>A=8,B=7;C=11</strong></p><p>（2）<strong>如果系统故障发生在10之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1,T2T3</strong></p><p><strong>A=10,B=0,C=11</strong></p><p>（3）<strong>如果系统故障发生在9之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1,T2T3</strong></p><p><strong>A=10,B=0,C=11</strong></p><p>（4）<strong>如果系统故障发生在7之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值。</strong></p><p><strong>T1,T2</strong></p><p><strong>A=10,B=0,C=11</strong></p></blockquote></li></ul><hr /><h3 id="十一第十一章">十一、第十一章</h3><ul><li><p>给出并行的图判断是哪种并行错误：丢失修改、不可重复度，读脏数据 P311</p></li><li><p>判断之后怎么解决，根据封锁协议回答 P 313</p><blockquote><p>****题目1********．补充题****</p><p><strong>针对下面三种不一致性给出解决方案。</strong></p><ol type="a"><li>丢失修改：一级封锁协议</li></ol><ul><li>事务t在修改数据r之前必须先对其加X锁。直到事务结束才释放</li></ul><ol start="2" type="a"><li>不可重复读：三级封锁协议</li></ol><ul><li>在一级封锁协议的基础上增加事务t在读取数据r之前必须先对其加s锁，直到事务结束释放</li></ul><ol start="3" type="a"><li>读“脏”数据：二级封锁协议</li></ol><ul><li>在一级封锁协议的基础上增加事务t在读取数据r之前必须先对其加s锁，读完后即可释放s锁</li></ul></blockquote></li><li><p>死锁的预防 P 315</p></li><li><p>并发调度的可串行性 P 317</p><p><ahref="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/冲突操作.png"><imgsrc="冲突操作.png" alt="冲突情况" /></a></p><blockquote><p><ahref="https://blog.csdn.net/bijingrui/article/details/105479502">可串行化冲突可串行化 判断方法</a></p><p>****题目********2********．****</p><p><strong>判断r3(B)r1(A)w3(B)r2(B)r2(A)w2(B)r1(B)w1(A)是否是冲突可串行化调度。</strong></p><p>Sc1=<strong>r3(B)r1(A)w3(B)r2(B)r2(A)w2(B)r1(B)w1(A)</strong></p><p><strong>1.可以先把r1(A)</strong><em>*和*</em><strong>w3(B)交换</strong></p><p><strong>得到Sc2=r3(B)w3(B)r1(A)r2(B)r2(A)w2(B)r1(B)w1(A)</strong></p><p><strong>2.然后再把r1（A）和r2(B)r2(A)w2(B)交换</strong></p><p><strong>得到Sc3=r3(B)w3(B)r2(B)r2(A)w2(B)r1(A)r1(B)w1(A)</strong></p><p><strong>3.Sc3等价于一个串行调度T3T2T1，并且两次操作都是基于不冲突操作的，所以Sc1即题目为冲突可串行化调度</strong></p></blockquote></li><li><p>两段锁协议 P 319</p></li></ul><hr /><h3 id="结语">结语：</h3><p>以上就是本次2024数据库的考试范围，没提到就是不考，在复习的时候需要着重看例题加深理解</p><p>最后如果本篇文章对你有帮助，请在本文下方评论学到了！</p><section id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>Rong Yu Du<a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>数据库</tag>
      
      <tag>详解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024数据库复习范围</title>
    <link href="/2024/07/13/2024%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%8C%83%E5%9B%B4/"/>
    <url>/2024/07/13/2024%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库考试范围">数据库考试范围</h1><h3id="ps以下页码以数据库系统概论第五版为主">PS：以下页码以《数据库系统概论第五版》为主</h3><h3 id="一第一章">一、第一章</h3><ul><li>数据库基本概念 P3</li><li>数据、数据库管理系统 P4-P5</li><li>三个阶段：人工管理阶段、文件系统阶段、数据库系统阶段 P6-P9</li><li>三个模型：层次模式，网状模型，关系模型 P19-P27</li><li>数据操作的组成要素：数据结构，数据操作，数据的完整性约束条件P18</li><li>数据库系统的三级模式结构：模式、外模式、内模式 P29</li><li>数据库管理员DBA P31</li></ul><hr /><h3 id="二第二章重点">二、第二章（重点）</h3><p>关系代数 P48</p><hr /><h3 id="三第三章重点">三、第三章（重点）</h3><ul><li>数据库查询</li><li>创建数据库</li><li>建索引，建视图</li><li>单表查询、多表查询</li><li>多看本章例题</li></ul><hr /><h3 id="四第四章">四、第四章</h3><ul><li>安全性完整性 P133</li><li>授予与收回 P141</li></ul><hr /><h3 id="五第五章">五、第五章</h3><ul><li>用户定义的完整性</li><li>参照完整性</li><li>实体完整性</li></ul><hr /><h3 id="六第六章">六、第六章</h3><ul><li>给出题目写出函数依赖 P180</li><li>判断是几范式</li><li>然后解释为什么是几范式</li><li>最后修改为更高一级的范式</li></ul><p>一般考不到四范式</p><hr /><h3 id="七第七章">七、第七章</h3><ul><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>给出一段话画出E-R图</li><li>E-R图是概念结构设计</li><li>根据E-R图转换成关系模式 P231</li></ul><hr /><h3 id="九第九章">九、第九章</h3><ul><li>查询步骤 P275</li><li>查询优化 P280</li><li>代数优化：查询树 P282</li></ul><hr /><h3 id="十第十章">十、第十章</h3><ul><li>事务基本概念 P293:我们说事务是用户定义的一个数据库的操作序列，要么全做，要么全不做是一个不可分割的单位</li><li>正常结束，非正常结束</li><li>事务故障，登记日志 P298</li><li>恢复的实现技术 P297</li><li>恢复策略 P300</li></ul><hr /><h3 id="十一第十一章">十一、第十一章</h3><ul><li>给出并行的图判断是哪种并行错误：丢失修改、不可重复度，读脏数据P311</li><li>判断之后怎么解决，根据封锁协议回答 P313</li><li>死锁的预防 P315</li><li>并发调度的可串行性 P317</li><li>两段锁协议 P319</li></ul><hr /><h3 id="结语">结语：</h3><p>以上就是本次2024数据库的考试范围，没提到就是不考，在复习的时候需要着重看例题加深理解</p><p>最后如果本篇文章对你有帮助，请在本文下方评论学到了！</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>数据库</tag>
      
      <tag>考试范围</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/15/hello-world/"/>
    <url>/2024/01/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/01/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/01/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<figure><img src="小黄鸭头像.jpg" alt="小黄鸭头像" /><figcaption aria-hidden="true">小黄鸭头像</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
