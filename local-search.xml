<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spark编程题：使用RDD求支付金额的Top N值</title>
    <link href="/2025/05/13/Spark%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8RDD%E6%B1%82%E6%94%AF%E4%BB%98%E9%87%91%E9%A2%9D%E7%9A%84Top-N%E5%80%BC/"/>
    <url>/2025/05/13/Spark%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8RDD%E6%B1%82%E6%94%AF%E4%BB%98%E9%87%91%E9%A2%9D%E7%9A%84Top-N%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="Spark-编程题：使用-RDD-求支付金额的-Top-N-值"><a href="#Spark-编程题：使用-RDD-求支付金额的-Top-N-值" class="headerlink" title="Spark 编程题：使用 RDD 求支付金额的 Top N 值"></a>Spark 编程题：使用 RDD 求支付金额的 Top N 值</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>使用 Spark RDD 从给定的支付数据中找出支付金额（payment 字段）最高的前 5 个值，并按降序排列输出。数据格式为逗号分隔的字符串，其中第三个字段是支付金额。具体要求如下：</p><ol><li>从 HDFS 或本地文件系统读取数据</li><li>过滤掉无效数据行</li><li>提取 payment 字段</li><li>转换为键值对形式</li><li>按 payment 值降序排序</li><li>输出前 5 个最高支付金额及其排名</li></ol><p>测试数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot;1,Alice,50,Food&quot;,<br>&quot;2,Bob,60,Electronics&quot;,<br>&quot;3,Charlie,788,Clothing&quot;,<br>&quot;4,David,60,Books&quot;,<br>&quot;5,Eve,120,Food&quot;,<br>&quot;6,Frank,95,Electronics&quot;,<br>&quot;7,Grace,200,Books&quot;,<br>&quot;,,,&quot;,  // 无效数据<br>&quot;8,Hank,150,Clothing&quot;,<br>&quot;9,Ivy,300,Electronics&quot;,<br>&quot;10,Jack,250,Food&quot;<br></code></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><ol><li><strong>数据读取</strong>：利用 Spark 的<code>textFile</code>方法从 HDFS 或本地文件系统读取数据文件。</li><li><strong>数据清洗</strong>：对读取的数据进行处理，通过字符串分割、条件判断等操作，过滤掉无效数据行。</li><li><strong>字段提取与转换</strong>：提取支付金额字段，并将数据转换为键值对形式，方便后续排序操作。</li><li><strong>排序</strong>：使用<code>sortBy</code>方法按照支付金额进行降序排序。</li><li><strong>结果输出</strong>：选取排序后的数据中的前 5 条记录，输出其排名和支付金额。</li></ol><h2 id="三、详细步骤"><a href="#三、详细步骤" class="headerlink" title="三、详细步骤"></a>三、详细步骤</h2><h3 id="3-1-准备测试数据"><a href="#3-1-准备测试数据" class="headerlink" title="3.1 准备测试数据"></a>3.1 准备测试数据</h3><p>在本地创建一个 CSV 格式的文件，用于存储测试数据。在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; payment_data.csv &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">1,Alice,50,Food</span><br><span class="hljs-string">2,Bob,60,Electronics</span><br><span class="hljs-string">3,Charlie,788,Clothing</span><br><span class="hljs-string">4,David,60,Books</span><br><span class="hljs-string">5,Eve,120,Food</span><br><span class="hljs-string">6,Frank,95,Electronics</span><br><span class="hljs-string">7,Grace,200,Books</span><br><span class="hljs-string">,,,</span><br><span class="hljs-string">8,Hank,150,Clothing</span><br><span class="hljs-string">9,Ivy,300,Electronics</span><br><span class="hljs-string">10,Jack,250,Food</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>上述命令使用<code>cat &gt;</code>创建一个名为<code>payment_data.csv</code>的文件，并将测试数据写入其中。完成后，可以使用<code>cat payment_data.csv</code>命令查看文件内容，确认数据写入正确。</p><h3 id="3-2-启动-HDFS"><a href="#3-2-启动-HDFS" class="headerlink" title="3.2 启动 HDFS"></a>3.2 启动 HDFS</h3><p>如果计划将数据存储在 HDFS 上，需要先确保 HDFS 服务正常启动。在 Hadoop 环境中，执行以下命令启动 HDFS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">start-dfs.sh<br></code></pre></td></tr></table></figure><p>启动完成后，可以使用<code>jps</code>命令查看进程，确认<code>NameNode</code>和<code>DataNode</code>进程已经正常运行。</p><h3 id="3-3-将数据上传至-HDFS"><a href="#3-3-将数据上传至-HDFS" class="headerlink" title="3.3 将数据上传至 HDFS"></a>3.3 将数据上传至 HDFS</h3><p>在 HDFS 启动后，创建存储数据的目录，并将本地的测试数据文件上传至 HDFS。执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">mkdir</span> -p /user/hadoop/data<br>hdfs dfs -put payment_data.csv /user/hadoop/data/<br></code></pre></td></tr></table></figure><p>上述命令首先在 HDFS 中创建了<code>/user/hadoop/data</code>目录（如果目录不存在），然后将本地的<code>payment_data.csv</code>文件上传至该目录。</p><p>上传完成后，可以使用以下命令验证数据是否成功上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdfs dfs -<span class="hljs-built_in">ls</span> /user/hadoop/data/<br>hdfs dfs -<span class="hljs-built_in">cat</span> /user/hadoop/data/payment_data.csv<br></code></pre></td></tr></table></figure><p><code>hdfs dfs -ls</code>命令用于列出目录下的文件，<code>hdfs dfs -cat</code>命令用于查看文件内容。</p><h3 id="3-4-编写-Spark-代码"><a href="#3-4-编写-Spark-代码" class="headerlink" title="3.4 编写 Spark 代码"></a>3.4 编写 Spark 代码</h3><p>使用文本编辑器（如<code>vi</code>或<code>vim</code>）创建一个 Python 文件，命名为<code>top_n_payments.py</code>，并编写以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pyspark <span class="hljs-keyword">import</span> SparkContext, SparkConf<br><br><span class="hljs-comment"># 初始化SparkContext</span><br>conf = SparkConf().setAppName(<span class="hljs-string">&quot;TopNPayments&quot;</span>)<br>sc = SparkContext(conf=conf)<br><br><span class="hljs-comment"># 读取HDFS数据，需根据实际情况修改路径</span><br>file_path = <span class="hljs-string">&quot;hdfs://localhost:9000/user/hadoop/data/payment_data.csv&quot;</span><br><br><span class="hljs-comment"># 处理数据</span><br>payments_rdd = sc.textFile(file_path) \<br>    .<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> line: line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)) \<br>    .<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> parts: <span class="hljs-built_in">len</span>(parts) &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> parts[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> parts[<span class="hljs-number">2</span>]) \<br>    .<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> parts: (<span class="hljs-built_in">int</span>(parts[<span class="hljs-number">0</span>]), <span class="hljs-built_in">float</span>(parts[<span class="hljs-number">2</span>]))) \<br>    .sortBy(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], ascending=<span class="hljs-literal">False</span>) \<br>    .take(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;排名\t支付金额&quot;</span>)<br><span class="hljs-keyword">for</span> rank, (user_id, amount) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(payments_rdd, <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 使用 str.format() 替代 f-strings，兼容Python 2.x和3.x</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;\t&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rank, amount))<br><br><span class="hljs-comment"># 停止SparkContext</span><br>sc.stop()<br></code></pre></td></tr></table></figure><p>代码说明：</p><ul><li><strong>初始化 SparkContext</strong>：通过<code>SparkConf</code>和<code>SparkContext</code>创建 Spark 应用程序的上下文，设置应用名称为<code>TopNPayments</code>。</li><li><strong>数据读取</strong>：使用<code>sc.textFile</code>方法从 HDFS 路径读取数据文件。</li><li>数据处理<ul><li><code>map</code>方法将每一行数据按逗号分割成列表。</li><li><code>filter</code>方法过滤掉数据不完整（字段数量不足 3 个）或关键字段为空的无效数据行。</li><li>再次使用<code>map</code>方法将数据转换为键值对形式，键为用户 ID（转换为整数类型），值为支付金额（转换为浮点数类型）。</li><li><code>sortBy</code>方法按照支付金额（值）进行降序排序。</li><li><code>take</code>方法获取排序后数据的前 5 条记录。</li></ul></li><li><strong>结果输出</strong>：遍历前 5 条记录，输出其排名和支付金额。</li><li><strong>停止 SparkContext</strong>：在程序执行完毕后，停止 Spark 应用程序的上下文。</li></ul><h3 id="3-5-提交-Spark-作业"><a href="#3-5-提交-Spark-作业" class="headerlink" title="3.5 提交 Spark 作业"></a>3.5 提交 Spark 作业</h3><p>在命令行中执行以下命令提交 Spark 作业：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">spark-submit --master <span class="hljs-built_in">local</span>[*] top_n_payments.py<br></code></pre></td></tr></table></figure><p><code>--master local[*]</code>表示在本地模式下运行 Spark 作业，使用所有可用的 CPU 核心。执行命令后，Spark 会开始处理数据，并输出支付金额最高的前 5 个值及其排名。</p><p><img src="/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%80%BC/image-20250513175857387.png" alt="image-20250513175857387"></p><h2 id="四、常见问题及解决方法"><a href="#四、常见问题及解决方法" class="headerlink" title="四、常见问题及解决方法"></a>四、常见问题及解决方法</h2><h3 id="4-1-数据读取失败"><a href="#4-1-数据读取失败" class="headerlink" title="4.1 数据读取失败"></a>4.1 数据读取失败</h3><p>如果出现数据读取失败的情况，可能原因如下：</p><ul><li><strong>文件路径错误</strong>：确保<code>file_path</code>变量中的 HDFS 路径与实际存储路径一致，检查 NameNode 地址和端口是否正确。</li><li><strong>HDFS 服务未启动</strong>：使用<code>jps</code>命令检查<code>NameNode</code>进程是否正常运行，若未运行，需启动 HDFS 服务。</li><li><strong>权限问题</strong>：确认运行 Spark 作业的用户有权限访问 HDFS 中的数据文件，可以通过<code>hdfs dfs -chmod</code>命令修改文件权限。</li></ul><h3 id="4-2-代码语法错误"><a href="#4-2-代码语法错误" class="headerlink" title="4.2 代码语法错误"></a>4.2 代码语法错误</h3><p>如遇到<code>SyntaxError</code>错误，可能是由于 Python 版本不兼容导致。例如，代码中使用了 f-strings（Python 3.6+ 支持），而环境中的 Python 版本低于 3.6。此时可以将 f-strings 替换为<code>str.format()</code>或<code>%</code>格式化方法，或者升级 Python 版本到 3.6 及以上。</p><h3 id="4-3-连接-HDFS-失败"><a href="#4-3-连接-HDFS-失败" class="headerlink" title="4.3 连接 HDFS 失败"></a>4.3 连接 HDFS 失败</h3><p>当出现连接 HDFS 失败的错误，如<code>java.net.ConnectException: Connection refused</code>，可参考以下解决方法：</p><ul><li><strong>检查 HDFS 服务状态</strong>：使用<code>start-dfs.sh</code>启动 HDFS 服务，并通过<code>jps</code>命令确认<code>NameNode</code>和<code>DataNode</code>进程正常运行。</li><li><strong>查看日志文件</strong>：查看<code>NameNode</code>的日志文件（通常位于<code>$HADOOP_HOME/logs</code>目录下），获取详细的错误信息，根据提示进行问题排查。</li><li><strong>检查防火墙和 SELinux</strong>：临时关闭防火墙和 SELinux 进行测试，若关闭后能正常连接，则需配置防火墙规则允许 HDFS 相关端口的访问。</li><li><strong>检查配置文件</strong>：确认<code>core-site.xml</code>和<code>hdfs-site.xml</code>中的配置正确，尤其是<code>fs.defaultFS</code>和<code>dfs.namenode.http-address</code>等关键属性。</li></ul><p>通过以上详细的步骤和问题解决方法，希望能够帮助你顺利完成使用 Spark RDD 求支付金额 Top N 值的编程任务。在实际操作过程中，可能会遇到各种不同的情况，需要根据具体的错误提示和环境进行灵活处理 。</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路径问题-v1</title>
    <link href="/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/"/>
    <url>/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/</url>
    
    <content type="html"><![CDATA[<h1 id="景区路径规划系统"><a href="#景区路径规划系统" class="headerlink" title="景区路径规划系统"></a>景区路径规划系统</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>本项目是一个基于Python的景区路径规划系统，使用NetworkX进行图论计算和Plotly进行可视化展示。系统能够帮助游客规划景区游览路线，包括查找最短路径、记录已游览景点、推荐未游览景点以及计算环游所有景点的最短路线等功能。</p><p><strong>项目仓库地址</strong>：<a href="https://github.com/xiazhimiao/python/tree/master/%E6%99%AF%E5%8C%BA%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98">GitHub仓库</a></p><p><strong>克隆代码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/xiazhimiao/python.git<br><span class="hljs-built_in">cd</span> python/景区路径问题<br></code></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">景区路径问题/<br>├── edges.xlsx            <span class="hljs-comment"># 景区边信息（路径连接关系）</span><br>├── nodes.xlsx           <span class="hljs-comment"># 景区节点信息（景点数据）</span><br>├── screenshots/         <span class="hljs-comment"># 示例截图目录</span><br>│   ├── graph_visualization.png<br>│   ├── shortest_path_demo.png<br>│   └── unvisited_attractions.png<br>├── scenic_path_v0.py    <span class="hljs-comment"># 项目早期版本代码</span><br>├── scenic_path_v1.py    <span class="hljs-comment"># 项目主程序（当前版本）</span><br>├── visited.xlsx         <span class="hljs-comment"># 已游览景点记录</span><br>├── 文字转表格<span class="hljs-string">.py</span>        <span class="hljs-comment"># 辅助工具（数据预处理）</span><br>└── 项目结构图<span class="hljs-string">.png</span>       <span class="hljs-comment"># 项目结构示意图</span><br></code></pre></td></tr></table></figure><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><h3 id="1-景区地图可视化"><a href="#1-景区地图可视化" class="headerlink" title="1. 景区地图可视化"></a>1. 景区地图可视化</h3><ul><li><p>从Excel文件读取节点和边数据</p></li><li><p>生成交互式景区地图可视化</p></li><li><p>显示景点名称和路径距离</p><p><img src="/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/graph_visualization.png" alt="景区地图可视化"></p></li></ul><h3 id="2-路径规划功能"><a href="#2-路径规划功能" class="headerlink" title="2. 路径规划功能"></a>2. 路径规划功能</h3><ul><li><p><strong>最短路径查询</strong>：查找两个景点之间的最短路径</p></li><li><p><strong>未游览景点推荐</strong>：基于当前位置推荐未游览景点（按距离排序）</p></li><li><p><strong>环游路线规划</strong>：计算从起点出发游览所有景点的最短路线（TSP问题）</p><p><img src="/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/shortest_path_demo.png" alt="最短路径查询示例"></p><p><img src="/2025/04/19/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98-v1/unvisited_attractions.png" alt="未游览景点推荐示例"></p></li></ul><blockquote><p>注：环游路线规划功能由于采用回溯算法，在景点数量较多时计算耗时较长，暂未提供示例截图。建议在实际使用中景点数量控制在10个以内。</p></blockquote><h3 id="3-游览记录管理"><a href="#3-游览记录管理" class="headerlink" title="3. 游览记录管理"></a>3. 游览记录管理</h3><ul><li>手动添加已游览景点</li><li>查看已游览景点列表</li><li>自动排除已游览景点推荐</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li>Python 3.6+</li><li>必要库：<code>pandas</code>, <code>networkx</code>, <code>plotly</code>, <code>openpyxl</code></li></ul><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pandas networkx plotly openpyxl<br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>准备数据：</p><ul><li><code>nodes.xlsx</code>：包含景点信息（序号、顶点名称）</li><li><code>edges.xlsx</code>：包含路径信息（起始节点、终止节点、权重&#x2F;公里）</li></ul></li><li><p>运行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python scenic_path_v1.py<br></code></pre></td></tr></table></figure></li><li><p>选择功能：</p><ul><li>1: 查找最短路径</li><li>2: 查找未走过的景点</li><li>3: 手动添加走过的景点</li><li>4: 打印已走过的景点</li><li>5: 查找环游所有景点的最短路线</li><li>6: 退出</li></ul></li></ol><h2 id="数据格式要求"><a href="#数据格式要求" class="headerlink" title="数据格式要求"></a>数据格式要求</h2><h3 id="nodes-xlsx"><a href="#nodes-xlsx" class="headerlink" title="nodes.xlsx"></a>nodes.xlsx</h3><table><thead><tr><th>序号</th><th>顶点名称</th></tr></thead><tbody><tr><td>1</td><td>景点A</td></tr><tr><td>2</td><td>景点B</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="edges-xlsx"><a href="#edges-xlsx" class="headerlink" title="edges.xlsx"></a>edges.xlsx</h3><table><thead><tr><th>起始节点</th><th>终止节点</th><th>权重(公里)</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>1.5</td></tr><tr><td>2</td><td>3</td><td>2.0</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="visited-xlsx（自动生成）"><a href="#visited-xlsx（自动生成）" class="headerlink" title="visited.xlsx（自动生成）"></a>visited.xlsx（自动生成）</h3><table><thead><tr><th>已走过</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr><tr><td>…</td></tr></tbody></table><h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><ul><li><strong>最短路径</strong>：使用Dijkstra算法</li><li><strong>环游路线</strong>：使用回溯算法解决旅行商问题(TSP)（注：景点数量多时性能有限）</li><li><strong>布局算法</strong>：使用NetworkX的spring_layout进行可视化布局</li></ul><h2 id="未来改进"><a href="#未来改进" class="headerlink" title="未来改进"></a>未来改进</h2><ol><li>增加更高效的TSP求解算法（如动态规划或近似算法）</li><li>添加用户界面（Web或桌面应用）</li><li>支持实时路径更新和多人协作记录</li><li>集成地图API提供更精确的路径计算</li><li>优化环游路线算法性能</li></ol><h2 id="作者信息"><a href="#作者信息" class="headerlink" title="作者信息"></a>作者信息</h2><p>[XiaZhiMiao]<br>[xia_12_13]<br>[2025&#x2F;4&#x2F;19]</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>景区路径规划</tag>
      
      <tag>NetworkX</tag>
      
      <tag>Plotly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git含有隐私信息导致推送失败的解决方案</title>
    <link href="/2024/08/01/Git%E5%90%AB%E6%9C%89%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E5%AF%BC%E8%87%B4%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/08/01/Git%E5%90%AB%E6%9C%89%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E5%AF%BC%E8%87%B4%E6%8E%A8%E9%80%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h4 id="背景引入："><a href="#背景引入：" class="headerlink" title="背景引入："></a>背景引入：</h4><blockquote><p>我在推送考试系统到远程仓库时，出现一个错误：.yml配置文件含有阿里云oos的密钥信息</p><p>我尝试删除之后推送也没有解决：</p><p>因为之前本地仓库master分支已经提交过含有隐私信息的版本，此时即便是修改后重新提交本地仓库，上一个分支版本中依旧含有隐私信息导致推送失败</p></blockquote><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><blockquote><ol><li>最简单的解决方案：如果是个人版本库不注重版本的前提下，完全可以删除当前git仓库的版本信息，也就是<code>.git</code>文件夹，之后把隐私文件中的隐私信息一并删除或者不纳入版本控制，重新<code>git init</code>即可解决。</li><li>如果不希望删除<code>.git</code>,怎么解决，这个比较麻烦，而且网上几乎都是这种解决方案：</li></ol><ul><li>就是找到之前含有隐私信息的那个版本，写一个sh脚本替换或者删除其中的隐私信息，这样也就破坏了版本结构。</li><li>或者直接删除含有隐私信息的那个版本。</li><li>最后就是回退到不含有隐私信息的版本。</li></ul><p>个人推荐直接第一种解决，省事图方便。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过shell脚本自动部署项目</title>
    <link href="/2024/07/31/%E9%80%9A%E8%BF%87shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/07/31/%E9%80%9A%E8%BF%87shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤:"></a>操作步骤:</h4><ol><li>在Linux中安装Git</li><li>在Linux中安装maven</li><li>编写Shell脚本(拉取代码、编译、打包、启动）</li><li>为用户授予执行Shell脚本的权限</li><li>执行shell脚本</li></ol><hr><h4 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h4><ol><li><p>在Linux中安装Git</p><blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">list</span> git<br>yum <span class="hljs-keyword">install</span> git<br><br>CMAKE<br></code></pre></td></tr></table></figure></blockquote></li><li><p>使用Git克隆代码</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">cd /usr/local/<br>git clone <span class="hljs-link">https://gitee.com/</span>[<span class="hljs-string">占位</span>]/[占位].git<br><br>ASCIIDOC<br></code></pre></td></tr></table></figure></blockquote></li><li><p>将maven安装包上传到Linux，在Linux中安装maven</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf apache-maven-3.5.4-bin.tar.gz-C/usr/local<br>vim /etc/profile<br>修改配置文件，加入如下内容<br><span class="hljs-built_in">export</span> MAVENIHOME=/usr/local/apache-maven-3.5.4<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA</span> HOME/bin:<span class="hljs-variable">$MAVEN</span> HOME/bin:<span class="hljs-variable">$PATH</span><br><br><br><span class="hljs-built_in">source</span> /etc/profile<br>mvn -version<br>vim /usr/local/apache-maven-3.5.4/conf/settings.xml<br>修改配置文件内容如下<br>&lt;localRepository&gt;/usr/local/repo&lt;/localRepository&gt;<br><br>BASH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>Shell脚本</p><blockquote><p>可以创建一个sh脚本在&#x2F;usr&#x2F;local&#x2F;sh目录下</p></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> =================================<br><span class="hljs-built_in">echo</span>  自动化部署脚本启动<br><span class="hljs-built_in">echo</span> =================================<br><br><span class="hljs-built_in">echo</span> 停止原来运行中的工程<br>APP_NAME=helloworld<br><br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Process...&#x27;</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">sleep</span> 2<br>tpid=`ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v grep|grep -v <span class="hljs-built_in">kill</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;tpid&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Kill Process!&#x27;</span><br>    <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$tpid</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Stop Success!&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> 准备从Git仓库拉取最新代码<br><span class="hljs-built_in">cd</span> /usr/local/helloworld<br><br><span class="hljs-built_in">echo</span> 开始从Git仓库拉取最新代码<br>git pull<br><span class="hljs-built_in">echo</span> 代码拉取完成<br><br><span class="hljs-built_in">echo</span> 开始打包<br>output=`mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>`<br><br><span class="hljs-built_in">cd</span> target<br><br><span class="hljs-built_in">echo</span> 启动项目<br><span class="hljs-built_in">nohup</span> java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; helloworld.log &amp;<br><span class="hljs-built_in">echo</span> 项目启动完成<br><br><br>SH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>为用户授权</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">chmod</span><span class="hljs-params">(英文全拼:change mode)</span></span>命令是控制用户对文件的权限的命令<br>Linux中的权限分为:读(<span class="hljs-attribute">r</span>)、写(w)、执行(x)三种权限<br>Linux的文件调用权限分为三级:文件所有者(<span class="hljs-number">0</span>wner)、用户组(Group)、其它用户(<span class="hljs-number">0</span>ther Users)<br>只有文件的所有者和超级用户可以修改文件或目录的权限要执行Shell脚本需要有对此脚本文件的执行权限，如果没有则不能执行<br><br>STYLUS<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-comment">1 root root 785 May 17 20:43 bootstart</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span><br><br><span class="hljs-comment">CEYLON</span><br></code></pre></td></tr></table></figure><p><a href="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/linux-file%E6%9D%83%E9%99%90.png"><img src="/2024/07/31/%E9%80%9A%E8%BF%87shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/linux-file%E6%9D%83%E9%99%90.png" alt="file权限"></a></p><hr><ul><li><p>chmod命令可以使用八进制数来指定权限</p></li><li><p>举例:</p><blockquote><p><code>chmod 777 bootstart.sh</code> 为所有用户授予读、写、执行权限<br><code>chmod 755 bootstart.sh</code> 为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</p><p><code>chmod 210 bootstart.sh</code> 为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</p></blockquote></li><li><blockquote><p>注意:三位数字分别代表不同用户的权限<br>第1位表示文件拥有者的权限<br>第2位表示同组用户的权限<br>第3位表示其他用户的权限</p></blockquote></li><li><table><thead><tr><th>#</th><th>权限</th><th>rwx</th></tr></thead><tbody><tr><td>7</td><td>读+写+执行</td><td>rwx</td></tr><tr><td>6</td><td>读+写</td><td>rw-</td></tr><tr><td>5</td><td>读+执行</td><td>r-x</td></tr><tr><td>4</td><td>只读</td><td>r–</td></tr><tr><td>3</td><td>写+执行</td><td>-wx</td></tr><tr><td>2</td><td>只写</td><td>-w-</td></tr><tr><td>1</td><td>只执行</td><td>–x</td></tr><tr><td>0</td><td>无</td><td>—</td></tr></tbody></table></li></ul></blockquote></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql-Linux</title>
    <link href="/2024/07/31/Mysql-Linux/"/>
    <url>/2024/07/31/Mysql-Linux/</url>
    
    <content type="html"><![CDATA[<ol><li>启动mysql</li></ol><blockquote><ul><li><p>查看mysql服务状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status mysqld</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure></li><li><p>启动mysql服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld<br><br>CRMSH<br></code></pre></td></tr></table></figure></li><li><p>开机启动mysql服务（说明:可以设置开机时启动mysql服务，避免每次开机启动mysql）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> mysqld<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></li><li><p>查看已经启动的服务</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat <span class="hljs-punctuation">-</span>tunlp<br>netstat <span class="hljs-punctuation">-</span>tunlp <span class="hljs-string">| grep mysql</span><br><br><span class="hljs-number">1</span>C<br></code></pre></td></tr></table></figure></li><li><p>查看mysql进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> mysql<br><br>VIM<br></code></pre></td></tr></table></figure></li></ul></blockquote><ol><li>登录MySOL数据库，查阅临时密码</li></ol><blockquote><ul><li>查看文件内容</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span><br><br>STATA<br></code></pre></td></tr></table></figure><ul><li>查看文件内容中包含password的行信息</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span> | grep password<br><br>STATA<br></code></pre></td></tr></table></figure></blockquote><ol><li>登录MySOL，修改密码，开放访问权限</li></ol><blockquote><ul><li>登录mysql(使用临时密码登录)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br><br>CSS<br></code></pre></td></tr></table></figure><p>修改密码</p><ul><li>设置密码长度最低位数</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_length</span>=4;<br><br>ROUTEROS<br></code></pre></td></tr></table></figure><ul><li>设置密码安全等级低，便于密码可以修改成root</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=LOW;<br><br>ROUTEROS<br></code></pre></td></tr></table></figure><ul><li>设置密码为root</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">set password</span> = password(<span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-attribute">PGSQL</span><br></code></pre></td></tr></table></figure><ul><li>开启访问权限</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br>PGSQL<br></code></pre></td></tr></table></figure><ul><li>刷新权限，立即生效</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush privileges<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>mysql</tag>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装/卸载软件-rpm</title>
    <link href="/2024/07/31/Linux%E5%AE%89%E8%A3%85-%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-rpm/"/>
    <url>/2024/07/31/Linux%E5%AE%89%E8%A3%85-%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-rpm/</url>
    
    <content type="html"><![CDATA[<p>RPM软件包管理器是Linux用于管理和安装软件的工具</p><ol><li>检测当前系统是否安装MySQL数据库</li></ol><blockquote><ul><li><p>查询当前系统中安装的所有软件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rpm -qa</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure></li><li><p>查询当前系统中安装的名称带mysql的软件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mysql<br><br>VIM<br></code></pre></td></tr></table></figure></li><li><p>查询当前系统中安装的名称带mariadb的软件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> mariadb<br><br>VIM<br></code></pre></td></tr></table></figure></li></ul><p>PS:如果当前系统中已经安装有MySQL数据库，安装将失败。CentOS7自带mariadb，与MySQL数据库冲突。</p></blockquote><ol><li>卸载已经安装的冲突软件</li></ol><blockquote><p>卸载软件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">rpm -e <span class="hljs-comment">--nodeps 软件名称</span><br><br>ADA<br></code></pre></td></tr></table></figure></blockquote><ol><li>安装软件</li></ol><blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rpm</span> -ivh [<span class="hljs-regexp">*.rpm</span>]<br><br>NGINX<br></code></pre></td></tr></table></figure></blockquote><hr><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Yum</span><span class="hljs-params">(全称为 Yellow dog Updater, Modified)</span></span>是一个在Fedora和RedHat以及Cent0S中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。<br><br>STYLUS<br></code></pre></td></tr></table></figure><ol><li>搜索软件（yum）</li></ol><blockquote><p>搜索lrzsz安装包，命令为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum list lrzsz</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">EBNF</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>rz，sz是Linux&#x2F;Unix同Windows进行ZModem文件传输的命令行工具。</strong></p><p>rz 可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端，就算中间隔着跳板机也不影响。</p></blockquote></blockquote><ol><li>安装软件（yum）</li></ol><blockquote><p>使用yum命令在线安装，命令为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yuminstalllrzsz</span>.x86 <span class="hljs-number">64</span><br><br><span class="hljs-attribute">APACHE</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>rpm</tag>
      
      <tag>卸载</tag>
      
      <tag>安装</tag>
      
      <tag>RPM软件包管理器</tag>
      
      <tag>yum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连接远程数据库失败的原因</title>
    <link href="/2024/07/31/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <url>/2024/07/31/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>开启访问权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br><br>PGSQL<br></code></pre></td></tr></table></figure></li><li><p>开启服务器端口</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=3306/tcp</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">reload</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">ports</span><br><br><span class="hljs-comment">BRAINFUCK</span><br></code></pre></td></tr></table></figure></li><li><p>如果没有开启端口或者关闭防火墙，那么可以通过ssh进行连接数据库，</p><ul><li>常规连接就是远程连接，使用的账号权限是支持远程连接的，即权限为%.但如果没有连接成功就出现上面的1和2</li><li>ssh连接是因为你使用的账号不支持远程连接，只支持localhost本地连接，所以需要登录到数据库所在的服务器登录，即ssh登录</li><li>一般MySQL的管理员账户都是localhsot，比如root等</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux防火墙操作命令_</title>
    <link href="/2024/07/30/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/30/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ol><li><p>查看防火墙状态</p><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">systemctl <span class="hljs-built_in">status</span> firewalld 或者 firewall-cmd <span class="hljs-comment">--state</span><br><br>LINUX<br></code></pre></td></tr></table></figure></blockquote></li><li><p>暂时关闭防火墙</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br><br>ARDUINO<br></code></pre></td></tr></table></figure></blockquote></li><li><p>永久关闭防火墙(不建议操作)</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">disable</span> firewalld<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>开启防火墙</p><blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld<br><br>CRMSH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>开放指定端口</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=8080/tcp --permanent<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>关闭指定端口</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--remove-port</span>=8080/tcp --permanent<br><br>ROUTEROS<br></code></pre></td></tr></table></figure></blockquote></li><li><p>立即生效(开启或关闭端口后需要执行的命令，重新加载)</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br><br>ADA<br></code></pre></td></tr></table></figure></blockquote></li><li><p>查看开放的端口</p><blockquote><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">ports</span><br><br><span class="hljs-comment">BRAINFUCK</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-number">1</span>、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作<br><span class="hljs-number">2</span>、firewall-<span class="hljs-keyword">cmd</span><span class="language-bash">是Linux中专门用于控制防火墙的命令</span><br><span class="hljs-number">3</span>、为了保证系统安全，服务器的防火墙不建议关闭<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>防火墙</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS-第二天ip改变结果ssh连接不上的解决方案_</title>
    <link href="/2024/07/29/CentOS-%E7%AC%AC%E4%BA%8C%E5%A4%A9ip%E6%94%B9%E5%8F%98%E7%BB%93%E6%9E%9Cssh%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/29/CentOS-%E7%AC%AC%E4%BA%8C%E5%A4%A9ip%E6%94%B9%E5%8F%98%E7%BB%93%E6%9E%9Cssh%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>昨天ssh连接正常，今天打开虚拟机ip addr发现ip改变了，于是我改变了ssh软件的ip地址发现不行，之后网上试了防火墙之类的方法，想来也是方向错了。</p><p>既然昨天可以连接上去，今天的问题也就不是电脑防火墙的关系。</p><p>具体在桥接模式下自然分配的ip改变后为何不能连接，还不知道解决方案。以下内容是解决如何连上去的。</p><p>首先在桥接模式下设置静态ip以及网关。</p><blockquote><ul><li>使用如下命令打开虚拟网卡配置文件<br>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<br>输入字母键i可以进入插入状态，修改如下内容：<br>BOOTPROTO&#x3D;“static”<br>ONBOOT&#x3D;“yes”<br>IPADDR&#x3D;192.168.1.250(需要根据自己主机改变)<br>GATEWAY&#x3D;192.168.1.1(需要根据自己主机改变)<br>DNS1&#x3D;8.8.8.8</li><li>重启网卡<br>systemctl restart network</li></ul></blockquote><p>上面桥接模式下设置的静态ip可以在子网内随意选择，但网关（GATEWAY）只有一个。</p><p>电脑打开cmd+ipconfig查看无线局域网适配器 WLAN:</p><p>最后设置完成后，重新使用ssh工具连接虚拟机静态ip即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">已经试过的情况：不是缓存的问题，也不是防火墙的问题。<br>具体因为什么，评论区来个大哥解释。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2024/07/22/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/22/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git-常用命令"></a>Git-常用命令</h1><ol><li><h4 id="git全局设置信息"><a href="#git全局设置信息" class="headerlink" title="git全局设置信息"></a>git全局设置信息</h4><blockquote><p>设置用户信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xiazhimiao&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xiazhimiao@qq.com&quot;</span><br><br>GIT<br></code></pre></td></tr></table></figure><p>查看配置信息</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br><br>GIT<br></code></pre></td></tr></table></figure></blockquote></li><li><p>创建仓库</p><blockquote><p>创建本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br><br>GIT<br></code></pre></td></tr></table></figure><p>克隆远程仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">[远程仓库地址.git</span>]<br><br>CRMSH<br></code></pre></td></tr></table></figure><p>PS:仓库不能嵌套</p></blockquote></li><li><p>本地仓库常用命令</p><blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git status  查看文件状态<br><span class="hljs-comment">-------------- * 是通配符</span><br>git <span class="hljs-keyword">add</span>   将文件的修改加入暂存区<br>git <span class="hljs-keyword">reset</span>   将暂存区的文件取消暂存或者切换到指定版本<br><span class="hljs-comment">-------------- [文件名] </span><br><span class="hljs-comment">-------------- --hard [版本号]</span><br>git <span class="hljs-keyword">commit</span>  将暂存区的文件修改提交到版本库<br><span class="hljs-comment">--------------  -m &quot;记录&quot; [文件名]</span><br>git <span class="hljs-keyword">log</span>     查看日志<br><br>GIT<br></code></pre></td></tr></table></figure></blockquote></li><li><p>远程仓库操作</p><blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git remote     查看远程仓库<br>--------------  -v   查看远程仓库地址<br>git remote add 添加远程仓库<br>-------------- origin [远程仓库地址]<br>git <span class="hljs-keyword">clone</span>      <span class="hljs-title">从远程仓库克隆</span><br><span class="hljs-title">-------------- [url</span>]<br>git pull       从远程仓库拉取<br>-------------- origin <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push       推送到远程仓库<br>-------------- origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title">GIT</span><br></code></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Git</tag>
      
      <tag>常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS-7-ip-ens33为空的解决方案_</title>
    <link href="/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在此之前确保&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件中ONBOOT&#x3D;yes，然后</p><p>如下图：在VM虚拟机的<code>可移动设备</code>-&gt;<code>网络适配器</code>中选择<code>桥接模式</code>即可</p><p><a href="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/qiaojie.png"><img src="/2024/07/15/CentOS-7-ip-ens33%E4%B8%BA%E7%A9%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/qiaojie.png" alt="选择桥接"></a></p><p>选择桥接</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>CentOS</tag>
      
      <tag>ens33</tag>
      
      <tag>ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对数据库的详解文章</title>
    <link href="/2024/07/14/%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%A6%E8%A7%A3%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/14/%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%A6%E8%A7%A3%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库详解"><a href="#数据库详解" class="headerlink" title="数据库详解"></a>数据库详解</h1><h3 id="PS：以下页码以《数据库系统概论第五版》为主"><a href="#PS：以下页码以《数据库系统概论第五版》为主" class="headerlink" title="PS：以下页码以《数据库系统概论第五版》为主"></a>PS：以下页码以《数据库系统概论第五版》为主</h3><h3 id="一、第一章"><a href="#一、第一章" class="headerlink" title="一、第一章"></a>一、第一章</h3><ul><li><p>数据库基本概念 P3</p><blockquote><p><code>数据</code>、<code>数据库</code>、<code>数据库管理系统</code>和<code>数据库系统</code>是与数据库技术密切相关的四个基本概念</p></blockquote></li><li><p><code>数据</code>、<code>数据库</code>、<code>数据库管理系统</code>和<code>数据库系统</code> P4-P5</p><blockquote><ul><li><p>数据：数据是数据库中存储的基本对象；描述事物的符号记录称为数据。</p></li><li><p>数据库：数据库是长期储存在计算机内、有组织的、可共享是大量数据的集合。</p><blockquote><p>数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度[^冗余度拼音]、较高的数据独立性和易扩展性，并可为各种用户共享。</p><p>概括的讲，数据库数据具有永久存储、有组织和可共享三个基本特点。</p><p>[^冗余度拼音]: Rong Yu Du</p></blockquote></li></ul></blockquote><blockquote><ul><li><p>数据库管理系统：数据库管理系统和操作系统一样是计算机的基础软件，也是一个大型复杂的软件系统。它的主要功能包括以下几个方面：</p><blockquote><p>1.数据定义功能。</p><p>2.数据组织、存储和管理各种数据。</p><p>3.数据操纵功能:使用数据操纵语言DML实现增删改查。</p><p>4.数据库的事务管理和运行管理。</p><p>5.数据库的建立和维护功能。</p><p>6.其他功能。</p></blockquote></li><li><p>数据库系统：数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。</p></li></ul></blockquote></li><li><p>三个阶段：人工管理阶段、文件系统阶段、数据库系统阶段 P6-P9</p><blockquote><ul><li>人工管理阶段：20世纪50年代中期前。</li><li>文件系统阶段：50年代后期至60年代中期。</li><li>数据库系统阶段：60年代后期至今。</li></ul><blockquote><p>从文件系统到数据库系统标志着数据管理技术的飞跃。</p></blockquote></blockquote></li><li><p>数据操作的组成要素：数据结构，数据操作，数据的完整性约束条件 P18</p><blockquote><ol><li>数据结构: 数据结构描述数据库的组成对象以及对象之间的联系。</li><li>数据操作：数据操作是指对数据库中各种对象(型)的实例(值)允许执行的操作的集合，包括操作及有关的操作规则。</li><li>数据的完整性约束条件： 数据的完整性约束条件是一组完整性规则。</li></ol><blockquote><p>完整性规则是给定的数据模型中数据及其联系所具有的制约和依存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容。</p></blockquote></blockquote></li><li><p>三个模型：层次模型，网状模型，关系模型 P19-P27</p><blockquote><ul><li><p>层次模型：最早出现的数据模型，典型代表是1968年的IBM公司推出的IMS。</p><blockquote><ol><li><blockquote><p>层次模型的数据结构：</p><blockquote><p>在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型：</p><p>1.有且只有一个结点没有双亲结点，这个结点称为根节点。</p><p>2.根以外的其他结点有且只有一个双亲结点。</p></blockquote><ul><li>层次模型像一棵倒立的树，结点的双亲是唯一的。</li></ul></blockquote></li><li><blockquote><p>层次模型的数据操纵和完整性约束：</p><blockquote><p>层次模型的数据操纵主要有查询、插入、删除和更新。进行插入、删除、更新操作时要满足层次模型的完整性约束条件。<br>进行插入操作时，如果没有相应的双亲结点值就不能插入它的子女结点值。例如在图1.11的层次数据库中，若新调入一名教员，但尚未分配到某个教研室，这时就不能将新教员插入到数据库中。<br>进行删除操作时，如果删除双亲结点值，则相应的子女结点值也将被同时删除。例如在图1.10的层次数据库中，若删除网络教研室，则该教研室所有教员的数据将全部丢失</p></blockquote></blockquote></li><li><blockquote><p>层次模型的优缺点：</p><ul><li><p>层次模型的优点主要有:</p><blockquote><p>(1)层次模型的数据结构比较简单清晰。</p><p>(2)层次数据库的查询效率高。因为层次模型中记录之间的联系用有向边表示，这种联系在DBMS中常常用指针来实现。因此这种联系也就是记录之间的存取路径。当要存取某个结点的记录值，DBMS就沿着这一条路径很快找到该记录值，所以层次数据库的性能优于关系数据库，不低于网状数据库。<br>(3)层次数据模型提供了良好的完整性支持。</p></blockquote></li><li><p>层次模型的缺点主要有:</p><blockquote><p>(1)现实世界中很多联系是非层次性的，如结点之间具有多对多联系，不适合用层次模型表示。<br>(2)如果一个结点具有多个双亲结点等，用层次模型表示这类联系就很笨拙，只能通过引入冗余数据(易产生不一致性)或创建非自然的数据结构(引入虚拟结点)来解决。对插入和删除操作的限制比较多，因此应用程序的编写比较复杂。<br>(3)查询子女结点必须通过双亲结点。<br>(4)由于结构严密，层次命令趋于程序化。</p></blockquote></li><li><p>可见，用层次模型对具有一对多的层次联系的部门描述非常自然、直观，容易理解这是层次数据库的突出优点。</p></li></ul></blockquote></li></ol></blockquote></li><li><p>网状模型:在现实世界中事物之间的联系更多的是非层次关系的，用层次模型表示非树形结构是很不直接的，网状模型则可以克服这一弊病。</p><blockquote><ol><li><blockquote><p>网状模型的数据结构:</p><blockquote><p>在数据库中，把满足以下两个条件的基本层次联系集合称为网状模型:</p><p>1.允许一个以上的结点无双亲。<br>2.一个结点可以有多于一个的双亲。</p></blockquote><ul><li>层次模型中子女结点与双亲结点的联系是唯一的，而在网状模型中这种联系可以不唯一。</li></ul></blockquote></li><li><blockquote><p>网状模型的数据操纵与完整性约束:</p><blockquote><p>网状模型一般来说没有层次模型那样严格的完整性约束条件，但具体的网状数据库系统对数据操纵都加了一些限制，提供了一定的完整性约束。<br>例如，DBTG在模式数据定义语言中提供了定义DBTG数据库完整性的若干概念和语<br>句，主要有:<br>(1)支持记录码的概念，码即唯一标识记录的数据项的集合。例如，学生记录(如图1.13)中学号是码，因此数据库中不允许学生记录中学号出现重复值。</p><p>(2)保证一个联系中双亲记录和子女记录之间是一对多的联系。<br>(3)可以支持双亲记录和子女记录之间的某些约束条件。例如，有些子女记录要求双亲记录存在才能插入，双亲记录删除时也连同删除。例如图1.13中选课记录就应该满足这种约束条件,学生选课记录值必须是数据库中存在的某一学生选修存在的某一门课的记录。DBTG提供了“属籍类别”的概念来描述这类约束条件。</p></blockquote></blockquote></li><li><blockquote><p>网状模型的优缺点:</p><ul><li><p>网状模型的优点主要有:</p><blockquote><p>(1)能够更为直接地描述现实世界，如一个结点可以有多个双亲，结点之间可以有多<br>种联系。<br>(2)具有良好的性能，存取效率较高。</p></blockquote></li><li><p>网状模型的缺点主要有:</p><blockquote><p>(1)结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握。<br>(2)网状模型的DDL、DML复杂，并且要嵌入某一种高级语言(如 COBOL、C)中。<br>用户不容易掌握，不容易使用。<br>(3)由于记录之间的联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存储路径，因此用户必须了解系统结构的细节，加重了编写应用程序的负担。</p></blockquote></li></ul></blockquote></li></ol></blockquote></li><li><p>关系模型：关系模型是最重要的一种数据模型。关系数据库系统采用关系模型作为数据的组织方式。</p><blockquote><ol><li>关系模型的数据结构:</li></ol><blockquote><ul><li>关系：一个关系对应通常说的一张表，例如图1.14中的这张学生登记表。</li><li>元组(tuple):表中的一行即为一个元组。</li><li>属性(attribute):表中的一列即为一个属性，给每一个属性起一个名称即属性名。如图1.14所示的表有6列，对应6个属性(学号，姓名，年龄，性别，系名和年级)。</li><li>码(key):也称为码键。表中的某个属性组，它可以唯一确定一个元组，如图1.14中的学号可以唯一确定一个学生，也就成为本关系的码。</li><li>域（domain):域是一组具有相同数据类型的值的集合。属性的取值范围来自某个域，如人的年龄一般在1至120 岁之间，大学生年龄属性的域是(15至45岁)，性别的城是(男女)，系名的域是一个学校所有系名的集合。</li></ul><blockquote><p>也就是属性的取值区间。</p></blockquote><ul><li>分量:元组中的一个属性值。</li><li>关系模式：对关系的描述，可表示为：</li></ul><blockquote><p>关系名（属性1，属性2，···，属性n）</p><p>例如，上面的关系可描述为学生(学号，姓名，年龄，性别，系名，年级)</p></blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">关系模式的要求必须是规范化的，关系的每一个分量必须是一个不可分的数据项，也就是不允许`表中有表`<br><br>ARCADE<br></code></pre></td></tr></table></figure></blockquote><ol><li>关系模型的数据操纵与完整性約束:</li></ol><blockquote><p>关系模型的数据操纵主要包括查询、插入、删除和更新数据。这些操作必须满足关系的完整性约束条件。</p><p>关系的完整性约束条件包括三大类:<code>实体完整性</code>、<code>参照完整性</code>和<code>用户定义的完整性</code>。其具体含义将在后续内容中介绍。</p><p>关系模型中的数据操作是集合操作，操作对象和操作结果都是关系，即若干元组的集合，而不像格式化模型中那样是单记录的操作方式。另一方面，关系模型把存取路径向用户隐蔽起来，用户只要指出<code>干什么</code>或<code>找什么</code>不必详细说明“怎么干”或“怎么找”,从而大大地提高了数据的独立性，提高了用户生产率。</p></blockquote><ol><li>关系模型的优缺点：</li></ol><blockquote><ul><li><p>关系模型具有下列优点:</p><blockquote><p>(1)关系模型与格式化模型不同，它是建立在严格的数学概念的基础上的。</p><p>(2)关系模型的概念单一。无论实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是关系(即表)。所以其数据结构简单、清晰，用户易懂易用。<br>(3)关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的上作和数据库开发建立的工作。<br>所以关系模型诞生以后发展迅速，深受用户的喜爱。</p></blockquote></li><li><p>关系模型具有下列缺点：</p><blockquote><p>例如，由于存取路径对用户是隐蔽的，查询效率往往不如格式化数据模型。为了提高性能，数据库管理系统必须对用户的查询请求进行优化，因此增加了开发数据库管理系统的难度。不过用户不必考虑这些系统内部的优化技术细节。</p></blockquote></li></ul></blockquote></blockquote></li></ul></blockquote></li><li><p>数据库系统的三级模式结构：模式、外模式、内模式 P29</p><blockquote><ol><li><p>数据库系统模式的概念：</p><blockquote><ul><li><p>在数据模型中有<code>型(type)</code>和<code>值(value)</code>的概念。型是指对某一类数据的结构和属性的说明，值是型的一个具体赋值。</p><p>例如，学生记录定义为(学号，姓名，性别，系别，年龄，籍贯)这样的记录型，</p><p>而(201315130，李明，男，计算机系，19，江苏南京市)则是该记录型的一个记录值。</p></li><li><p>模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及对型的描述，不涉及具体的值。</p><p>模式的一个具体值称为模式的一个实例。同一个模式可以有很多实例。</p></li><li><p>模式是相对稳定的，而实例是相对变动的。</p><p>因为数据库中的数据是在不断更新的。模式反映的是数据的结构及耳联系，而实例及映的是数据库某一时刻的状态。</p></li></ul></blockquote></li><li><p>数据库系统的三级模式结构：</p><blockquote><p>数据库系统的三级模式结构是指数据库系统是由外模式、模式和内模式三级构成。</p><ul><li><p>模式(schema)<br>模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。<code>一个数据库只有一个模式</code>。</p></li><li><p>外模式(external schema)</p><p>外模式也称子模式(subschema)或用户模式，它是数据库用户(包括应用程序员和最终用户)能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。<code>关系外模式通常是模式的子集</code>，<code>一个数据库可以有多个外模式</code>。</p></li><li><p>内模式(internal schema)</p><p>内模式也称存储模式(storage schema),<code>一个数据库只有一个内模式</code>,它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</p></li></ul></blockquote></li><li><p>数据库的二级映像功能与数据独立性</p><blockquote><p>数据库系统的三级模式是数据的三个抽象级别，它把数据的具体组织留给数据库管理系统管理，使用户能逻辑地、抽象地处理数据，而不必关心数据在计算机中的具体表示方式与存储方式。为了能够在系统内部实现这三个抽象层次的联系和转换，数据库管理系统在这三级模式之间提供了两层映像:<code>外模式/模式映像</code>和<code>模式/内模式映像</code>。<br>正是这两层映像保证了数据库系统中的数据能够具有较高的<code>逻辑独立性</code>和<code>物理独立性</code>。</p><blockquote><ol><li>外模式&#x2F;模式映像</li></ol><blockquote><p>描述的是数据的全局逻辑结构，(外模式描述的是数据的局部逻辑结构。对应于同一个模式可以有任意多个外模式。对于每一个外模式，数据库系统都有一个外模式&#x2F;模式映像，它定义了该外模式与模式之间的对应关系。这些映像定义通常包含在各自外模式的描述中。<br>当模式改变时(例如增加新的关系、新的属性、改变属性的数据类型等)，由数据库描述中。管理员对各个外模式&#x2F;模式的映像作相应改变，可以使外模式保持不变。<code>应用程序是依据数据的外模式编写的</code>，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</p></blockquote><ol><li>模式&#x2F;内模式映像</li></ol><blockquote><p>数据库中只有一个模式，也只有一个内模式，所以模式&#x2F;内模式映像是唯一的，它定义了数据全局逻辑结构与存储结构之间的对应关系。例如，说明逻辑记录和字段在内部是如何表示的。该映像定义通常包含在模式描述中。（如选用了另一种存储结构)，由数据库管理员对模式&#x2F;内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。</p></blockquote><ul><li>数据库模式即全局逻辑结构是数据库的中心与关键，它独立于数据库的其他层次。因此设计数据库模式结构时应首先确定数据库的逻辑模式。</li><li>数据库的外模式面向具体的应用程序。</li><li>特定的应用程序是在外模式描述的数据结构上编制的。</li></ul></blockquote></blockquote></li></ol></blockquote></li><li><p>数据库管理员DBA P31</p><blockquote><ul><li><p>DBA</p><blockquote><ol><li>决定数据库中的信息内容和结构。</li><li>决定数据库的存储结构和存取策略。</li><li>定义数据的安全性要求和完整性约束条件。</li><li>监控数据库的使用和运行。</li><li>数据库的改进和重组、重构。</li></ol></blockquote></li><li><p>系统分析员</p><blockquote><p>系统分析员负责应用系统的需求分析和规范说明，要和用户及数据库管理员相结合，确定系统的硬件软件配置，并参与数据库系统的概要设计。</p></blockquote></li><li><p>数据库设计人员</p><blockquote><p>数据库设计人员负责数据库中数据的确定及数据库各级模式的设计。数据库设计人员必须参加用户需求调查和系统分析，然后进行数据库设计。在很多情况下，数据库设计人员就由数据库管理员担任。</p></blockquote></li></ul></blockquote></li></ul><hr><h3 id="二、第二章（重点）"><a href="#二、第二章（重点）" class="headerlink" title="二、第二章（重点）"></a>二、第二章（重点）</h3><p>关系代数 P48</p><ul><li><p>概念解释：</p><blockquote><p>关系代数是一种抽象的查询语言，它用于对关系的运算来表示查询。</p><p>关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类。</p><ol><li>传统的集合运算将关系看成元组的集合，其运算是从关系的“水平”方向，即行的角度来进行；</li><li>而专门的关系运算不仅涉及行，而且涉及列。</li><li>比较运算符和逻辑运算符是用来辅助专门的关系运算符进行操纵的。</li></ol><table><thead><tr><th>运算符</th><th>含义</th><th></th></tr></thead><tbody><tr><td>集合 运算符</td><td>∪</td><td>并</td></tr><tr><td>-</td><td>差</td><td></td></tr><tr><td>∩</td><td>交</td><td></td></tr><tr><td>×</td><td>笛卡尔积</td><td></td></tr><tr><td>专门的 关系 运算符</td><td>σ</td><td>选择</td></tr><tr><td>π</td><td>投影</td><td></td></tr><tr><td>⋈</td><td>连接</td><td></td></tr><tr><td>÷</td><td>除</td><td></td></tr></tbody></table></blockquote></li><li><p>传统的集合运算：</p><blockquote><p>传统的集合运算是二目运算，包括并、差、交、笛卡尔积4种运算。</p><ul><li><p>并、差、交需要两张表结构相同。</p></li><li><p>笛卡尔积不需要两张表相同。</p><blockquote><p>这里的笛卡儿积严格地讲应该是广义的笛卡儿积,因为这里的笛卡尔积的元素是元组。<br>两个分别为n目和m目的关系R和S的笛卡儿积是一个(n+m)列的元组的集合。元组的前n列是关系R的一个元组，后m列是关系S的一个元组。若R有k1个元组，S有k2个元组，则关系R和关系S的笛卡儿积有k1×k2个元组。</p></blockquote></li></ul></blockquote></li><li><p>专门的关系运算：</p><blockquote><p>专门的关系运算包括选择、投影、连接、除运算等。</p><ol><li><p>选择：选择又称为限制，它是在关系R中选择满足给定条件的诸元组。</p><blockquote><table><thead><tr><th>运算符</th><th>含义</th><th></th></tr></thead><tbody><tr><td>比较 运算符</td><td>&gt;</td><td>大于</td></tr><tr><td>≥</td><td>大于等于</td><td></td></tr><tr><td>＜</td><td>小于</td><td></td></tr><tr><td>≤</td><td>小于等于</td><td></td></tr><tr><td>&#x3D;</td><td>等于</td><td></td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td></td></tr><tr><td>逻辑 运算符</td><td>¬</td><td>非</td></tr><tr><td>∧</td><td>与</td><td></td></tr><tr><td>∨</td><td>或</td><td></td></tr></tbody></table></blockquote></li><li><p>投影：关系R上的投影是从R中选择出若干属性列组成新的关系。</p><blockquote><p>投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组，因为取消了某些属性列后，就可能出现重复行，应取消这些完全相同的行。</p></blockquote></li><li><p>连接：连接也称为θ连接。它是从两个关系的笛卡儿积中选取属性间满足一定条件的元组。</p><blockquote><ul><li><p>θ为“&#x3D;”的连接运算称为等值连接。</p><p>自然连接是一种特殊的等值连接,它要求两个关系中进行比较的分量必须是同名的属性组,并且在结果中把重复的属性列去掉。</p><p>一般的连接操作是从行的角度进行运算，但自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。</p></li><li><p>此时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，从而造成R中这些元组在操作时被会弃了，同样，S中某些元组也可能被会弃。这些被会弃的元组称为悬浮元组(dangiingtupie)。</p></li><li><blockquote><p>如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(NULL)，那么这种连接就叫做外连接(outerjoin):</p><p>如果只保留左边关系R中的悬浮元组就叫做左外连接(let outerjoin或lett join);</p><p>如果只保留右边关系S中的悬浮元组就叫做右外连接(right outerjoin 或 right join)。</p></blockquote></li></ul></blockquote></li><li><p>除运算:设关系R除以关系S的结果为关系T，则<code>T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中</code>。</p><blockquote><p>给定关系R（X,Y）和S（Y,Z），其中X,Y,Z为属性组。R中的Y和S中的Y可以有不同的属性名，但必须出自相同的域集。</p><p>求解步骤：</p><ol><li>求R表各分量的象集；</li><li>依次查看R中各分量的象集哪个包含S表对公共属性组的投影元组的集合；</li><li>最后得出符合的分量的关系。</li></ol></blockquote></li></ol></blockquote></li><li><p>本节介绍了8种关系代数运算，其中并、差、笛卡儿积、选择和投影这5种运算为基本的运算。</p><p>其他三种运算，即交、连接和除，均可以用这5种基本运算来表达。引进它们并不增加语言的能力，但可以简化表达。</p><p>关系代数中，这些运算经有限次复合后形成的表达式称为<code>关系代数表达式</code>。</p></li></ul><hr><h3 id="三、第三章（重点）"><a href="#三、第三章（重点）" class="headerlink" title="三、第三章（重点）"></a>三、第三章（重点）</h3><ul><li><p>数据库查询</p></li><li><p>创建数据库</p></li><li><p>建索引，建视图</p></li><li><p>单表查询、多表查询</p></li><li><p>多看本章例题</p></li><li><p>3.3 数据定义</p><blockquote><p>关系数据库系统支持三级模式结构，其模式、外模式和内模式中的基本对象有模式表、视图和索引等。因此SQL的数据定义功能包括模式定义、表定义、视图和索引的定义如表 3.3 所示。</p><table><thead><tr><th>操作对象</th><th>操作方式</th><th></th><th></th></tr></thead><tbody><tr><td>创建</td><td>删除</td><td>修改</td><td></td></tr><tr><td>模式</td><td>CREATE SCHEMA</td><td>DROP SCHEMA</td><td>null</td></tr><tr><td>表</td><td>CREATE TABLE</td><td>DROP TABLE</td><td>ALTER TABLE</td></tr><tr><td>视图</td><td>CREATE VIEW</td><td>DROP VIEW</td><td>null</td></tr><tr><td>索引</td><td>CREATE INDEX</td><td>DROP INDEX</td><td>ALTER INDEX</td></tr></tbody></table><p>一个关系数据库管理系统的实例(instance)中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。</p></blockquote></li></ul><hr><h3 id="四、第四章"><a href="#四、第四章" class="headerlink" title="四、第四章"></a>四、第四章</h3><ul><li><p>安全性完整性 P133</p><blockquote><p>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</p><ul><li>用户身份鉴别：<ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul></li></ul></blockquote></li><li><p>授予与收回 P141</p></li></ul><hr><h3 id="五、第五章"><a href="#五、第五章" class="headerlink" title="五、第五章"></a>五、第五章</h3><ul><li>用户定义的完整性</li><li>参照完整性</li><li>实体完整性</li></ul><hr><h3 id="六、第六章"><a href="#六、第六章" class="headerlink" title="六、第六章"></a>六、第六章</h3><ul><li>给出题目写出函数依赖 P180</li><li>判断是几范式</li><li>然后解释为什么是几范式</li><li>最后修改为更高一级的范式</li></ul><p>一般考不到四范式</p><hr><h3 id="七、第七章"><a href="#七、第七章" class="headerlink" title="七、第七章"></a>七、第七章</h3><ul><li>概念结构设计 P 215</li><li>逻辑结构设计</li><li>物理结构设计</li><li>给出一段话画出E-R图</li><li>E-R图是概念结构设计</li><li>根据E-R图转换成关系模式 P 231</li></ul><hr><h3 id="九、第九章"><a href="#九、第九章" class="headerlink" title="九、第九章"></a>九、第九章</h3><ul><li><p>查询步骤 P 275</p><blockquote><ul><li>查询分析</li><li>查询检查</li><li>查询优化</li><li>查询执行</li></ul></blockquote></li><li><p>查询优化 P 280</p></li><li><p>代数优化：查询树 P 282</p><blockquote><ul><li>选择运算应尽可能先做。</li><li>把投影运算和选择运算同时进行。</li><li>把投影同其前或后的双目运算结合起来。</li><li>把某些选择同在它前面要执行的笛卡儿积结合起来成为一个连接运算。</li><li>找出公共子表达式。</li></ul></blockquote></li></ul><hr><h3 id="十、第十章"><a href="#十、第十章" class="headerlink" title="十、第十章"></a>十、第十章</h3><ul><li><p>事务基本概念 P 293 :我们说事务是用户定义的一个数据库的操作序列，要么全做，要么全不做是一个不可分割的单位</p><blockquote><p><code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持续性（永久性）</code>。</p><p>4个特征：</p><p>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p>一致性：事务执行的结果必修是使数据库从一个一致性状态到另外一个一致性状态。</p><p>隔离性：一个事务的执行不能被其他事务干扰。</p><p>持续性：持续性也称为永久性。指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</p></blockquote></li><li><p>正常结束，非正常结束</p></li><li><p>事务故障，登记日志 P 298</p></li><li><p>恢复的实现技术 P 297</p></li><li><p>恢复策略 P 300</p></li><li><blockquote><p>题目</p><p><strong>考虑下图所示的日志记录：</strong></p><table><thead><tr><th>序号</th><th>日志</th></tr></thead><tbody><tr><td>1</td><td>T1：开始</td></tr><tr><td>2</td><td>T1：写A，A&#x3D;10</td></tr><tr><td>3</td><td>T2：开始</td></tr><tr><td>4</td><td>T2：写B，B&#x3D;9</td></tr><tr><td>5</td><td>T1：写C，C&#x3D;11</td></tr><tr><td>6</td><td>T1：提交</td></tr><tr><td>7</td><td>T2：写C，C&#x3D;13</td></tr><tr><td>8</td><td>T3：开始</td></tr><tr><td>9</td><td>T3：写A，A&#x3D;8</td></tr><tr><td>10</td><td>T2：回滚</td></tr><tr><td>11</td><td>T3：写B，B&#x3D;7</td></tr><tr><td>12</td><td>T4：开始</td></tr><tr><td>13</td><td>T3：提交</td></tr><tr><td>14</td><td>T4：写C，C&#x3D;12</td></tr></tbody></table><p><strong>假设开始时A，B，C的值都是0：</strong></p><p>（1）<strong>如果系统故障发生在14之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1T3,T2T4</strong></p><p><strong>A&#x3D;8,B&#x3D;7;C&#x3D;11</strong></p><p>（2）<strong>如果系统故障发生在10之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1,T2T3</strong></p><p><strong>A&#x3D;10,B&#x3D;0,C&#x3D;11</strong></p><p>（3）<strong>如果系统故障发生在9之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值；</strong></p><p><strong>T1,T2T3</strong></p><p><strong>A&#x3D;10,B&#x3D;0,C&#x3D;11</strong></p><p>（4）<strong>如果系统故障发生在7之后，说明哪些事务需要重做，哪些事务需要回滚。系统恢复后A，B，C的值。</strong></p><p><strong>T1,T2</strong></p><p><strong>A&#x3D;10,B&#x3D;0,C&#x3D;11</strong></p></blockquote></li></ul><hr><h3 id="十一、第十一章"><a href="#十一、第十一章" class="headerlink" title="十一、第十一章"></a>十一、第十一章</h3><ul><li><p>给出并行的图判断是哪种并行错误：丢失修改、不可重复度，读脏数据 P 311</p></li><li><p>判断之后怎么解决，根据封锁协议回答 P 313</p><blockquote><p>****题目1*****<em><strong>．补充题*</strong></em></p><p><strong>针对下面三种不一致性给出解决方案。</strong></p><p>a. 丢失修改：一级封锁协议</p><ul><li>事务t在修改数据r之前必须先对其加X锁。直到事务结束才释放</li></ul><p>b. 不可重复读：三级封锁协议</p><ul><li>在一级封锁协议的基础上增加事务t在读取数据r之前必须先对其加s锁，直到事务结束释放</li></ul><p>c. 读“脏”数据：二级封锁协议</p><ul><li>在一级封锁协议的基础上增加事务t在读取数据r之前必须先对其加s锁，读完后即可释放s锁</li></ul></blockquote></li><li><p>死锁的预防 P 315</p></li><li><p>并发调度的可串行性 P 317</p><p><a href="https://xiazhimiao.oss-cn-beijing.aliyuncs.com/%E5%86%B2%E7%AA%81%E6%93%8D%E4%BD%9C.png"><img src="/2024/07/14/%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%A6%E8%A7%A3%E6%96%87%E7%AB%A0/%E5%86%B2%E7%AA%81%E6%93%8D%E4%BD%9C.png" alt="冲突情况"></a></p><blockquote><p><a href="https://blog.csdn.net/bijingrui/article/details/105479502">可串行化 冲突可串行化 判断方法</a></p><p>****题目********2*****<em><strong>．*</strong></em></p><p><strong>判断r3(B)r1(A)w3(B)r2(B)r2(A)w2(B)r1(B)w1(A)是否是冲突可串行化调度。</strong></p><p>Sc1&#x3D;<strong>r3(B)r1(A)w3(B)r2(B)r2(A)w2(B)r1(B)w1(A)</strong></p><p><strong>1.可以先把***<em>r1(A)</em></strong>*和****w3(B)**<strong>交换</strong></p><p>**得到Sc2&#x3D;**<strong>r3(B)w3(B)r1(A)r2(B)r2(A)w2(B)r1(B)w1(A)</strong></p><p>*<em>2.然后再把r1（A）和</em>***r2(B)r2(A)w2(B)**<strong>交换</strong></p><p>**得到Sc3&#x3D;**<strong>r3(B)w3(B)r2(B)r2(A)w2(B)r1(A)r1(B)w1(A)</strong></p><p><strong>3.Sc3等价于一个串行调度T3T2T1，并且两次操作都是基于不冲突操作的，所以Sc1即题目为冲突可串行化调度</strong></p></blockquote></li><li><p>两段锁协议 P 319</p></li></ul><hr><h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>以上就是本次2024数据库的考试范围，没提到就是不考，在复习的时候需要着重看例题加深理解</p><p>最后如果本篇文章对你有帮助，请在本文下方评论学到了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>数据库</tag>
      
      <tag>详解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024数据库复习范围</title>
    <link href="/2024/07/13/2024%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%8C%83%E5%9B%B4/"/>
    <url>/2024/07/13/2024%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库考试范围"><a href="#数据库考试范围" class="headerlink" title="数据库考试范围"></a>数据库考试范围</h1><h3 id="PS：以下页码以《数据库系统概论第五版》为主"><a href="#PS：以下页码以《数据库系统概论第五版》为主" class="headerlink" title="PS：以下页码以《数据库系统概论第五版》为主"></a>PS：以下页码以《数据库系统概论第五版》为主</h3><h3 id="一、第一章"><a href="#一、第一章" class="headerlink" title="一、第一章"></a>一、第一章</h3><ul><li>数据库基本概念 P3</li><li>数据、数据库管理系统 P4-P5</li><li>三个阶段：人工管理阶段、文件系统阶段、数据库系统阶段 P6-P9</li><li>三个模型：层次模式，网状模型，关系模型 P19-P27</li><li>数据操作的组成要素：数据结构，数据操作，数据的完整性约束条件 P18</li><li>数据库系统的三级模式结构：模式、外模式、内模式 P29</li><li>数据库管理员DBA P31</li></ul><hr><h3 id="二、第二章（重点）"><a href="#二、第二章（重点）" class="headerlink" title="二、第二章（重点）"></a>二、第二章（重点）</h3><p>关系代数 P48</p><hr><h3 id="三、第三章（重点）"><a href="#三、第三章（重点）" class="headerlink" title="三、第三章（重点）"></a>三、第三章（重点）</h3><ul><li>数据库查询</li><li>创建数据库</li><li>建索引，建视图</li><li>单表查询、多表查询</li><li>多看本章例题</li></ul><hr><h3 id="四、第四章"><a href="#四、第四章" class="headerlink" title="四、第四章"></a>四、第四章</h3><ul><li>安全性完整性 P133</li><li>授予与收回 P141</li></ul><hr><h3 id="五、第五章"><a href="#五、第五章" class="headerlink" title="五、第五章"></a>五、第五章</h3><ul><li>用户定义的完整性</li><li>参照完整性</li><li>实体完整性</li></ul><hr><h3 id="六、第六章"><a href="#六、第六章" class="headerlink" title="六、第六章"></a>六、第六章</h3><ul><li>给出题目写出函数依赖 P180</li><li>判断是几范式</li><li>然后解释为什么是几范式</li><li>最后修改为更高一级的范式</li></ul><p>一般考不到四范式</p><hr><h3 id="七、第七章"><a href="#七、第七章" class="headerlink" title="七、第七章"></a>七、第七章</h3><ul><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>给出一段话画出E-R图</li><li>E-R图是概念结构设计</li><li>根据E-R图转换成关系模式 P231</li></ul><hr><h3 id="九、第九章"><a href="#九、第九章" class="headerlink" title="九、第九章"></a>九、第九章</h3><ul><li>查询步骤 P275</li><li>查询优化 P280</li><li>代数优化：查询树 P282</li></ul><hr><h3 id="十、第十章"><a href="#十、第十章" class="headerlink" title="十、第十章"></a>十、第十章</h3><ul><li>事务基本概念 P293 :我们说事务是用户定义的一个数据库的操作序列，要么全做，要么全不做是一个不可分割的单位</li><li>正常结束，非正常结束</li><li>事务故障，登记日志 P298</li><li>恢复的实现技术 P297</li><li>恢复策略 P300</li></ul><hr><h3 id="十一、第十一章"><a href="#十一、第十一章" class="headerlink" title="十一、第十一章"></a>十一、第十一章</h3><ul><li>给出并行的图判断是哪种并行错误：丢失修改、不可重复度，读脏数据 P311</li><li>判断之后怎么解决，根据封锁协议回答 P313</li><li>死锁的预防 P315</li><li>并发调度的可串行性 P317</li><li>两段锁协议 P319</li></ul><hr><h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>以上就是本次2024数据库的考试范围，没提到就是不考，在复习的时候需要着重看例题加深理解</p><p>最后如果本篇文章对你有帮助，请在本文下方评论学到了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>数据库</tag>
      
      <tag>考试范围</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/15/hello-world/"/>
    <url>/2024/01/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/01/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/01/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/01/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E5%B0%8F%E9%BB%84%E9%B8%AD%E5%A4%B4%E5%83%8F.jpg" alt="小黄鸭头像"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
